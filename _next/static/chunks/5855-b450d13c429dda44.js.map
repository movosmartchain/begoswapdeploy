{"version":3,"file":"static/chunks/5855-b450d13c429dda44.js","mappings":"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b,CACA,CACAD,YAAA,SACApJ,IAAA,SACaqJ,IAAA,SACb,CACA,CACAD,YAAA,WACApJ,IAAA,WACaqJ,IAAA,WACb,EACA,CACArJ,IAAA,kBACAyJ,OAAA,EACA,CACAL,YAAA,SACApJ,IAAA,IACaqJ,IAAA,SACb,EACA,CACAC,eAAA,QACKD,IAAA,YACL,CACA,CACAF,MAAA,EACA,CACAC,YAAA,oBACApJ,IAAA,WACaqJ,IAAA,WACb,CACA,CACAD,YAAA,mBACApJ,IAAA,eACaqJ,IAAA,WACb,CACA,CACAD,YAAA,mBACApJ,IAAA,UACaqJ,IAAA,WACb,CACA,CACAD,YAAA,WACApJ,IAAA,YACaqJ,IAAA,WACb,CACA,CACAD,YAAA,SACApJ,IAAA,SACaqJ,IAAA,SACb,CACA,CACAD,YAAA,WACApJ,IAAA,WACaqJ,IAAA,WACb,CACA,CACAD,YAAA,WACApJ,IAAA,WACaqJ,IAAA,WACb,EACA,CACArJ,IAAA,oBACAyJ,OAAA,EACA,CACAL,YAAA,SACApJ,IAAA,IACaqJ,IAAA,SACb,EACA,CACAC,eAAA,QACKD,IAAA,YACL,CACA,CACAF,MAAA,EACA,CACAC,YAAA,WACApJ,IAAA,IACaqJ,IAAA,WACb,EACA,CACArJ,IAAA,eACAyJ,OAAA,EACA,CACAL,YAAA,WACApJ,IAAA,IACaqJ,IAAA,WACb,EACA,CACAC,eAAA,QACKD,IAAA,YACL,CACA,CACAF,MAAA,EACA,CACAC,YAAA,oBACApJ,IAAA,WACaqJ,IAAA,WACb,CACA,CACAD,YAAA,mBACApJ,IAAA,eACaqJ,IAAA,WACb,CACA,CACAD,YAAA,mBACApJ,IAAA,UACaqJ,IAAA,WACb,CACA,CACAD,YAAA,SACApJ,IAAA,SACaqJ,IAAA,SACb,CACA,CACAD,YAAA,SACApJ,IAAA,cACaqJ,IAAA,SACb,CACA,CACAD,YAAA,SACApJ,IAAA,YACaqJ,IAAA,SACb,EACA,CACArJ,IAAA,gBACAyJ,OAAA,IACAH,eAAA,cACKD,IAAA,YACL,CACA,CACAF,MAAA,EACA,CACAC,YAAA,oBACApJ,IAAA,WA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","sources":["webpack://_N_E/./node_modules/@ethersproject/json-wallets/node_modules/aes-js/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/constants/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/contracts/types/factories/ERC20OrderRouter__factory.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/contracts/types/factories/ERC20__factory.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/contracts/types/factories/GelatoLimitOrders__factory.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/contracts/types/factories/Multicall__factory.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/contracts/types/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/limit-orders/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/stoplimit-orders/core.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/stoplimit-orders/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/types/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/utils/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/utils/queries/constants.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/utils/queries/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/dist/utils/queries/stoplimit.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql-request/dist/createRequestBody.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql-request/dist/index.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql-request/dist/types.js","webpack://_N_E/./node_modules/@ethersproject/hash/lib.esm/message.js","webpack://_N_E/./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js","webpack://_N_E/./node_modules/@ethersproject/wordlists/lib.esm/_version.js","webpack://_N_E/./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js","webpack://_N_E/./node_modules/@ethersproject/wordlists/lib.esm/lang-en.js","webpack://_N_E/./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js","webpack://_N_E/./node_modules/@ethersproject/hdnode/lib.esm/_version.js","webpack://_N_E/./node_modules/@ethersproject/hdnode/lib.esm/index.js","webpack://_N_E/./node_modules/@ethersproject/random/lib.esm/_version.js","webpack://_N_E/./node_modules/@ethersproject/random/lib.esm/random.js","webpack://_N_E/./node_modules/@ethersproject/json-wallets/lib.esm/_version.js","webpack://_N_E/./node_modules/@ethersproject/json-wallets/lib.esm/utils.js","webpack://_N_E/./node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js","webpack://_N_E/./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js","webpack://_N_E/./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js","webpack://_N_E/./node_modules/@ethersproject/json-wallets/lib.esm/index.js","webpack://_N_E/./node_modules/@ethersproject/wallet/lib.esm/_version.js","webpack://_N_E/./node_modules/@ethersproject/wallet/lib.esm/index.js","webpack://_N_E/./node_modules/@ethersproject/constants/lib.esm/strings.js","webpack://_N_E/./node_modules/@ethersproject/constants/lib.esm/index.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/_version.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/formatter.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/base-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/ws.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js","webpack://_N_E/./node_modules/@ethersproject/random/lib.esm/shuffle.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/infura-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/web3-provider.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/index.js","webpack://_N_E/./node_modules/@ethersproject/base64/lib.esm/index.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/solidity/lib.esm/_version.js","webpack://_N_E/./node_modules/ethers/node_modules/@ethersproject/solidity/lib.esm/index.js","webpack://_N_E/./node_modules/ethers/lib.esm/utils.js","webpack://_N_E/./node_modules/ethers/lib.esm/_version.js","webpack://_N_E/./node_modules/ethers/lib.esm/ethers.js","webpack://_N_E/./node_modules/ethers/lib.esm/index.js","webpack://_N_E/./node_modules/scrypt-js/scrypt.js","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/inspect.mjs","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/invariant.mjs","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/defineInspect.mjs","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/ast.mjs","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/visitor.mjs","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/blockString.mjs","webpack://_N_E/./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/printer.mjs","webpack://_N_E/<anon>"],"sourcesContent":["\"use strict\";\n\n(function(root) {\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = value >> 8;\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (typeof exports !== 'undefined') {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(aesjs);\n\n    // Web Browsers\n    } else {\n\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n    }\n\n\n})(this);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS = exports.GENERIC_GAS_LIMIT_ORDER_EXECUTION = exports.NATIVE_WRAPPED_TOKEN_ADDRESS = exports.NATIVE_TOKEN_NAME = exports.NATIVE_WRAPPED_TOKEN_TICKER = exports.NATIVE_TOKEN_TICKER = exports.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER = exports.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS = exports.GELATO_LIMIT_ORDERS_MODULE_ADDRESS = exports.GELATO_LIMIT_ORDERS_ADDRESS = exports.SUBGRAPH_URL = exports.OLD_SUBGRAPH_URL = exports.NETWORK_STOP_LIMIT_HANDLERS = exports.NETWORK_HANDLERS = exports.NETWORK_NAME = exports.HANDLERS_ADDRESSES = exports.LIMIT_ORDER_SLIPPAGE = exports.STOP_LIMIT_SLIPPAGE_BPS = exports.BPS_GELATO_FEE = exports.CHAIN_ID = exports.MAX_LIFETIME_IN_SECONDS = exports.SLIPPAGE_BPS = exports.ETH_ADDRESS = void 0;\nexports.ETH_ADDRESS = \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\nexports.SLIPPAGE_BPS = 40; // 0.4%\nexports.MAX_LIFETIME_IN_SECONDS = 7889238; // 3 months in seconds\nexports.CHAIN_ID = {\n    MAINNET: 1,\n    ROPSTEN: 3,\n    GOERLI: 5,\n    BSC: 56,\n    MATIC: 137,\n    FANTOM: 250,\n    AVAX: 43114,\n};\nexports.BPS_GELATO_FEE = {\n    [exports.CHAIN_ID.MAINNET]: 10,\n    [exports.CHAIN_ID.MATIC]: 10,\n    [exports.CHAIN_ID.FANTOM]: 10,\n    [exports.CHAIN_ID.BSC]: 10,\n    [exports.CHAIN_ID.AVAX]: 10,\n};\nexports.STOP_LIMIT_SLIPPAGE_BPS = {\n    [exports.CHAIN_ID.MAINNET]: 500,\n    [exports.CHAIN_ID.ROPSTEN]: 500,\n    [exports.CHAIN_ID.MATIC]: 500,\n    [exports.CHAIN_ID.FANTOM]: 500,\n    [exports.CHAIN_ID.BSC]: 500,\n    [exports.CHAIN_ID.AVAX]: 500,\n};\nexports.LIMIT_ORDER_SLIPPAGE = {\n    [exports.CHAIN_ID.MAINNET]: 40,\n    [exports.CHAIN_ID.ROPSTEN]: 40,\n    [exports.CHAIN_ID.MATIC]: 40,\n    [exports.CHAIN_ID.FANTOM]: 40,\n    [exports.CHAIN_ID.BSC]: 40,\n    [exports.CHAIN_ID.AVAX]: 40,\n};\nexports.HANDLERS_ADDRESSES = {\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.MAINNET]: {\n        [\"uniswap\"]: \"0x837c03414fb86861f28ca7e91e5fd770fda0f52d\",\n        [\"uniswap_stoplimit\"]: \"0xf437a1a98566872f734bd18addf4bb610d1f887b\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.ROPSTEN]: {\n        [\"uniswap\"]: \"0x1f397f95d31eb20183b69d685a5060cfdefd508b\",\n        [\"quickswap_stoplimit\"]: \"0x87bE4Eb9dFb2DefcEA035D3010f33584Fc8ddDB5\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.MATIC]: {\n        [\"quickswap\"]: \"0xaccbd2c6ad75ad3394dc5f4b1f606bf111e4eae3\",\n        [\"polydex\"]: \"0x00fc86d360162e4672ec6B427E12ed36F39f1f53\",\n        [\"cafeswap\"]: \"0xd167afcee4e9a89e69646fd3c27e58b61d1b7f97\",\n        [\"quickswap_stoplimit\"]: \"0x51cc226648f8de65513de7cdfd3e7b116156234e\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.FANTOM]: {\n        [\"spiritswap\"]: \"0x5fb00386558ccc219e51b69d8e963ef20b0c267a\",\n        [\"spookyswap\"]: \"0x228ffd7122d202c0cd24330892881c47b0817c7a\",\n        [\"bombswap\"]: \"0x87C4Fbd67f6DD8a1B5EFD9879956c728C97afeFe\",\n        [\"defyswap\"]: \"0x3d401587320522a5e0bb973d10a852430a8edbbd\",\n        [\"spiritswap_stoplimit\"]: \"0x6ea82c72732389c5149326e048a46be9f8bec8e8\",\n        [\"spookyswap_stoplimit\"]: \"0xe912cd26c4a4cfffc175a297f1328ab23313a1a7\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.BSC]: {\n        [\"pancakeswap\"]: \"0x88f8CCC064bA2D39cF08D57B6e7504a7B6bE8E4e\",\n        [\"pancakeswap_stoplimit\"]: \"0x84b826bcd26f1bc0cd5fbbdef7f5b8965d6bbb38\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.AVAX]: {\n        [\"traderjoe\"]: \"0x88f8CCC064bA2D39cF08D57B6e7504a7B6bE8E4e\",\n        [\"pangolin\"]: \"0x8b206547cfe6f35a77ddab2d6d97260765a349ef\",\n        [\"pangolin_stoplimit\"]: \"0xb4c53e2e32caf977d61a8a776bdc44837a5d0d91\",\n        [\"traderjoe_stoplimit\"]: \"0xcf497830e43836738bdd0c3d7e09b599ddf081b2\",\n    },\n};\nexports.NETWORK_NAME = {\n    [exports.CHAIN_ID.MAINNET]: \"Ethereum\",\n    [exports.CHAIN_ID.ROPSTEN]: \"Ropsten\",\n    [exports.CHAIN_ID.GOERLI]: \"Goerli\",\n    [exports.CHAIN_ID.MATIC]: \"Polygon (Matic)\",\n    [exports.CHAIN_ID.FANTOM]: \"FANTOM\",\n    [exports.CHAIN_ID.BSC]: \"BSC\",\n    [exports.CHAIN_ID.AVAX]: \"AVAX\",\n};\nexports.NETWORK_HANDLERS = {\n    [exports.CHAIN_ID.MAINNET]: [\"uniswap\", \"uniswap_stoplimit\"],\n    [exports.CHAIN_ID.ROPSTEN]: [\"uniswap\", \"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.MATIC]: [\"quickswap\", \"polydex\", \"cafeswap\", \"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.FANTOM]: [\n        \"spiritswap\",\n        \"spookyswap\",\n        \"bombswap\",\n        \"defyswap\",\n        \"spiritswap_stoplimit\",\n        \"spookyswap_stoplimit\",\n    ],\n    [exports.CHAIN_ID.BSC]: [\"pancakeswap\", \"pancakeswap_stoplimit\"],\n    [exports.CHAIN_ID.AVAX]: [\n        \"traderjoe\",\n        \"pangolin\",\n        \"pangolin_stoplimit\",\n        \"traderjoe_stoplimit\",\n    ],\n};\nexports.NETWORK_STOP_LIMIT_HANDLERS = {\n    [exports.CHAIN_ID.MAINNET]: [\"uniswap_stoplimit\"],\n    [exports.CHAIN_ID.ROPSTEN]: [\"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.MATIC]: [\"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.BSC]: [\"pancakeswap_stoplimit\"],\n    [exports.CHAIN_ID.FANTOM]: [\"spookyswap_stoplimit\", \"spiritswap_stoplimit\"],\n    [exports.CHAIN_ID.AVAX]: [\"traderjoe_stoplimit\", \"pangolin_stoplimit\"],\n};\nexports.OLD_SUBGRAPH_URL = {\n    [exports.CHAIN_ID.MAINNET]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders\",\n    [exports.CHAIN_ID.ROPSTEN]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-ropsten\",\n    [exports.CHAIN_ID.MATIC]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-polygon\",\n    [exports.CHAIN_ID.FANTOM]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-fantom\",\n};\nexports.SUBGRAPH_URL = {\n    [exports.CHAIN_ID.MAINNET]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-ii\",\n    [exports.CHAIN_ID.MATIC]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-polygon-ii\",\n    [exports.CHAIN_ID.FANTOM]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-fantom-ii\",\n    [exports.CHAIN_ID.BSC]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-bsc\",\n    [exports.CHAIN_ID.AVAX]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-avax\",\n};\nexports.GELATO_LIMIT_ORDERS_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0x36049D479A97CdE1fC6E2a5D2caE30B666Ebf92B\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0x0e5096D201Fe2985f5C26432A76f145D6e5D1453\",\n    [exports.CHAIN_ID.GOERLI]: \"0xa0453c6ab71fe3da89640ee2503326bd0899a589\",\n    [exports.CHAIN_ID.MATIC]: \"0x38c4092b28dAB7F3d98eE6524549571c283cdfA5\",\n    [exports.CHAIN_ID.FANTOM]: \"0x05Ad1094Eb6Cde564d732196F6754Ee464896031\",\n    [exports.CHAIN_ID.BSC]: \"0x0c30D3d66bc7C73A83fdA929888c34dcb24FD599\",\n    [exports.CHAIN_ID.AVAX]: \"0x0c30D3d66bc7C73A83fdA929888c34dcb24FD599\",\n};\nexports.GELATO_LIMIT_ORDERS_MODULE_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0x037fc8e71445910e1E0bBb2a0896d5e9A7485318\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0x3f3C13b09B601fb6074124fF8D779d2964caBf8B\",\n    [exports.CHAIN_ID.GOERLI]: \"0xCf8EDB3333Fae73b23f689229F4De6Ac95d1f707\",\n    [exports.CHAIN_ID.MATIC]: \"0x5A36178E38864F5E724A2DaF5f9cD9bA473f7903\",\n    [exports.CHAIN_ID.FANTOM]: \"0xf2253BF9a0BD002300cFe6f4E630d755669f6DCa\",\n    [exports.CHAIN_ID.BSC]: \"0xb7499a92fc36e9053a4324aFfae59d333635D9c3\",\n    [exports.CHAIN_ID.AVAX]: \"0xb7499a92fc36e9053a4324aFfae59d333635D9c3\",\n};\nexports.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0xbeC333EDE1A0687D2b9624F8C073a54c93ba9777\",\n    [exports.CHAIN_ID.GOERLI]: \"0xCf8EDB3333Fae73b23f689229F4De6Ac95d1f707\",\n};\nexports.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER = {\n    [exports.CHAIN_ID.MAINNET]: \"0x5fb00386558ccc219e51b69d8e963ef20b0c267a\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0x9c06ff386779cc2269d482bcecf2378a4ff5cb90\",\n    [exports.CHAIN_ID.GOERLI]: \"0x247A1306b6122ba28862b19a95004899db91f1b5\",\n    [exports.CHAIN_ID.MATIC]: \"0x0c2c2963a4353ffd839590f7cb1e783688378814\",\n    [exports.CHAIN_ID.FANTOM]: \"0x59e61b95f20e940ac777e88fa2dfa0a6a4c40fa0\",\n    [exports.CHAIN_ID.BSC]: \"0x64c7f3c2C19B41a6aD67bb5f4edc8EdbB3284F34\",\n    [exports.CHAIN_ID.AVAX]: \"0x64c7f3c2C19B41a6aD67bb5f4edc8EdbB3284F34\",\n};\nexports.NATIVE_TOKEN_TICKER = {\n    [exports.CHAIN_ID.MAINNET]: \"ETH\",\n    [exports.CHAIN_ID.ROPSTEN]: \"ETH\",\n    [exports.CHAIN_ID.GOERLI]: \"ETH\",\n    [exports.CHAIN_ID.MATIC]: \"MATIC\",\n    [exports.CHAIN_ID.FANTOM]: \"FTM\",\n    [exports.CHAIN_ID.BSC]: \"BNB\",\n    [exports.CHAIN_ID.AVAX]: \"AVAX\",\n};\nexports.NATIVE_WRAPPED_TOKEN_TICKER = {\n    [exports.CHAIN_ID.MAINNET]: \"WETH\",\n    [exports.CHAIN_ID.ROPSTEN]: \"WETH\",\n    [exports.CHAIN_ID.GOERLI]: \"WETH\",\n    [exports.CHAIN_ID.MATIC]: \"WMATIC\",\n    [exports.CHAIN_ID.FANTOM]: \"WFTM\",\n    [exports.CHAIN_ID.BSC]: \"WBNB\",\n    [exports.CHAIN_ID.AVAX]: \"WAVAX\",\n};\nexports.NATIVE_TOKEN_NAME = {\n    [exports.CHAIN_ID.MAINNET]: \"Ether\",\n    [exports.CHAIN_ID.ROPSTEN]: \"Ether\",\n    [exports.CHAIN_ID.GOERLI]: \"Ether\",\n    [exports.CHAIN_ID.MATIC]: \"Matic\",\n    [exports.CHAIN_ID.FANTOM]: \"Fantom\",\n    [exports.CHAIN_ID.BSC]: \"Bnb\",\n    [exports.CHAIN_ID.AVAX]: \"Avax\",\n};\nexports.NATIVE_WRAPPED_TOKEN_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0xc778417e063141139fce010982780140aa0cd5ab\",\n    [exports.CHAIN_ID.GOERLI]: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n    [exports.CHAIN_ID.MATIC]: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n    [exports.CHAIN_ID.FANTOM]: \"0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83\",\n    [exports.CHAIN_ID.BSC]: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n    [exports.CHAIN_ID.AVAX]: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n};\nexports.GENERIC_GAS_LIMIT_ORDER_EXECUTION = \"400000\";\nexports.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0x260aB0aCb931D7Da784fC35c7E96c3B13213Abf1\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0xDC41072F4aFE7e4a7ea0f21d13a92662Fe733C55\",\n    [exports.CHAIN_ID.MATIC]: \"0x81967ac4ce8e2d94f7e4b4cf3d2e760605079604\",\n    [exports.CHAIN_ID.BSC]: \"0xe912cd26c4a4cfffc175a297f1328ab23313a1a7\",\n    [exports.CHAIN_ID.FANTOM]: \"0xf437a1a98566872f734bd18addf4bb610d1f887b\",\n    [exports.CHAIN_ID.AVAX]: \"0xf437a1a98566872f734bd18addf4bb610d1f887b\",\n};\n","\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERC20OrderRouter__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IGelatoPineCore\",\n                name: \"_gelatoPineCore\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"caller\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"module\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"inputToken\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"witness\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"secret\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DepositToken\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_secret\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"depositToken\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"gelatoPineCore\",\n        outputs: [\n            {\n                internalType: \"contract IGelatoPineCore\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ERC20OrderRouter__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.ERC20OrderRouter__factory = ERC20OrderRouter__factory;\nERC20OrderRouter__factory.abi = _abi;\n","\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERC20__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"balance\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"fallback\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n];\nclass ERC20__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.ERC20__factory = ERC20__factory;\nERC20__factory.abi = _abi;\n","\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GelatoLimitOrders__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"DepositETH\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"OrderCancelled\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_auxData\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bought\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"OrderExecuted\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ETH_ADDRESS\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_auxData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"canExecuteOrder\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"cancelOrder\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"decodeOrder\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"secret\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"depositEth\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_secret\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"encodeEthOrder\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_secret\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"encodeTokenOrder\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ethDeposits\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_signature\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_auxData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"executeOrder\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"existOrder\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"keyOf\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"vaultOfOrder\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nclass GelatoLimitOrders__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.GelatoLimitOrders__factory = GelatoLimitOrders__factory;\nGelatoLimitOrders__factory.abi = _abi;\n","\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Multicall__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_factory\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_mainModule\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_imageHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_threshold\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_signers\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"RequiredConfig\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_signer\",\n                type: \"address\",\n            },\n        ],\n        name: \"RequiredSigner\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callBalanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callBlockNumber\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_i\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"callBlockhash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callChainId\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callCode\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"code\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callCodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"codeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callCodeSize\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"size\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callCoinbase\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callDifficulty\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callGasLeft\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callGasLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callGasPrice\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callOrigin\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"lastSignerUpdate\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"lastWalletUpdate\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bool\",\n                        name: \"delegateCall\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revertOnError\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"target\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IModuleCalls.Transaction[]\",\n                name: \"_txs\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiCall\",\n        outputs: [\n            {\n                internalType: \"bool[]\",\n                name: \"_successes\",\n                type: \"bool[]\",\n            },\n            {\n                internalType: \"bytes[]\",\n                name: \"_results\",\n                type: \"bytes[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_threshold\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"weight\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"signer\",\n                        type: \"address\",\n                    },\n                ],\n                internalType: \"struct RequireUtils.Member[]\",\n                name: \"_members\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_index\",\n                type: \"bool\",\n            },\n        ],\n        name: \"publishConfig\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_hash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_sizeMembers\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_signature\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_index\",\n                type: \"bool\",\n            },\n        ],\n        name: \"publishInitialSigners\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_nonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"requireMinNonce\",\n        outputs: [],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_expiration\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"requireNonExpired\",\n        outputs: [],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass Multicall__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.Multicall__factory = Multicall__factory;\nMulticall__factory.abi = _abi;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Multicall__factory = exports.GelatoLimitOrders__factory = exports.ERC20OrderRouter__factory = exports.ERC20__factory = void 0;\nvar ERC20__factory_1 = require(\"./factories/ERC20__factory\");\nObject.defineProperty(exports, \"ERC20__factory\", { enumerable: true, get: function () { return ERC20__factory_1.ERC20__factory; } });\nvar ERC20OrderRouter__factory_1 = require(\"./factories/ERC20OrderRouter__factory\");\nObject.defineProperty(exports, \"ERC20OrderRouter__factory\", { enumerable: true, get: function () { return ERC20OrderRouter__factory_1.ERC20OrderRouter__factory; } });\nvar GelatoLimitOrders__factory_1 = require(\"./factories/GelatoLimitOrders__factory\");\nObject.defineProperty(exports, \"GelatoLimitOrders__factory\", { enumerable: true, get: function () { return GelatoLimitOrders__factory_1.GelatoLimitOrders__factory; } });\nvar Multicall__factory_1 = require(\"./factories/Multicall__factory\");\nObject.defineProperty(exports, \"Multicall__factory\", { enumerable: true, get: function () { return Multicall__factory_1.Multicall__factory; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.constants = exports.utils = exports.isEthereumChain = exports.GelatoStopLimitOrders = exports.isValidChainIdAndHandler = exports.GelatoLimitOrders = void 0;\nconst tslib_1 = require(\"tslib\");\nvar limit_orders_1 = require(\"./limit-orders\");\nObject.defineProperty(exports, \"GelatoLimitOrders\", { enumerable: true, get: function () { return limit_orders_1.GelatoLimitOrders; } });\nObject.defineProperty(exports, \"isValidChainIdAndHandler\", { enumerable: true, get: function () { return limit_orders_1.isValidChainIdAndHandler; } });\nvar stoplimit_orders_1 = require(\"./stoplimit-orders\");\nObject.defineProperty(exports, \"GelatoStopLimitOrders\", { enumerable: true, get: function () { return stoplimit_orders_1.GelatoStopLimitOrders; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"isEthereumChain\", { enumerable: true, get: function () { return utils_1.isEthereumChain; } });\n(0, tslib_1.__exportStar)(require(\"./types\"), exports);\nexports.utils = (0, tslib_1.__importStar)(require(\"./utils\"));\nexports.constants = (0, tslib_1.__importStar)(require(\"./constants\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GelatoLimitOrders = exports.isFlashbotsCompatibleChainId = exports.isValidChainIdAndHandler = void 0;\nconst tslib_1 = require(\"tslib\");\nconst ethers_1 = require(\"ethers\");\nconst abstract_provider_1 = require(\"@ethersproject/abstract-provider\");\nconst abstract_signer_1 = require(\"@ethersproject/abstract-signer\");\nconst constants_1 = require(\"../constants\");\nconst types_1 = require(\"../contracts/types\");\nconst queries_1 = require(\"../utils/queries\");\nconst utils_1 = require(\"../utils\");\nconst isValidChainIdAndHandler = (chainId, handler) => {\n    return constants_1.NETWORK_HANDLERS[chainId].includes(handler);\n};\nexports.isValidChainIdAndHandler = isValidChainIdAndHandler;\nconst isFlashbotsCompatibleChainId = (chainId) => {\n    return chainId == constants_1.CHAIN_ID.MAINNET || chainId == constants_1.CHAIN_ID.GOERLI;\n};\nexports.isFlashbotsCompatibleChainId = isFlashbotsCompatibleChainId;\nclass GelatoLimitOrders {\n    constructor(chainId, signerOrProvider, handler, isFlashbotsProtected = false) {\n        var _a;\n        if (handler && !(0, exports.isValidChainIdAndHandler)(chainId, handler)) {\n            throw new Error(\"Invalid chainId and handler\");\n        }\n        else if (isFlashbotsProtected &&\n            (handler || !(0, exports.isFlashbotsCompatibleChainId)(chainId))) {\n            throw new Error(\"Invalid chainId or handler for Flashbots bundle submission. handler must be undefined, and chainId either 1 (mainnet) or 5 (goerli)\");\n        }\n        this._chainId = chainId;\n        this._gelatoFeeBPS = constants_1.BPS_GELATO_FEE[chainId];\n        this._slippageBPS = constants_1.LIMIT_ORDER_SLIPPAGE[chainId];\n        this._subgraphUrl = constants_1.SUBGRAPH_URL[chainId];\n        this._signer = abstract_signer_1.Signer.isSigner(signerOrProvider)\n            ? signerOrProvider\n            : undefined;\n        this._provider = abstract_provider_1.Provider.isProvider(signerOrProvider)\n            ? signerOrProvider\n            : abstract_signer_1.Signer.isSigner(signerOrProvider)\n                ? signerOrProvider.provider\n                : undefined;\n        this._gelatoLimitOrders = this._signer\n            ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._signer)\n            : this._provider\n                ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], types_1.GelatoLimitOrders__factory.createInterface());\n        this._moduleAddress = isFlashbotsProtected\n            ? constants_1.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS[this._chainId]\n            : constants_1.GELATO_LIMIT_ORDERS_MODULE_ADDRESS[this._chainId];\n        this._handler = handler;\n        this._handlerAddress = handler\n            ? (_a = constants_1.HANDLERS_ADDRESSES[this._chainId][handler]) === null || _a === void 0 ? void 0 : _a.toLowerCase()\n            : undefined;\n        this._isFlashbotsProtected = isFlashbotsProtected;\n        this._abiEncoder = new ethers_1.utils.AbiCoder();\n        this._erc20OrderRouter = this._signer\n            ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._signer)\n            : this._provider\n                ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], types_1.ERC20OrderRouter__factory.createInterface());\n    }\n    get gelatoFeeBPS() {\n        return this._gelatoFeeBPS;\n    }\n    get slippageBPS() {\n        return this._slippageBPS;\n    }\n    get chainId() {\n        return this._chainId;\n    }\n    get signer() {\n        return this._signer;\n    }\n    get provider() {\n        return this._provider;\n    }\n    get subgraphUrl() {\n        return this._subgraphUrl;\n    }\n    get handler() {\n        return this._handler;\n    }\n    get handlerAddress() {\n        return this._handlerAddress;\n    }\n    get moduleAddress() {\n        return this._moduleAddress;\n    }\n    get contract() {\n        return this._gelatoLimitOrders;\n    }\n    get erc20OrderRouter() {\n        return this._erc20OrderRouter;\n    }\n    get isFlashbotsProtected() {\n        return this._isFlashbotsProtected;\n    }\n    encodeLimitOrderSubmission(inputToken, outputToken, inputAmount, minReturn, owner, checkAllowance = true) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const { payload } = yield this.encodeLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, minReturn, owner, checkAllowance);\n            return payload;\n        });\n    }\n    encodeLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, minReturnToBeParsed, owner, checkAllowance = true) {\n        var _a;\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const randomSecret = ethers_1.utils.hexlify(ethers_1.utils.randomBytes(19)).replace(\"0x\", \"\");\n            // 0x67656c61746f6e6574776f726b = gelatonetwork in hex\n            const fullSecret = `0x67656c61746f6e6574776f726b${randomSecret}`;\n            const { privateKey: secret, address: witness } = new ethers_1.Wallet(fullSecret);\n            const { minReturn } = this.getFeeAndSlippageAdjustedMinReturn(minReturnToBeParsed);\n            const payload = yield this._encodeSubmitData(inputToken, outputToken, owner, witness, inputAmount, minReturn, secret, checkAllowance);\n            const encodedData = this._handlerAddress\n                ? this._abiEncoder.encode([\"address\", \"uint256\", \"address\"], [outputToken, minReturn, this._handlerAddress])\n                : this._abiEncoder.encode([\"address\", \"uint256\"], [outputToken, minReturn]);\n            return {\n                payload,\n                secret,\n                witness,\n                order: {\n                    id: this._getKey({\n                        module: this._moduleAddress,\n                        inputToken,\n                        owner,\n                        witness,\n                        data: encodedData,\n                    }),\n                    module: this._moduleAddress.toLowerCase(),\n                    data: encodedData,\n                    inputToken: inputToken.toLowerCase(),\n                    outputToken: outputToken.toLowerCase(),\n                    owner: owner.toLowerCase(),\n                    witness: witness.toLowerCase(),\n                    inputAmount: inputAmount.toString(),\n                    minReturn: minReturn.toString(),\n                    adjustedMinReturn: minReturnToBeParsed.toString(),\n                    inputData: payload.data.toString(),\n                    secret: secret.toLowerCase(),\n                    handler: (_a = this._handlerAddress) !== null && _a !== void 0 ? _a : null,\n                },\n            };\n        });\n    }\n    submitLimitOrder(inputToken, outputToken, inputAmount, minReturn, checkAllowance = true, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            const owner = yield this._signer.getAddress();\n            const txData = yield this.encodeLimitOrderSubmission(inputToken, outputToken, inputAmount, minReturn, owner, checkAllowance);\n            return this._signer.sendTransaction(Object.assign(Object.assign({}, overrides), { to: txData.to, data: txData.data, value: ethers_1.BigNumber.from(txData.value) }));\n        });\n    }\n    encodeLimitOrderCancellation(order, checkIsActiveOrder) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._gelatoLimitOrders)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!order.owner)\n                throw new Error(\"No owner\");\n            if (!order.module)\n                throw new Error(\"No module in order\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const data = this._gelatoLimitOrders.interface.encodeFunctionData(\"cancelOrder\", [order.module, order.inputToken, order.owner, order.witness, order.data]);\n            return {\n                data,\n                to: this._gelatoLimitOrders.address,\n                value: ethers_1.constants.Zero,\n            };\n        });\n    }\n    cancelLimitOrder(order, checkIsActiveOrder, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            if (!this._gelatoLimitOrders)\n                throw new Error(\"No gelato limit orders contract\");\n            let _order = order;\n            if (order.id) {\n                try {\n                    const subgraphOrder = yield Promise.race([\n                        this.getOrder(order.id),\n                        new Promise((resolve) => setTimeout(resolve, 5000)).then(() => {\n                            throw new Error(\"Timeout\");\n                        }),\n                    ]);\n                    if (subgraphOrder) {\n                        if (subgraphOrder.status === \"cancelled\") {\n                            throw new Error(`Order status is not open. Current order status: ${subgraphOrder.status}. Cancellation transaction hash: ${subgraphOrder.cancelledTxHash}`);\n                        }\n                        if (subgraphOrder.status === \"executed\") {\n                            throw new Error(`Order status is not open. Current order status: ${subgraphOrder.status}. Execution transaction hash: ${subgraphOrder.executedTxHash}`);\n                        }\n                        _order = Object.assign(Object.assign({}, order), subgraphOrder);\n                    }\n                    // eslint-disable-next-line no-empty\n                }\n                catch (error) { }\n            }\n            if (!_order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!_order.witness)\n                throw new Error(\"No witness in order\");\n            if (!_order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!_order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!_order.data)\n                throw new Error(\"No data in order\");\n            if (!_order.module)\n                throw new Error(\"No module in order\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(_order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const owner = yield this._signer.getAddress();\n            if (owner.toLowerCase() !== order.owner.toLowerCase())\n                throw new Error(\"Owner and signer mismatch\");\n            return this._gelatoLimitOrders.cancelOrder(_order.module, _order.inputToken, _order.owner, _order.witness, _order.data, overrides !== null && overrides !== void 0 ? overrides : {\n                gasLimit: (0, utils_1.isEthereumChain)(this._chainId) ? 600000 : 2000000,\n            });\n        });\n    }\n    approveTokenAmount(inputToken, amount, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            return overrides\n                ? types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount, overrides)\n                : types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount);\n        });\n    }\n    isActiveOrder(order) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider)\n                throw new Error(\"No provider\");\n            if (!this._gelatoLimitOrders)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.module)\n                throw new Error(\"No module in order\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.owner)\n                throw new Error(\"No owner in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.data)\n                throw new Error(\"No data in order\");\n            return this._gelatoLimitOrders.existOrder(order.module, order.inputToken, order.owner, order.witness, order.data);\n        });\n    }\n    getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(18));\n        if (invert) {\n            return ethers_1.BigNumber.from(inputValue)\n                .mul(factor)\n                .div(outputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputValue)\n                .mul(factor)\n                .div(inputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .toString();\n        }\n    }\n    getFeeAndSlippageAdjustedMinReturn(outputAmount, extraSlippageBPS) {\n        if (extraSlippageBPS) {\n            if (!Number.isInteger(extraSlippageBPS))\n                throw new Error(\"Extra Slippage BPS must an unsigned integer\");\n        }\n        const gelatoFee = ethers_1.BigNumber.from(outputAmount)\n            .mul(this._gelatoFeeBPS)\n            .div(10000)\n            .gte(1)\n            ? ethers_1.BigNumber.from(outputAmount).mul(this._gelatoFeeBPS).div(10000)\n            : ethers_1.BigNumber.from(1);\n        const slippageBPS = extraSlippageBPS\n            ? this._slippageBPS + extraSlippageBPS\n            : this._slippageBPS;\n        const slippage = ethers_1.BigNumber.from(outputAmount).mul(slippageBPS).div(10000);\n        const minReturn = ethers_1.BigNumber.from(outputAmount).sub(gelatoFee).sub(slippage);\n        return {\n            minReturn: minReturn.toString(),\n            slippage: slippage.toString(),\n            gelatoFee: gelatoFee.toString(),\n        };\n    }\n    getAdjustedMinReturn(minReturn, extraSlippageBPS) {\n        const gelatoFee = ethers_1.BigNumber.from(this._gelatoFeeBPS);\n        const slippage = extraSlippageBPS\n            ? ethers_1.BigNumber.from(this._slippageBPS + extraSlippageBPS)\n            : ethers_1.BigNumber.from(this._slippageBPS);\n        const fees = gelatoFee.add(slippage);\n        const adjustedMinReturn = ethers_1.BigNumber.from(minReturn)\n            .mul(10000)\n            .div(ethers_1.BigNumber.from(10000).sub(fees));\n        return adjustedMinReturn.toString();\n    }\n    getExecutionPrice(inputAmount, inputDecimals, outputAmount, outputDecimals, isInverted = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(isInverted ? outputDecimals : inputDecimals));\n        if (isInverted) {\n            return ethers_1.BigNumber.from(inputAmount)\n                .mul(factor)\n                .div(outputAmount)\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputAmount)\n                .mul(factor)\n                .div(inputAmount)\n                .toString();\n        }\n    }\n    getOrder(orderId) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const order = yield (0, queries_1.queryOrder)(orderId, this._chainId);\n            if (order) {\n                return Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) });\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    getOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getOpenOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryOpenOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getPastOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryPastOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getExecutedOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryExecutedOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getCancelledOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryCancelledOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    _getKey(order) {\n        return ethers_1.utils.keccak256(this._abiEncoder.encode([\"address\", \"address\", \"address\", \"address\", \"bytes\"], [order.module, order.inputToken, order.owner, order.witness, order.data]));\n    }\n    _encodeSubmitData(inputToken, outputToken, owner, witness, amount, minReturn, secret, checkAllowance) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider)\n                throw new Error(\"No provider\");\n            if (inputToken.toLowerCase() === outputToken.toLowerCase())\n                throw new Error(\"Input token and output token can not be equal\");\n            const encodedData = this._handlerAddress\n                ? this._abiEncoder.encode([\"address\", \"uint256\", \"address\"], [outputToken, minReturn, this._handlerAddress])\n                : this._abiEncoder.encode([\"address\", \"uint256\"], [outputToken, minReturn]);\n            let data, value, to;\n            if ((0, utils_1.isNetworkGasToken)(inputToken)) {\n                const encodedEthOrder = yield this._gelatoLimitOrders.encodeEthOrder(this._moduleAddress, constants_1.ETH_ADDRESS, // we also use ETH_ADDRESS if it's MATIC\n                owner, witness, encodedData, secret);\n                data = this._gelatoLimitOrders.interface.encodeFunctionData(\"depositEth\", [encodedEthOrder]);\n                value = amount;\n                to = this._gelatoLimitOrders.address;\n            }\n            else {\n                if (checkAllowance) {\n                    const allowance = yield types_1.ERC20__factory.connect(inputToken, this._provider).allowance(owner, this._erc20OrderRouter.address);\n                    if (allowance.lt(amount))\n                        throw new Error(\"Insufficient token allowance for placing order\");\n                }\n                data = this._erc20OrderRouter.interface.encodeFunctionData(\"depositToken\", [\n                    amount,\n                    this._moduleAddress,\n                    inputToken,\n                    owner,\n                    witness,\n                    encodedData,\n                    secret,\n                ]);\n                value = ethers_1.constants.Zero;\n                to = this._erc20OrderRouter.address;\n            }\n            return { data, value, to };\n        });\n    }\n}\nexports.GelatoLimitOrders = GelatoLimitOrders;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GelatoBase = exports.isETHOrWETH = exports.isFlashbotsCompatibleChainId = exports.isValidChainIdAndHandler = void 0;\nconst tslib_1 = require(\"tslib\");\nconst ethers_1 = require(\"ethers\");\nconst abstract_provider_1 = require(\"@ethersproject/abstract-provider\");\nconst abstract_signer_1 = require(\"@ethersproject/abstract-signer\");\nconst constants_1 = require(\"../constants\");\nconst types_1 = require(\"../contracts/types\");\nconst utils_1 = require(\"../utils\");\nconst isValidChainIdAndHandler = (chainId, handler) => {\n    return constants_1.NETWORK_HANDLERS[chainId].includes(handler);\n};\nexports.isValidChainIdAndHandler = isValidChainIdAndHandler;\nconst isFlashbotsCompatibleChainId = (chainId) => {\n    return chainId == constants_1.CHAIN_ID.MAINNET || chainId == constants_1.CHAIN_ID.GOERLI;\n};\nexports.isFlashbotsCompatibleChainId = isFlashbotsCompatibleChainId;\nconst isETHOrWETH = (tokenAddress, chainID) => {\n    const WETH_ADDRESS = constants_1.NATIVE_WRAPPED_TOKEN_ADDRESS[chainID];\n    return (tokenAddress.toLowerCase() === constants_1.ETH_ADDRESS.toLowerCase() ||\n        tokenAddress.toLowerCase() === WETH_ADDRESS.toLowerCase());\n};\nexports.isETHOrWETH = isETHOrWETH;\nclass GelatoBase {\n    constructor(chainId, moduleAddress, signerOrProvider, handler, handlerAddress) {\n        if (handler && !(0, exports.isValidChainIdAndHandler)(chainId, handler)) {\n            throw new Error(\"Invalid chainId and handler\");\n        }\n        this._chainId = chainId;\n        this._gelatoFeeBPS = !(0, utils_1.isEthereumChain)(chainId)\n            ? constants_1.BPS_GELATO_FEE[chainId]\n            : 0;\n        this._slippageBPS = constants_1.STOP_LIMIT_SLIPPAGE_BPS[chainId];\n        this._subgraphUrl = constants_1.SUBGRAPH_URL[chainId];\n        this._signer = abstract_signer_1.Signer.isSigner(signerOrProvider)\n            ? signerOrProvider\n            : undefined;\n        this._provider = abstract_provider_1.Provider.isProvider(signerOrProvider)\n            ? signerOrProvider\n            : abstract_signer_1.Signer.isSigner(signerOrProvider)\n                ? signerOrProvider.provider\n                : undefined;\n        this._gelatoCore = this._signer\n            ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._signer)\n            : this._provider\n                ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], types_1.GelatoLimitOrders__factory.createInterface());\n        this._abiEncoder = new ethers_1.utils.AbiCoder();\n        this._erc20OrderRouter = this._signer\n            ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._signer)\n            : this._provider\n                ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], types_1.ERC20OrderRouter__factory.createInterface());\n        this._handler = handler;\n        this._handlerAddress = handlerAddress;\n        this._moduleAddress = moduleAddress;\n    }\n    get gelatoFeeBPS() {\n        return this._gelatoFeeBPS;\n    }\n    get slippageBPS() {\n        return this._slippageBPS;\n    }\n    get chainId() {\n        return this._chainId;\n    }\n    get signer() {\n        return this._signer;\n    }\n    get provider() {\n        return this._provider;\n    }\n    get subgraphUrl() {\n        return this._subgraphUrl;\n    }\n    get handler() {\n        return this._handler;\n    }\n    get handlerAddress() {\n        return this._handlerAddress;\n    }\n    get moduleAddress() {\n        return this._moduleAddress;\n    }\n    get contract() {\n        return this._gelatoCore;\n    }\n    get erc20OrderRouter() {\n        return this._erc20OrderRouter;\n    }\n    get abiEncoder() {\n        return this._abiEncoder;\n    }\n    encodeLimitOrderCancellation(order, checkIsActiveOrder) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._gelatoCore)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!order.owner)\n                throw new Error(\"No owner\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const data = this._gelatoCore.interface.encodeFunctionData(\"cancelOrder\", [\n                this._moduleAddress,\n                order.inputToken,\n                order.owner,\n                order.witness,\n                order.data,\n            ]);\n            return {\n                data,\n                to: this._gelatoCore.address,\n                value: ethers_1.constants.Zero,\n            };\n        });\n    }\n    cancelStopLimitOrder(order, checkIsActiveOrder, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            if (!this._gelatoCore)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!order.data)\n                throw new Error(\"No data in order\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const owner = yield this._signer.getAddress();\n            if (owner.toLowerCase() !== order.owner.toLowerCase())\n                throw new Error(\"Owner and signer mismatch\");\n            return this._gelatoCore.cancelOrder(this._moduleAddress, order.inputToken, order.owner, order.witness, order.data, overrides !== null && overrides !== void 0 ? overrides : {\n                gasLimit: (0, utils_1.isEthereumChain)(this._chainId) ? 500000 : 1500000,\n            });\n        });\n    }\n    approveTokenAmount(inputToken, amount, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            return overrides\n                ? types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount, overrides)\n                : types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount);\n        });\n    }\n    isActiveOrder(order) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider)\n                throw new Error(\"No provider\");\n            if (!this._gelatoCore)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.module)\n                throw new Error(\"No module in order\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.owner)\n                throw new Error(\"No owner in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.data)\n                throw new Error(\"No data in order\");\n            return this._gelatoCore.existOrder(order.module, order.inputToken, order.owner, order.witness, order.data);\n        });\n    }\n    getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(18));\n        if (invert) {\n            return ethers_1.BigNumber.from(inputValue)\n                .mul(factor)\n                .div(outputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputValue)\n                .mul(factor)\n                .div(inputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .toString();\n        }\n    }\n    getFeeAndSlippageAdjustedMinReturn(outputAmount, extraSlippageBPS) {\n        if (extraSlippageBPS) {\n            if (!Number.isInteger(extraSlippageBPS))\n                throw new Error(\"Extra Slippage BPS must an unsigned integer\");\n        }\n        const gelatoFee = (0, utils_1.isEthereumChain)(this._chainId)\n            ? 0\n            : ethers_1.BigNumber.from(outputAmount).mul(this._gelatoFeeBPS).div(10000).gte(1)\n                ? ethers_1.BigNumber.from(outputAmount).mul(this._gelatoFeeBPS).div(10000)\n                : ethers_1.BigNumber.from(1);\n        const slippageBPS = extraSlippageBPS ? extraSlippageBPS : this._slippageBPS;\n        const slippage = ethers_1.BigNumber.from(outputAmount).mul(slippageBPS).div(10000);\n        const minReturn = ethers_1.BigNumber.from(outputAmount).sub(gelatoFee).sub(slippage);\n        return {\n            minReturn: minReturn.toString(),\n            slippage: slippage.toString(),\n            gelatoFee: gelatoFee.toString(),\n        };\n    }\n    getAdjustedMinReturn(minReturn, extraSlippageBPS) {\n        if ((0, utils_1.isEthereumChain)(this._chainId))\n            throw new Error(\"Method not available for current chain.\");\n        const gelatoFee = ethers_1.BigNumber.from(this._gelatoFeeBPS);\n        const slippage = extraSlippageBPS\n            ? ethers_1.BigNumber.from(extraSlippageBPS)\n            : ethers_1.BigNumber.from(this._slippageBPS);\n        const fees = gelatoFee.add(slippage);\n        const adjustedMinReturn = ethers_1.BigNumber.from(minReturn)\n            .mul(10000)\n            .div(ethers_1.BigNumber.from(10000).sub(fees));\n        return adjustedMinReturn.toString();\n    }\n    getExecutionPrice(inputAmount, inputDecimals, outputAmount, outputDecimals, isInverted = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(isInverted ? outputDecimals : inputDecimals));\n        if (isInverted) {\n            return ethers_1.BigNumber.from(inputAmount)\n                .mul(factor)\n                .div(outputAmount)\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputAmount)\n                .mul(factor)\n                .div(inputAmount)\n                .toString();\n        }\n    }\n    _getKey(order) {\n        return ethers_1.utils.keccak256(this._abiEncoder.encode([\"address\", \"address\", \"address\", \"address\", \"bytes\"], [order.module, order.inputToken, order.owner, order.witness, order.data]));\n    }\n    _encodeSubmitData(inputToken, outputToken, owner, witness, amount, maxReturn, minReturn, secret, checkAllowance) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.provider)\n                throw new Error(\"No provider\");\n            if (!this.handlerAddress)\n                throw new Error(\"No handlerAddress\");\n            if (inputToken.toLowerCase() === outputToken.toLowerCase())\n                throw new Error(\"Input token and output token can not be equal\");\n            const encodedData = this.abiEncoder.encode([\"address\", \"uint256\", \"address\", \"uint256\"], [outputToken, minReturn, this.handlerAddress, maxReturn]);\n            let data, value, to;\n            if ((0, utils_1.isNetworkGasToken)(inputToken)) {\n                const encodedEthOrder = yield this.contract.encodeEthOrder(this.moduleAddress, constants_1.ETH_ADDRESS, // we also use ETH_ADDRESS if it's MATIC\n                owner, witness, encodedData, secret);\n                data = this.contract.interface.encodeFunctionData(\"depositEth\", [\n                    encodedEthOrder,\n                ]);\n                value = amount;\n                to = this.contract.address;\n            }\n            else {\n                if (checkAllowance) {\n                    const allowance = yield types_1.ERC20__factory.connect(inputToken, this.provider).allowance(owner, this.erc20OrderRouter.address);\n                    if (allowance.lt(amount))\n                        throw new Error(\"Insufficient token allowance for placing order\");\n                }\n                data = this.erc20OrderRouter.interface.encodeFunctionData(\"depositToken\", [\n                    amount,\n                    this.moduleAddress,\n                    inputToken,\n                    owner,\n                    witness,\n                    encodedData,\n                    secret,\n                ]);\n                value = ethers_1.constants.Zero;\n                to = this.erc20OrderRouter.address;\n            }\n            return { data, value, to };\n        });\n    }\n}\nexports.GelatoBase = GelatoBase;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GelatoStopLimitOrders = void 0;\nconst tslib_1 = require(\"tslib\");\nconst ethers_1 = require(\"ethers\");\nconst constants_1 = require(\"../constants\");\nconst core_1 = require(\"./core\");\nconst stoplimit_1 = require(\"../utils/queries/stoplimit\");\nclass GelatoStopLimitOrders extends core_1.GelatoBase {\n    constructor(chainId, signerOrProvider, handler) {\n        var _a;\n        if (handler && !(0, core_1.isValidChainIdAndHandler)(chainId, handler)) {\n            throw new Error(\"Invalid chainId and handler\");\n        }\n        const sotplossHandlers = constants_1.NETWORK_STOP_LIMIT_HANDLERS[chainId];\n        if (!handler) {\n            throw new Error(\"No Handler defined\");\n        }\n        if (handler && !sotplossHandlers.includes(handler)) {\n            throw new Error(\"Handler not supported\");\n        }\n        const moduleAddress = constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId];\n        if (!moduleAddress)\n            throw new Error(\"Invalid chainId and handler\");\n        const handlerAddress = (_a = constants_1.HANDLERS_ADDRESSES[chainId][handler]) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        super(chainId, moduleAddress, signerOrProvider, handler, handlerAddress);\n    }\n    submitStopLimitOrder(inputToken, outputToken, inputAmount, maxReturn, checkAllowance = true, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.signer)\n                throw new Error(\"No signer\");\n            if (!maxReturn)\n                throw new Error(\"No StopLimit defined\");\n            const owner = yield this.signer.getAddress();\n            const txData = yield this.encodeStopLimitOrderSubmission(inputToken, outputToken, inputAmount, maxReturn, owner, checkAllowance);\n            return this.signer.sendTransaction(Object.assign(Object.assign({}, overrides), { to: txData.to, data: txData.data, value: ethers_1.BigNumber.from(txData.value) }));\n        });\n    }\n    encodeStopLimitOrderSubmission(inputToken, outputToken, inputAmount, maxReturn, owner, checkAllowance = true) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const { payload } = yield this.encodeStopLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, maxReturn, owner, checkAllowance);\n            return payload;\n        });\n    }\n    encodeStopLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, maxReturnToBeParsed, owner, checkAllowance = true) {\n        var _a;\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!maxReturnToBeParsed)\n                throw new Error(\"No StopLimit defined\");\n            if (!this.handlerAddress)\n                throw new Error(\"No handlerAddress\");\n            const randomSecret = ethers_1.utils.hexlify(ethers_1.utils.randomBytes(19)).replace(\"0x\", \"\");\n            // 0x67656c61746f6e6574776f726b = gelatonetwork in hex\n            const fullSecret = `0x67656c61746f6e6574776f726b${randomSecret}`;\n            const { privateKey: secret, address: witness } = new ethers_1.Wallet(fullSecret);\n            const { minReturn } = this.getFeeAndSlippageAdjustedMinReturn(maxReturnToBeParsed);\n            const payload = yield this._encodeSubmitData(inputToken, outputToken, owner, witness, inputAmount, maxReturnToBeParsed, minReturn, secret, checkAllowance);\n            const encodedData = this.abiEncoder.encode([\"address\", \"uint256\", \"address\", \"uint256\"], [outputToken, minReturn, this.handlerAddress, maxReturnToBeParsed]);\n            return {\n                payload,\n                secret,\n                witness,\n                order: {\n                    id: this._getKey({\n                        module: this.moduleAddress,\n                        inputToken,\n                        owner,\n                        witness,\n                        data: encodedData,\n                    }),\n                    module: this.moduleAddress.toLowerCase(),\n                    data: encodedData,\n                    inputToken: inputToken.toLowerCase(),\n                    outputToken: outputToken.toLowerCase(),\n                    owner: owner.toLowerCase(),\n                    witness: witness.toLowerCase(),\n                    inputAmount: inputAmount.toString(),\n                    minReturn: minReturn.toString(),\n                    maxReturn: maxReturnToBeParsed.toString(),\n                    adjustedMinReturn: maxReturnToBeParsed.toString(),\n                    inputData: payload.data.toString(),\n                    secret: secret.toLowerCase(),\n                    handler: (_a = this.handlerAddress) !== null && _a !== void 0 ? _a : null,\n                },\n            };\n        });\n    }\n    getOpenStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getExecutedStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitExecutedOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getCancelledStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitCancelledOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getPastStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryPastOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n}\nexports.GelatoStopLimitOrders = GelatoStopLimitOrders;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEthereumChain = exports.isTransactionCostDependentChain = exports.isNetworkGasToken = exports.queries = void 0;\nconst tslib_1 = require(\"tslib\");\nconst constants_1 = require(\"../constants\");\nexports.queries = (0, tslib_1.__importStar)(require(\"./queries/constants\"));\nconst isNetworkGasToken = (token) => {\n    if (token.toLowerCase() === constants_1.ETH_ADDRESS.toLowerCase()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n};\nexports.isNetworkGasToken = isNetworkGasToken;\nconst isTransactionCostDependentChain = (chainId) => {\n    switch (chainId) {\n        case 1:\n            return true;\n        case 3:\n            return true;\n        case 5:\n            return true;\n        case 56:\n            return true;\n        case 250:\n            return true;\n        case 43114:\n            return true;\n        default:\n            return false;\n    }\n};\nexports.isTransactionCostDependentChain = isTransactionCostDependentChain;\nconst isEthereumChain = (chainId) => {\n    switch (chainId) {\n        case 1:\n            return true;\n        case 3:\n            return true;\n        case 5:\n            return true;\n        default:\n            return false;\n    }\n};\nexports.isEthereumChain = isEthereumChain;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER = exports.GET_ALL_CANCELLED_ORDERS_BY_OWNER = exports.GET_ALL_EXECUTED_ORDERS_BY_OWNER = exports.GET_ALL_PAST_ORDERS_BY_OWNER = exports.GET_ALL_OPEN_ORDERS_BY_OWNER = exports.GET_ALL_ORDERS_BY_OWNER = exports.GET_ORDER_BY_ID = void 0;\nconst graphql_request_1 = require(\"graphql-request\");\nexports.GET_ORDER_BY_ID = (0, graphql_request_1.gql) `\n  query getOrdersByOwner($id: String) {\n    orders(where: { id: $id }) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_OPEN_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getOpenOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status: open }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_PAST_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getPastOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status_not: open }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_EXECUTED_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getExecutedOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status: executed }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_CANCELLED_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getCancelledOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status: cancelled }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getOrdersByOwner($owner: String, $module: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, module: $module }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      maxReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryCancelledOrders = exports.queryExecutedOrders = exports.queryPastOrders = exports.queryOpenOrders = exports.queryOrders = exports.queryOrder = void 0;\nconst tslib_1 = require(\"tslib\");\nconst graphql_request_1 = require(\"graphql-request\");\nconst constants_1 = require(\"../../constants\");\nconst constants_2 = require(\"./constants\");\nconst stopLimitModule = (chainId) => constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase();\nconst queryOrder = (orderId, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    var _a;\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n                id: orderId.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n                id: orderId.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return (_a = _getUniqueOrdersWithExpiry(allOrders, chainId).pop()) !== null && _a !== void 0 ? _a : null;\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryOrder = queryOrder;\nconst queryOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId);\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryOrders = queryOrders;\nconst queryOpenOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for open orders\");\n    }\n});\nexports.queryOpenOrders = queryOpenOrders;\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status !== \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for past orders\");\n    }\n});\nexports.queryPastOrders = queryPastOrders;\nconst queryExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"executed\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for executed orders\");\n    }\n});\nexports.queryExecutedOrders = queryExecutedOrders;\nconst queryCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"cancelled\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for cancelled orders\");\n    }\n});\nexports.queryCancelledOrders = queryCancelledOrders;\nconst _getUniqueOrdersWithExpiry = (allOrders, chainId) => \n// create Map and asign order id to order (key:value) to avoid having duplicated orders form multiple subgraphs\n[...new Map(allOrders.map((order) => [order.id, order])).values()]\n    // sort by `updatedAt` asc so that the most recent one will be used\n    .sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt))\n    // filter out stop limit module\n    .filter((order) => order.module !== stopLimitModule(chainId))\n    // add expiry to order obj\n    .map((order) => {\n    const isExpired = Date.now() >\n        (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n    return Object.assign(Object.assign({}, order), { isExpired });\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._getUniqueOrdersWithExpiry = exports.queryPastOrders = exports.queryStopLimitCancelledOrders = exports.queryStopLimitExecutedOrders = exports.queryOpenStopLimitOrders = exports.queryStopLimitOrders = void 0;\nconst tslib_1 = require(\"tslib\");\nconst graphql_request_1 = require(\"graphql-request\");\nconst constants_1 = require(\"../../constants\");\nconst constants_2 = require(\"./constants\");\nconst queryStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders);\n    }\n    catch (error) {\n        console.error(error);\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryStopLimitOrders = queryStopLimitOrders;\nconst queryOpenStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for open orders\");\n    }\n});\nexports.queryOpenStopLimitOrders = queryOpenStopLimitOrders;\nconst queryStopLimitExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"executed\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for executed orders\");\n    }\n});\nexports.queryStopLimitExecutedOrders = queryStopLimitExecutedOrders;\nconst queryStopLimitCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"cancelled\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for cancelled orders\");\n    }\n});\nexports.queryStopLimitCancelledOrders = queryStopLimitCancelledOrders;\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status !== \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for past orders\");\n    }\n});\nexports.queryPastOrders = queryPastOrders;\nconst _getUniqueOrdersWithExpiry = (allOrders) => [...new Map(allOrders.map((order) => [order.id, order])).values()]\n    // sort by `updatedAt` asc so that the most recent one will be used\n    .sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt))\n    // add expiry to order obj\n    .map((order) => {\n    const isExpired = Date.now() >\n        (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n    return Object.assign(Object.assign({}, order), { isExpired });\n});\nexports._getUniqueOrdersWithExpiry = _getUniqueOrdersWithExpiry;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extract_files_1 = require(\"extract-files\");\nvar form_data_1 = __importDefault(require(\"form-data\"));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nvar isExtractableFileEnhanced = function (value) {\n    return extract_files_1.isExtractableFile(value) ||\n        (value !== null && typeof value === 'object' && typeof value.pipe === 'function');\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nfunction createRequestBody(query, variables, operationName) {\n    var _a = extract_files_1.extractFiles({ query: query, variables: variables, operationName: operationName }, '', isExtractableFileEnhanced), clone = _a.clone, files = _a.files;\n    if (files.size === 0) {\n        if (!Array.isArray(query)) {\n            return JSON.stringify(clone);\n        }\n        if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n            throw new Error('Cannot create request body with given variable type, array expected');\n        }\n        // Batch support\n        var payload = query.reduce(function (accu, currentQuery, index) {\n            accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined });\n            return accu;\n        }, []);\n        return JSON.stringify(payload);\n    }\n    var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n    var form = new Form();\n    form.append('operations', JSON.stringify(clone));\n    var map = {};\n    var i = 0;\n    files.forEach(function (paths) {\n        map[++i] = paths;\n    });\n    form.append('map', JSON.stringify(map));\n    i = 0;\n    files.forEach(function (paths, file) {\n        form.append(\"\" + ++i, file);\n    });\n    return form;\n}\nexports.default = createRequestBody;\n//# sourceMappingURL=createRequestBody.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gql = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\nvar cross_fetch_1 = __importStar(require(\"cross-fetch\")), CrossFetch = cross_fetch_1;\nvar printer_1 = require(\"graphql/language/printer\");\nvar createRequestBody_1 = __importDefault(require(\"./createRequestBody\"));\nvar types_1 = require(\"./types\");\nObject.defineProperty(exports, \"ClientError\", { enumerable: true, get: function () { return types_1.ClientError; } });\n/**\n * Convert the given headers configuration into a plain object.\n */\nvar resolveHeaders = function (headers) {\n    var oHeaders = {};\n    if (headers) {\n        if ((typeof Headers !== 'undefined' && headers instanceof Headers) ||\n            headers instanceof CrossFetch.Headers) {\n            oHeaders = HeadersInstanceToPlainObject(headers);\n        }\n        else if (Array.isArray(headers)) {\n            headers.forEach(function (_a) {\n                var name = _a[0], value = _a[1];\n                oHeaders[name] = value;\n            });\n        }\n        else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\nvar queryCleanner = function (str) { return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim(); };\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\nvar buildGetQueryParams = function (_a) {\n    var query = _a.query, variables = _a.variables, operationName = _a.operationName;\n    if (!Array.isArray(query)) {\n        var search = [\"query=\" + encodeURIComponent(queryCleanner(query))];\n        if (variables) {\n            search.push(\"variables=\" + encodeURIComponent(JSON.stringify(variables)));\n        }\n        if (operationName) {\n            search.push(\"operationName=\" + encodeURIComponent(operationName));\n        }\n        return search.join('&');\n    }\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n        throw new Error('Cannot create query with given variable type, array expected');\n    }\n    // Batch support\n    var payload = query.reduce(function (accu, currentQuery, index) {\n        accu.push({\n            query: queryCleanner(currentQuery),\n            variables: variables ? JSON.stringify(variables[index]) : undefined,\n        });\n        return accu;\n    }, []);\n    return \"query=\" + encodeURIComponent(JSON.stringify(payload));\n};\n/**\n * Fetch data using POST method\n */\nvar post = function (_a) {\n    var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch = _a.fetch, fetchOptions = _a.fetchOptions;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var body;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    body = createRequestBody_1.default(query, variables, operationName);\n                    return [4 /*yield*/, fetch(url, __assign({ method: 'POST', headers: __assign(__assign({}, (typeof body === 'string' ? { 'Content-Type': 'application/json' } : {})), headers), body: body }, fetchOptions))];\n                case 1: return [2 /*return*/, _b.sent()];\n            }\n        });\n    });\n};\n/**\n * Fetch data using GET method\n */\nvar get = function (_a) {\n    var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch = _a.fetch, fetchOptions = _a.fetchOptions;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var queryParams;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    queryParams = buildGetQueryParams({\n                        query: query,\n                        variables: variables,\n                        operationName: operationName,\n                    });\n                    return [4 /*yield*/, fetch(url + \"?\" + queryParams, __assign({ method: 'GET', headers: headers }, fetchOptions))];\n                case 1: return [2 /*return*/, _b.sent()];\n            }\n        });\n    });\n};\n/**\n * todo\n */\nvar GraphQLClient = /** @class */ (function () {\n    function GraphQLClient(url, options) {\n        this.url = url;\n        this.options = options || {};\n    }\n    GraphQLClient.prototype.rawRequest = function (query, variables, requestHeaders) {\n        var _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n        var url = this.url;\n        return makeRequest({\n            url: url,\n            query: query,\n            variables: variables,\n            headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n            operationName: undefined,\n            fetch: fetch,\n            method: method,\n            fetchOptions: fetchOptions,\n        });\n    };\n    /**\n     * Send a GraphQL document to the server.\n     */\n    GraphQLClient.prototype.request = function (document, variables, requestHeaders) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, headers, _b, fetch, _c, method, fetchOptions, url, _d, query, operationName, data;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n                        url = this.url;\n                        _d = resolveRequestDocument(document), query = _d.query, operationName = _d.operationName;\n                        return [4 /*yield*/, makeRequest({\n                                url: url,\n                                query: query,\n                                variables: variables,\n                                headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n                                operationName: operationName,\n                                fetch: fetch,\n                                method: method,\n                                fetchOptions: fetchOptions,\n                            })];\n                    case 1:\n                        data = (_e.sent()).data;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * Send a GraphQL document to the server.\n     */\n    GraphQLClient.prototype.batchRequests = function (documents, requestHeaders) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, headers, _b, fetch, _c, method, fetchOptions, url, queries, variables, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n                        url = this.url;\n                        queries = documents.map(function (_a) {\n                            var document = _a.document;\n                            return resolveRequestDocument(document).query;\n                        });\n                        variables = documents.map(function (_a) {\n                            var variables = _a.variables;\n                            return variables;\n                        });\n                        return [4 /*yield*/, makeRequest({\n                                url: url,\n                                query: queries,\n                                variables: variables,\n                                headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n                                operationName: undefined,\n                                fetch: fetch,\n                                method: method,\n                                fetchOptions: fetchOptions,\n                            })];\n                    case 1:\n                        data = (_d.sent()).data;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    GraphQLClient.prototype.setHeaders = function (headers) {\n        this.options.headers = headers;\n        return this;\n    };\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */\n    GraphQLClient.prototype.setHeader = function (key, value) {\n        var _a;\n        var headers = this.options.headers;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-ignore\n            headers[key] = value;\n        }\n        else {\n            this.options.headers = (_a = {}, _a[key] = value, _a);\n        }\n        return this;\n    };\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */\n    GraphQLClient.prototype.setEndpoint = function (value) {\n        this.url = value;\n        return this;\n    };\n    return GraphQLClient;\n}());\nexports.GraphQLClient = GraphQLClient;\nfunction makeRequest(_a) {\n    var url = _a.url, query = _a.query, variables = _a.variables, headers = _a.headers, operationName = _a.operationName, fetch = _a.fetch, _b = _a.method, method = _b === void 0 ? 'POST' : _b, fetchOptions = _a.fetchOptions;\n    return __awaiter(this, void 0, void 0, function () {\n        var fetcher, isBathchingQuery, response, result, successfullyReceivedData, headers_1, status_1, errorResult;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    fetcher = method.toUpperCase() === 'POST' ? post : get;\n                    isBathchingQuery = Array.isArray(query);\n                    return [4 /*yield*/, fetcher({\n                            url: url,\n                            query: query,\n                            variables: variables,\n                            operationName: operationName,\n                            headers: headers,\n                            fetch: fetch,\n                            fetchOptions: fetchOptions,\n                        })];\n                case 1:\n                    response = _c.sent();\n                    return [4 /*yield*/, getResult(response)];\n                case 2:\n                    result = _c.sent();\n                    successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {\n                        var data = _a.data;\n                        return !data;\n                    }) : !!result.data;\n                    if (response.ok && !result.errors && successfullyReceivedData) {\n                        headers_1 = response.headers, status_1 = response.status;\n                        return [2 /*return*/, __assign(__assign({}, (isBathchingQuery ? { data: result } : result)), { headers: headers_1, status: status_1 })];\n                    }\n                    else {\n                        errorResult = typeof result === 'string' ? { error: result } : result;\n                        throw new types_1.ClientError(__assign(__assign({}, errorResult), { status: response.status, headers: response.headers }), { query: query, variables: variables });\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\n/**\n * todo\n */\nfunction rawRequest(url, query, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n            client = new GraphQLClient(url);\n            return [2 /*return*/, client.rawRequest(query, variables, requestHeaders)];\n        });\n    });\n}\nexports.rawRequest = rawRequest;\n/**\n * Send a GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\nfunction request(url, document, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n            client = new GraphQLClient(url);\n            return [2 /*return*/, client.request(document, variables, requestHeaders)];\n        });\n    });\n}\nexports.request = request;\n/**\n * Send a batch of GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nfunction batchRequests(url, documents, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n            client = new GraphQLClient(url);\n            return [2 /*return*/, client.batchRequests(documents, requestHeaders)];\n        });\n    });\n}\nexports.batchRequests = batchRequests;\nexports.default = request;\n/**\n * todo\n */\nfunction getResult(response) {\n    var contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.startsWith('application/json')) {\n        return response.json();\n    }\n    else {\n        return response.text();\n    }\n}\n/**\n * helpers\n */\nfunction resolveRequestDocument(document) {\n    var _a;\n    if (typeof document === 'string')\n        return { query: document };\n    var operationName = undefined;\n    var operationDefinitions = document.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; });\n    if (operationDefinitions.length === 1) {\n        operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    return { query: printer_1.print(document), operationName: operationName };\n}\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nfunction gql(chunks) {\n    var variables = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        variables[_i - 1] = arguments[_i];\n    }\n    return chunks.reduce(function (accumulator, chunk, index) { return \"\" + accumulator + chunk + (index in variables ? variables[index] : ''); }, '');\n}\nexports.gql = gql;\n/**\n * Convert Headers instance into regular object\n */\nfunction HeadersInstanceToPlainObject(headers) {\n    var o = {};\n    headers.forEach(function (v, k) {\n        o[k] = v;\n    });\n    return o;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientError = void 0;\nvar ClientError = /** @class */ (function (_super) {\n    __extends(ClientError, _super);\n    function ClientError(response, request) {\n        var _this = this;\n        var message = ClientError.extractMessage(response) + \": \" + JSON.stringify({\n            response: response,\n            request: request,\n        });\n        _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, ClientError.prototype);\n        _this.response = response;\n        _this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(_this, ClientError);\n        }\n        return _this;\n    }\n    ClientError.extractMessage = function (response) {\n        try {\n            return response.errors[0].message;\n        }\n        catch (e) {\n            return \"GraphQL Error (Code: \" + response.status + \")\";\n        }\n    };\n    return ClientError;\n}(Error));\nexports.ClientError = ClientError;\n//# sourceMappingURL=types.js.map","import { concat } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nexport function hashMessage(message) {\n    if (typeof (message) === \"string\") {\n        message = toUtf8Bytes(message);\n    }\n    return keccak256(concat([\n        toUtf8Bytes(messagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n//# sourceMappingURL=message.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { computeHmac } from \"@ethersproject/sha2\";\nexport function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n    password = arrayify(password);\n    salt = arrayify(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen);\n    const block1 = new Uint8Array(salt.length + 4);\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n    let r;\n    let T;\n    for (let i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = (i >> 24) & 0xff;\n        block1[salt.length + 1] = (i >> 16) & 0xff;\n        block1[salt.length + 2] = (i >> 8) & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n        //let U = createHmac(password).update(block1).digest();\n        let U = arrayify(computeHmac(hashAlgorithm, password, block1));\n        if (!hLen) {\n            hLen = U.length;\n            T = new Uint8Array(hLen);\n            l = Math.ceil(keylen / hLen);\n            r = keylen - (l - 1) * hLen;\n        }\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n        for (let j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = arrayify(computeHmac(hashAlgorithm, password, U));\n            for (let k = 0; k < hLen; k++)\n                T[k] ^= U[k];\n        }\n        const destPos = (i - 1) * hLen;\n        const len = (i === l ? r : hLen);\n        //T.copy(DK, destPos, 0, len)\n        DK.set(arrayify(T).slice(0, len), destPos);\n    }\n    return hexlify(DK);\n}\n//# sourceMappingURL=pbkdf2.js.map","export const version = \"wordlists/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n    constructor(locale) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    split(mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n    join(words) {\n        return words.join(\" \");\n    }\n    static check(wordlist) {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n    static register(lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    }\n}\n//# sourceMappingURL=wordlist.js.map","\"use strict\";\nimport { Wordlist } from \"./wordlist\";\nconst words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\nlet wordlist = null;\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\nclass LangEn extends Wordlist {\n    constructor() {\n        super(\"en\");\n    }\n    getWord(index) {\n        loadWords(this);\n        return wordlist[index];\n    }\n    getWordIndex(word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    }\n}\nconst langEn = new LangEn();\nWordlist.register(langEn);\nexport { langEn };\n//# sourceMappingURL=lang-en.js.map","\"use strict\";\nimport { langEn as en } from \"./lang-en\";\nexport const wordlists = {\n    en: en\n};\n//# sourceMappingURL=wordlists.js.map","export const version = \"hdnode/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nconst HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits);\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n    return hexZeroPad(hexlify(value), 32);\n}\nfunction base58check(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n    if (typeof (wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n    return wordlist;\n}\nconst _constructorGuard = {};\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport class HDNode {\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n        logger.checkNew(new.target, HDNode);\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        }\n        else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        defineReadOnly(this, \"chainCode\", chainCode);\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n        }\n        else if (typeof (mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n        }\n        else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        if (this.depth >= 256) {\n            throw new Error(\"Depth too large!\");\n        }\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\" : \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([\"0x00\", this.privateKey]) : this.publicKey),\n        ]));\n    }\n    neuter() {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n    _derive(index) {\n        if (index > 0xffffffff) {\n            throw new Error(\"invalid index - \" + String(index));\n        }\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n        }\n        const data = new Uint8Array(37);\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n            // Hardened path\n            if (path) {\n                path += \"'\";\n            }\n        }\n        else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n        }\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n        // The private key\n        let ki = null;\n        // The public key\n        let Ki = null;\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        }\n        else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n        let mnemonicOrPath = path;\n        const srcMnemonic = this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n    derivePath(path) {\n        const components = path.split(\"/\");\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n        if (components[0] === \"m\") {\n            components.shift();\n        }\n        let result = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(HardenedBit + index);\n            }\n            else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(index);\n            }\n            else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n        return result;\n    }\n    static _fromSeed(seed, mnemonic) {\n        const seedArray = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n        }\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n    static fromMnemonic(mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n    static fromSeed(seed) {\n        return HDNode._fromSeed(seed, null);\n    }\n    static fromExtendedKey(extendedKey) {\n        const bytes = Base58.decode(extendedKey);\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\nexport function mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n        password = \"\";\n    }\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = getWordlist(wordlist);\n    logger.checkNormalize();\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) {\n        throw new Error(\"invalid mnemonic\");\n    }\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) {\n            throw new Error(\"invalid mnemonic\");\n        }\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n    wordlist = getWordlist(wordlist);\n    entropy = arrayify(entropy);\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n    const indices = [0];\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function getAccountPath(index) {\n    if (typeof (index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${index}'/0/0`;\n}\n//# sourceMappingURL=index.js.map","export const version = \"random/5.5.1\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n    logger.warn(\"WARNING: Missing strong random number source\");\n    crypto = {\n        getRandomValues: function (buffer) {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\nexport function randomBytes(length) {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n}\n;\n//# sourceMappingURL=random.js.map","export const version = \"json-wallets/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\nexport function looseArrayify(hexString) {\n    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\n        hexString = '0x' + hexString;\n    }\n    return arrayify(hexString);\n}\nexport function zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n        value = '0' + value;\n    }\n    return value;\n}\nexport function getPassword(password) {\n    if (typeof (password) === 'string') {\n        return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n    }\n    return arrayify(password);\n}\nexport function searchPath(object, path) {\n    let currentChild = object;\n    const comps = path.toLowerCase().split('/');\n    for (let i = 0; i < comps.length; i++) {\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n            if (key.toLowerCase() === comps[i]) {\n                matchingChild = currentChild[key];\n                break;\n            }\n        }\n        // Didn't find one. :'(\n        if (matchingChild === null) {\n            return null;\n        }\n        // Now check this child...\n        currentChild = matchingChild;\n    }\n    return currentChild;\n}\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nexport function uuidV4(randomBytes) {\n    const bytes = arrayify(randomBytes);\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    const value = hexlify(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34),\n    ].join(\"-\");\n}\n//# sourceMappingURL=utils.js.map","\"use strict\";\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport class CrowdsaleAccount extends Description {\n    isCrowdsaleAccount(value) {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json, password) {\n    const data = JSON.parse(json);\n    password = getPassword(password);\n    // Ethereum Address\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n    // Encrypted Seed\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n    const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    const seedHexBytes = toUtf8Bytes(seedHex);\n    const privateKey = keccak256(seedHexBytes);\n    return new CrowdsaleAccount({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\n//# sourceMappingURL=crowdsale.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    return (data.encseed && data.ethaddr);\n}\nexport function isKeystoreWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nexport function getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).ethaddr);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    if (isKeystoreWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).address);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=inspect.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Exported Types\nfunction hasMnemonic(value) {\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\n}\nexport class KeystoreAccount extends Description {\n    isKeystoreAccount(value) {\n        return !!(value && value._isKeystoreAccount);\n    }\n}\nfunction _decrypt(data, key, ciphertext) {\n    const cipher = searchPath(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n        return arrayify(aesCtr.decrypt(ciphertext));\n    }\n    return null;\n}\nfunction _getAccount(data, key) {\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n    if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n    const mnemonicKey = key.slice(32, 64);\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") {\n            check = \"0x\" + check;\n        }\n        if (getAddress(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n    const account = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: hexlify(privateKey)\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n        const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n        const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n        const mnemonicCounter = new aes.Counter(mnemonicIv);\n        const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n        const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n        const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n        const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n        try {\n            const mnemonic = entropyToMnemonic(entropy, locale);\n            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n            account.mnemonic = node.mnemonic;\n        }\n        catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n    return new KeystoreAccount(account);\n}\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n    return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n    const passwordBytes = getPassword(password);\n    const kdf = searchPath(data, \"crypto/kdf\");\n    if (kdf && typeof (kdf) === \"string\") {\n        const throwError = function (name, value) {\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        };\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n            const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n            const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n            // Check for all required parameters\n            if (!N || !r || !p) {\n                throwError(\"kdf\", kdf);\n            }\n            // Make sure N is a power of 2\n            if ((N & (N - 1)) !== 0) {\n                throwError(\"N\", N);\n            }\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n        }\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            let prfFunc = null;\n            const prf = searchPath(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            }\n            else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            }\n            else {\n                throwError(\"prf\", prf);\n            }\n            const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\nexport function decryptSync(json, password) {\n    const data = JSON.parse(json);\n    const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n    return _getAccount(data, key);\n}\nexport function decrypt(json, password, progressCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = JSON.parse(json);\n        const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n        return _getAccount(data, key);\n    });\n}\nexport function encrypt(account, password, options, progressCallback) {\n    try {\n        // Check the address matches the private key\n        if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            const mnemonic = account.mnemonic;\n            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n    // The options are optional, so adjust the call as needed\n    if (typeof (options) === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) {\n        options = {};\n    }\n    const privateKey = arrayify(account.privateKey);\n    const passwordBytes = getPassword(password);\n    let entropy = null;\n    let path = null;\n    let locale = null;\n    if (hasMnemonic(account)) {\n        const srcMnemonic = account.mnemonic;\n        entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n    let client = options.client;\n    if (!client) {\n        client = \"ethers.js\";\n    }\n    // Check/generate the salt\n    let salt = null;\n    if (options.salt) {\n        salt = arrayify(options.salt);\n    }\n    else {\n        salt = randomBytes(32);\n        ;\n    }\n    // Override initialization vector\n    let iv = null;\n    if (options.iv) {\n        iv = arrayify(options.iv);\n        if (iv.length !== 16) {\n            throw new Error(\"invalid iv\");\n        }\n    }\n    else {\n        iv = randomBytes(16);\n    }\n    // Override the uuid\n    let uuidRandom = null;\n    if (options.uuid) {\n        uuidRandom = arrayify(options.uuid);\n        if (uuidRandom.length !== 16) {\n            throw new Error(\"invalid uuid\");\n        }\n    }\n    else {\n        uuidRandom = randomBytes(16);\n    }\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {\n        key = arrayify(key);\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        const derivedKey = key.slice(0, 16);\n        const macPrefix = key.slice(16, 32);\n        // This will be used to encrypt the mnemonic phrase (if any)\n        const mnemonicKey = key.slice(32, 64);\n        // Encrypt the private key\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n        const ciphertext = arrayify(aesCtr.encrypt(privateKey));\n        // Compute the message authentication code, used to check the password\n        const mac = keccak256(concat([macPrefix, ciphertext]));\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        const data = {\n            address: account.address.substring(2).toLowerCase(),\n            id: uuidV4(uuidRandom),\n            version: 3,\n            Crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: hexlify(iv).substring(2),\n                },\n                ciphertext: hexlify(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: hexlify(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            const mnemonicIv = randomBytes(16);\n            const mnemonicCounter = new aes.Counter(mnemonicIv);\n            const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n            const now = new Date();\n            const timestamp = (now.getUTCFullYear() + \"-\" +\n                zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                zpad(now.getUTCDate(), 2) + \"T\" +\n                zpad(now.getUTCHours(), 2) + \"-\" +\n                zpad(now.getUTCMinutes(), 2) + \"-\" +\n                zpad(now.getUTCSeconds(), 2) + \".0Z\");\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n                mnemonicCounter: hexlify(mnemonicIv).substring(2),\n                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n        return JSON.stringify(data);\n    });\n}\n//# sourceMappingURL=keystore.js.map","\"use strict\";\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\nfunction decryptJsonWallet(json, password, progressCallback) {\n    if (isCrowdsaleWallet(json)) {\n        if (progressCallback) {\n            progressCallback(0);\n        }\n        const account = decryptCrowdsale(json, password);\n        if (progressCallback) {\n            progressCallback(1);\n        }\n        return Promise.resolve(account);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystore(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nfunction decryptJsonWalletSync(json, password) {\n    if (isCrowdsaleWallet(json)) {\n        return decryptCrowdsale(json, password);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystoreSync(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n}\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync, };\n//# sourceMappingURL=index.js.map","export const version = \"wallet/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\nfunction hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nexport class Wallet extends Signer {\n    constructor(privateKey, provider) {\n        logger.checkNew(new.target, Wallet);\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => ({\n                    phrase: srcMnemonic.phrase,\n                    path: srcMnemonic.path || defaultPath,\n                    locale: srcMnemonic.locale || \"en\"\n                }));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                defineReadOnly(this, \"_mnemonic\", () => null);\n            }\n        }\n        else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => privateKey);\n            }\n            else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof (privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n            defineReadOnly(this, \"_mnemonic\", () => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    get mnemonic() { return this._mnemonic(); }\n    get privateKey() { return this._signingKey().privateKey; }\n    get publicKey() { return this._signingKey().publicKey; }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n            return serialize(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                if (this.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"resolveName\",\n                        value: name\n                    });\n                }\n                return this.provider.resolveName(name);\n            });\n            return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n        });\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options) {\n        let entropy = randomBytes(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n        }\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\nexport function verifyMessage(message, signature) {\n    return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=index.js.map","// NFKC (composed)             // (decomposed)\nexport const EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\n//# sourceMappingURL=strings.js.map","\"use strict\";\nexport { AddressZero } from \"./addresses\";\nexport { NegativeOne, Zero, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256 } from \"./bignumbers\";\nexport { HashZero } from \"./hashes\";\nexport { EtherSymbol } from \"./strings\";\n//# sourceMappingURL=index.js.map","export const version = \"providers/5.5.3\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: address,\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result) {\n    try {\n        return toUtf8String(_parseBytes(result));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            try {\n                return _parseBytes(yield this.provider.call(tx));\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                return null;\n            }\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const transaction = {\n                        to: this.address,\n                        data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                    };\n                    const hexBytes = yield this.provider.call(transaction);\n                    // No address\n                    if (hexBytes === \"0x\" || hexBytes === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(hexBytes);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx));\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        logger.checkNew(new.target, Provider);\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        const filter = event.filter;\n                        filter.fromBlock = this._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        const runner = this.getLogs(filter).then((logs) => {\n                            if (logs.length === 0) {\n                                return;\n                            }\n                            logs.forEach((log) => {\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                this.emit(filter, log);\n                            });\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"call\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const address = yield this._getResolver(name);\n                if (address == null) {\n                    return null;\n                }\n                return new Resolver(this, address, name);\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get the resolver from the blockchain\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: network.name });\n            }\n            // keccak256(\"resolver(bytes32)\")\n            const transaction = {\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            };\n            try {\n                return this.formatter.callAddress(yield this.call(transaction));\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resovler\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddress = yield this._getResolver(reverseName);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            let bytes = arrayify(yield this.call({\n                to: resolverAddress,\n                data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n            }));\n            // Strip off the dynamic string pointer (0x20)\n            if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n                return null;\n            }\n            bytes = bytes.slice(32);\n            // Not a length-prefixed string\n            if (bytes.length < 32) {\n                return null;\n            }\n            // Get the length of the string (from the length-prefix)\n            const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n            bytes = bytes.slice(32);\n            // Length longer than available data\n            if (length > bytes.length) {\n                return null;\n            }\n            const name = toUtf8String(bytes.slice(0, length));\n            // Make sure the reverse record matches the foward record\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(reverseName);\n                if (!resolverAddress) {\n                    return null;\n                }\n                resolver = new Resolver(this, resolverAddress, \"_\", address);\n            }\n            else {\n                // ENS name; forward lookup\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction checkError(method, error, params) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n        logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    const transaction = params.transaction || params.signedTransaction;\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        logger.checkNew(new.target, JsonRpcSigner);\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                if (to == null) {\n                    return null;\n                }\n                const address = yield this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            }));\n        }\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n                    const tx = yield this.provider.getTransaction(hash);\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\n                }), { oncePoll: this.provider });\n            }\n            catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n        });\n    }\n    _legacySignMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            return yield this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        logger.checkNew(new.target, JsonRpcProvider);\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n        this._nextId = 42;\n    }\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(BigNumber.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-a559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = shallowCopy(params);\n                            params.transaction = shallowCopy(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(transaction[key]);\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = accessListify(transaction.accessList);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=json-rpc-provider.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nlet WS = null;\ntry {\n    WS = WebSocket;\n    if (WS == null) {\n        throw new Error(\"inject please\");\n    }\n}\ncatch (error) {\n    const logger = new Logger(version);\n    WS = function () {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    };\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n//# sourceMappingURL=ws.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport class WebSocketProvider extends JsonRpcProvider {\n    constructor(url, network) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        super(url, network);\n        this._pollingInterval = -1;\n        this._wsReady = false;\n        defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        defineReadOnly(this, \"_requests\", {});\n        defineReadOnly(this, \"_subs\", {});\n        defineReadOnly(this, \"_subIds\", {});\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n        this._websocket.onmessage = (messageEvent) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n                }\n                else {\n                    let error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(error, \"code\", result.error.code || null);\n                        defineReadOnly(error, \"response\", data);\n                    }\n                    else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n                }\n            }\n            else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            }\n            else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n    }\n    detectNetwork() {\n        return this._detectNetwork;\n    }\n    get pollingInterval() {\n        return 0;\n    }\n    resetEventsBlock(blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n    set pollingInterval(value) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return null;\n        });\n    }\n    set polling(value) {\n        if (!value) {\n            return;\n        }\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n    send(method, params) {\n        const rid = NextId++;\n        return new Promise((resolve, reject) => {\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n            this._requests[String(rid)] = { callback, payload };\n            if (this._wsReady) {\n                this._websocket.send(payload);\n            }\n        });\n    }\n    static defaultUrl() {\n        return \"ws:/\\/localhost:8546\";\n    }\n    _subscribe(tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param) => {\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = { tag, processFunc };\n        });\n    }\n    _startEvent(event) {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [\"newHeads\"], (result) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\"newPendingTransactions\"], (result) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], (result) => {\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\": {\n                const emitReceipt = (event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) {\n                            return;\n                        }\n                        this.emit(hash, receipt);\n                    });\n                };\n                // In case it is already mined\n                emitReceipt(event);\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [\"newHeads\"], (result) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n    _stopEvent(event) {\n        let tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        }\n        else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then((subId) => {\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [subId]);\n        });\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Wait until we have connected before trying to disconnect\n            if (this._websocket.readyState === WebSocket.CONNECTING) {\n                yield (new Promise((resolve) => {\n                    this._websocket.onopen = function () {\n                        resolve(true);\n                    };\n                    this._websocket.onerror = function () {\n                        resolve(false);\n                    };\n                }));\n            }\n            // Hangup\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n            this._websocket.close(1000);\n        });\n    }\n}\n//# sourceMappingURL=websocket-provider.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: { get: () => super.detectNetwork }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // If still not set, set it\n                if (this._network == null) {\n                    // A static network does not support \"any\"\n                    defineReadOnly(this, \"_network\", network);\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return network;\n        });\n    }\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n    constructor(network, apiKey) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n        // Normalize the Network and API Key\n        network = getStatic(new.target, \"getNetwork\")(network);\n        apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n        const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n        super(connection, network);\n        if (typeof (apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        }\n        else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly(this, key, apiKey[key]);\n            });\n        }\n    }\n    _startPending() {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n    isCommunityResource() {\n        return false;\n    }\n    getSigner(address) {\n        return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n    }\n    listAccounts() {\n        return Promise.resolve([]);\n    }\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey) {\n        return apiKey;\n    }\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network, apiKey) {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n//# sourceMappingURL=url-json-rpc-provider.js.map","\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new AlchemyProvider(network, apiKey);\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-kovan\":\n                host = \"opt-kovan.g.alchemy.com/v2/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=alchemy-provider.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return host;\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            // The Cloudflare provider does not support eth_blockNumber,\n            // so we get the latest block and pull it from that\n            if (method === \"getBlockNumber\") {\n                const block = yield _super.perform.call(this, \"getBlock\", { blockTag: \"latest\" });\n                return block.number;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n}\n//# sourceMappingURL=cloudflare-provider.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n    const result = {};\n    for (let key in transaction) {\n        if (transaction[key] == null) {\n            continue;\n        }\n        let value = transaction[key];\n        if (key === \"type\" && value === 0) {\n            continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n            value = hexValue(hexlify(value));\n        }\n        else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n            }).join(\",\") + \"]\";\n        }\n        else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\nfunction getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || result.message != \"OK\") {\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        const error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\nfunction checkError(method, error, transaction) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) {\n                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n            }\n            if (isHexString(data)) {\n                return data;\n            }\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof (error.error.message) === \"string\") {\n            message = error.error.message;\n        }\n        else if (typeof (error.body) === \"string\") {\n            message = error.body;\n        }\n        else if (typeof (error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n    constructor(network, apiKey) {\n        logger.checkNew(new.target, EtherscanProvider);\n        super(network);\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n    getBaseUrl() {\n        switch (this.network ? this.network.name : \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n    getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${key}=${value}`;\n            }\n            return accum;\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : \"\");\n        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n    }\n    getPostUrl() {\n        return `${this.baseUrl}/api`;\n    }\n    getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    fetch(module, params, post) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = (post ? this.getPostUrl() : this.getUrl(module, params));\n            const payload = (post ? this.getPostData(module, params) : null);\n            const procFunc = (module === \"proxy\") ? getJsonResult : getResult;\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt, url) => {\n                    if (this.isCommunityResource()) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n            let payloadStr = null;\n            if (payload) {\n                connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n                payloadStr = Object.keys(payload).map((key) => {\n                    return `${key}=${payload[key]}`;\n                }).join(\"&\");\n            }\n            const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: deepCopy(result),\n                provider: this\n            });\n            return result;\n        });\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.network;\n        });\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (method) {\n                case \"getBlockNumber\":\n                    return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n                case \"getGasPrice\":\n                    return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n                case \"getBalance\":\n                    // Returns base-10 result\n                    return this.fetch(\"account\", {\n                        action: \"balance\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getTransactionCount\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionCount\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getCode\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getCode\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getStorageAt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getStorageAt\",\n                        address: params.address,\n                        position: params.position,\n                        tag: params.blockTag\n                    });\n                case \"sendTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_sendRawTransaction\",\n                        hex: params.signedTransaction\n                    }, true).catch((error) => {\n                        return checkError(\"sendTransaction\", error, params.signedTransaction);\n                    });\n                case \"getBlock\":\n                    if (params.blockTag) {\n                        return this.fetch(\"proxy\", {\n                            action: \"eth_getBlockByNumber\",\n                            tag: params.blockTag,\n                            boolean: (params.includeTransactions ? \"true\" : \"false\")\n                        });\n                    }\n                    throw new Error(\"getBlock by blockHash not implemented\");\n                case \"getTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionByHash\",\n                        txhash: params.transactionHash\n                    });\n                case \"getTransactionReceipt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionReceipt\",\n                        txhash: params.transactionHash\n                    });\n                case \"call\": {\n                    if (params.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_call\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"call\", error, params.transaction);\n                    }\n                }\n                case \"estimateGas\": {\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_estimateGas\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"estimateGas\", error, params.transaction);\n                    }\n                }\n                case \"getLogs\": {\n                    const args = { action: \"getLogs\" };\n                    if (params.filter.fromBlock) {\n                        args.fromBlock = checkLogTag(params.filter.fromBlock);\n                    }\n                    if (params.filter.toBlock) {\n                        args.toBlock = checkLogTag(params.filter.toBlock);\n                    }\n                    if (params.filter.address) {\n                        args.address = params.filter.address;\n                    }\n                    // @TODO: We can handle slightly more complicated logs using the logs API\n                    if (params.filter.topics && params.filter.topics.length > 0) {\n                        if (params.filter.topics.length > 1) {\n                            logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                        }\n                        if (params.filter.topics.length === 1) {\n                            const topic0 = params.filter.topics[0];\n                            if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n                                logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                            }\n                            args.topic0 = topic0;\n                        }\n                    }\n                    const logs = yield this.fetch(\"logs\", args);\n                    // Cache txHash => blockHash\n                    let blocks = {};\n                    // Add any missing blockHash to the logs\n                    for (let i = 0; i < logs.length; i++) {\n                        const log = logs[i];\n                        if (log.blockHash != null) {\n                            continue;\n                        }\n                        if (blocks[log.blockNumber] == null) {\n                            const block = yield this.getBlock(log.blockNumber);\n                            if (block) {\n                                blocks[log.blockNumber] = block.hash;\n                            }\n                        }\n                        log.blockHash = blocks[log.blockNumber];\n                    }\n                    return logs;\n                }\n                case \"getEtherPrice\":\n                    if (this.network.name !== \"homestead\") {\n                        return 0.0;\n                    }\n                    return parseFloat((yield this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n                default:\n                    break;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    getHistory(addressOrName, startBlock, endBlock) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                action: \"txlist\",\n                address: (yield this.resolveName(addressOrName)),\n                startblock: ((startBlock == null) ? 0 : startBlock),\n                endblock: ((endBlock == null) ? 99999999 : endBlock),\n                sort: \"asc\"\n            };\n            const result = yield this.fetch(\"account\", params);\n            return result.map((tx) => {\n                [\"contractAddress\", \"to\"].forEach(function (key) {\n                    if (tx[key] == \"\") {\n                        delete tx[key];\n                    }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                    tx.creates = tx.contractAddress;\n                }\n                const item = this.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                    item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n            });\n        });\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=etherscan-provider.js.map","\"use strict\";\nexport function shuffled(array) {\n    array = array.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n    return array;\n}\n//# sourceMappingURL=shuffle.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction now() { return (new Date()).getTime(); }\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n    let result = null;\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n        // Null! We do not know our network; bail.\n        if (network == null) {\n            return null;\n        }\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n            }\n        }\n        else {\n            result = network;\n        }\n    }\n    return result;\n}\nfunction median(values, maxDelta) {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n    return (a + b) / 2;\n}\nfunction serialize(value) {\n    if (value === null) {\n        return \"null\";\n    }\n    else if (typeof (value) === \"number\" || typeof (value) === \"boolean\") {\n        return JSON.stringify(value);\n    }\n    else if (typeof (value) === \"string\") {\n        return value;\n    }\n    else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    }\n    else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    }\n    else if (typeof (value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof (v) === \"function\") {\n                v = \"[function]\";\n            }\n            else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n    throw new Error(\"unknown value type: \" + typeof (value));\n}\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n;\nfunction stall(duration) {\n    let cancel = null;\n    let timer = null;\n    let promise = (new Promise((resolve) => {\n        cancel = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        };\n        timer = setTimeout(cancel, duration);\n    }));\n    const wait = (func) => {\n        promise = promise.then(func);\n        return promise;\n    };\n    function getPromise() {\n        return promise;\n    }\n    return { cancel, getPromise, wait };\n}\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n;\nfunction exposeDebugConfig(config, now) {\n    const result = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) {\n        result.start = config.start;\n    }\n    if (now) {\n        result.duration = (now - config.start);\n    }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        }\n        else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\nfunction normalizedTally(normalize, quorum) {\n    return function (configs) {\n        // Count the votes for each result\n        const tally = {};\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) {\n                tally[value] = { count: 0, result: c.result };\n            }\n            tally[value].count++;\n        });\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n        // No quroum\n        return undefined;\n    };\n}\nfunction getProcessFunc(provider, method, params) {\n    let normalize = serialize;\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) {\n                    return undefined;\n                }\n                blockNumber = Math.ceil(blockNumber);\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) {\n                    blockNumber++;\n                }\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n                return provider._highestBlockNumber;\n            };\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            };\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function (configs) {\n                return median(configs.map((c) => c.result));\n            };\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function (tx) {\n                if (tx == null) {\n                    return null;\n                }\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            };\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            }\n            else {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    return serialize(block);\n                };\n            }\n            break;\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const provider = (config.provider);\n        if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n            return provider;\n        }\n        return poll(() => {\n            return new Promise((resolve, reject) => {\n                setTimeout(function () {\n                    // We are synced\n                    if (provider.blockNumber >= blockNumber) {\n                        return resolve(provider);\n                    }\n                    // We're done; just quit\n                    if (config.cancelled) {\n                        return resolve(null);\n                    }\n                    // Try again, next block\n                    return resolve(undefined);\n                }, 0);\n            });\n        }, { oncePoll: provider });\n    });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let provider = config.provider;\n        switch (method) {\n            case \"getBlockNumber\":\n            case \"getGasPrice\":\n                return provider[method]();\n            case \"getEtherPrice\":\n                if (provider.getEtherPrice) {\n                    return provider.getEtherPrice();\n                }\n                break;\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.address, params.blockTag || \"latest\");\n            case \"getStorageAt\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n            case \"getBlock\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[(params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\")](params.blockTag || params.blockHash);\n            case \"call\":\n            case \"estimateGas\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.transaction);\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n                return provider[method](params.transactionHash);\n            case \"getLogs\": {\n                let filter = params.filter;\n                if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getLogs(filter);\n            }\n        }\n        return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n            method: method,\n            params: params\n        });\n    });\n}\nexport class FallbackProvider extends BaseProvider {\n    constructor(providers, quorum) {\n        logger.checkNew(new.target, FallbackProvider);\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n        const providerConfigs = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n            const config = shallowCopy(configOrProvider);\n            if (config.priority == null) {\n                config.priority = 1;\n            }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n            }\n            if (config.weight == null) {\n                config.weight = 1;\n            }\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n            }\n            return Object.freeze(config);\n        });\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n        if (quorum == null) {\n            quorum = total / 2;\n        }\n        else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n        // Are all providers' networks are known\n        let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n        this._highestBlockNumber = -1;\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n            return checkNetworks(networks);\n        });\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Sending transactions is special; always broadcast it to all backends\n            if (method === \"sendTransaction\") {\n                const results = yield Promise.all(this.providerConfigs.map((c) => {\n                    return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                        return result.hash;\n                    }, (error) => {\n                        return error;\n                    });\n                }));\n                // Any success is good enough (other errors are likely \"already seen\" errors\n                for (let i = 0; i < results.length; i++) {\n                    const result = results[i];\n                    if (typeof (result) === \"string\") {\n                        return result;\n                    }\n                }\n                // They were all an error; pick the first error\n                throw results[0];\n            }\n            // We need to make sure we are in sync with our backends, so we need\n            // to know this before we can make a lot of calls\n            if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n                yield this.getBlockNumber();\n            }\n            const processFunc = getProcessFunc(this, method, params);\n            // Shuffle the providers and then sort them by their priority; we\n            // shallowCopy them since we will store the result in them too\n            const configs = shuffled(this.providerConfigs.map(shallowCopy));\n            configs.sort((a, b) => (a.priority - b.priority));\n            const currentBlockNumber = this._highestBlockNumber;\n            let i = 0;\n            let first = true;\n            while (true) {\n                const t0 = now();\n                // Compute the inflight weight (exclude anything past)\n                let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                    .reduce((accum, c) => (accum + c.weight), 0);\n                // Start running enough to meet quorum\n                while (inflightWeight < this.quorum && i < configs.length) {\n                    const config = configs[i++];\n                    const rid = nextRid++;\n                    config.start = now();\n                    config.staller = stall(config.stallTimeout);\n                    config.staller.wait(() => { config.staller = null; });\n                    config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                        config.done = true;\n                        config.result = result;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: deepCopy(params) },\n                                provider: this\n                            });\n                        }\n                    }, (error) => {\n                        config.done = true;\n                        config.error = error;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: deepCopy(params) },\n                                provider: this\n                            });\n                        }\n                    });\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, null),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                    inflightWeight += config.weight;\n                }\n                // Wait for anything meaningful to finish or stall out\n                const waiting = [];\n                configs.forEach((c) => {\n                    if (c.done || !c.runner) {\n                        return;\n                    }\n                    waiting.push(c.runner);\n                    if (c.staller) {\n                        waiting.push(c.staller.getPromise());\n                    }\n                });\n                if (waiting.length) {\n                    yield Promise.race(waiting);\n                }\n                // Check the quorum and process the results; the process function\n                // may additionally decide the quorum is not met\n                const results = configs.filter((c) => (c.done && c.error == null));\n                if (results.length >= this.quorum) {\n                    const result = processFunc(results);\n                    if (result !== undefined) {\n                        // Shut down any stallers\n                        configs.forEach(c => {\n                            if (c.staller) {\n                                c.staller.cancel();\n                            }\n                            c.cancelled = true;\n                        });\n                        return result;\n                    }\n                    if (!first) {\n                        yield stall(100).getPromise();\n                    }\n                    first = false;\n                }\n                // No result, check for errors that should be forwarded\n                const errors = configs.reduce((accum, c) => {\n                    if (!c.done || c.error == null) {\n                        return accum;\n                    }\n                    const code = (c.error).code;\n                    if (ForwardErrors.indexOf(code) >= 0) {\n                        if (!accum[code]) {\n                            accum[code] = { error: c.error, weight: 0 };\n                        }\n                        accum[code].weight += c.weight;\n                    }\n                    return accum;\n                }, ({}));\n                Object.keys(errors).forEach((errorCode) => {\n                    const tally = errors[errorCode];\n                    if (tally.weight < this.quorum) {\n                        return;\n                    }\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) {\n                            c.staller.cancel();\n                        }\n                        c.cancelled = true;\n                    });\n                    const e = (tally.error);\n                    const props = {};\n                    ForwardProperties.forEach((name) => {\n                        if (e[name] == null) {\n                            return;\n                        }\n                        props[name] = e[name];\n                    });\n                    logger.throwError(e.reason || e.message, errorCode, props);\n                });\n                // All configs have run to completion; we will never get more data\n                if (configs.filter((c) => !c.done).length === 0) {\n                    break;\n                }\n            }\n            // Shut down any stallers; shouldn't be any\n            configs.forEach(c => {\n                if (c.staller) {\n                    c.staller.cancel();\n                }\n                c.cancelled = true;\n            });\n            return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n                method: method,\n                params: params,\n                //results: configs.map((c) => c.result),\n                //errors: configs.map((c) => c.error),\n                results: configs.map((c) => exposeDebugConfig(c)),\n                provider: this\n            });\n        });\n    }\n}\n//# sourceMappingURL=fallback-provider.js.map","\"use strict\";\nconst IpcProvider = null;\nexport { IpcProvider };\n//# sourceMappingURL=ipc-provider.js.map","\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n//# sourceMappingURL=infura-provider.js.map","import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=json-rpc-batch-provider.js.map","/* istanbul ignore file */\n\"use strict\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n    static getUrl(network, apiKey) {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n//# sourceMappingURL=nodesmith-provider.js.map","\"use strict\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based application IDs\nconst defaultApplicationIds = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n    constructor(network, apiKey) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n        if (apiKey == null) {\n            const n = getStatic(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n        }\n        super(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        }\n        else {\n            url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n        }\n        const connection = { url };\n        // Initialize empty headers\n        connection.headers = {};\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map","\"use strict\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nlet _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n    const fetcher = \"Web3LegacyFetcher\";\n    return function (method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n            sendFunc(request, (error, response) => {\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n                    return reject(error);\n                }\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    error.code = response.error.code;\n                    error.data = response.error.data;\n                    return reject(error);\n                }\n                resolve(response.result);\n            });\n        });\n    };\n}\nfunction buildEip1193Fetcher(provider) {\n    return function (method, params) {\n        if (params == null) {\n            params = [];\n        }\n        const request = { method, params };\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n            return response;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n            throw error;\n        });\n    };\n}\nexport class Web3Provider extends JsonRpcProvider {\n    constructor(provider, network) {\n        logger.checkNew(new.target, Web3Provider);\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n        let path = null;\n        let jsonRpcFetchFunc = null;\n        let subprovider = null;\n        if (typeof (provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n        }\n        else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n            subprovider = provider;\n            if (provider.request) {\n                if (path === \"\") {\n                    path = \"eip-1193:\";\n                }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            }\n            else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            }\n            else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            }\n            else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n            if (!path) {\n                path = \"unknown:\";\n            }\n        }\n        super(path, network);\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n    send(method, params) {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n//# sourceMappingURL=web3-provider.js.map","\"use strict\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof (network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider,\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n        IpcProvider,\n    }, options);\n}\n////////////////////////\n// Exports\nexport { \n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, \n///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, \n///////////////////////\n// Signer\nJsonRpcSigner, \n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, \n///////////////////////\n// Objects\nFormatter };\n//# sourceMappingURL=index.js.map","\"use strict\";\nexport { decode, encode } from \"./base64\";\n//# sourceMappingURL=index.js.map","export const version = \"solidity/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = BigNumber.from(value).toTwos(size);\n        return zeroPad(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n        }\n        if (isArray) {\n            return arrayify((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n        }\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n    return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n    return hashSha256(pack(types, values));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\n////////////////////////\n// Enums\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\n////////////////////////\n// Exports\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, \n////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };\n//# sourceMappingURL=utils.js.map","export const version = \"ethers/5.5.4\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { BaseContract, Contract, ContractFactory } from \"@ethersproject/contracts\";\nimport { BigNumber, FixedNumber } from \"@ethersproject/bignumber\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { Wallet } from \"@ethersproject/wallet\";\nimport * as constants from \"@ethersproject/constants\";\nimport * as providers from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport { Wordlist, wordlists } from \"@ethersproject/wordlists\";\nimport * as utils from \"./utils\";\nimport { ErrorCode as errors, Logger } from \"@ethersproject/logger\";\n////////////////////////\n// Compile-Time Constants\n// This is generated by \"npm run dist\"\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Exports\nexport { Signer, Wallet, VoidSigner, getDefaultProvider, providers, BaseContract, Contract, ContractFactory, BigNumber, FixedNumber, constants, errors, logger, utils, wordlists, \n////////////////////////\n// Compile-Time Constants\nversion, Wordlist };\n//# sourceMappingURL=ethers.js.map","\"use strict\";\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\nimport * as ethers from \"./ethers\";\ntry {\n    const anyGlobal = window;\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers;\n    }\n}\ncatch (error) { }\nexport { ethers };\nexport { Signer, Wallet, VoidSigner, getDefaultProvider, providers, BaseContract, Contract, ContractFactory, BigNumber, FixedNumber, constants, errors, logger, utils, wordlists, \n////////////////////////\n// Compile-Time Constants\nversion, Wordlist } from \"./ethers\";\n//# sourceMappingURL=index.js.map","\"use strict\";\n\n(function(root) {\n    const MAX_VALUE = 0x7fffffff;\n\n    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n    // See: https://github.com/dchest/scrypt-async-js\n    function SHA256(m) {\n        const K = new Uint32Array([\n           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n       ]);\n\n        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;\n        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;\n        const w = new Uint32Array(64);\n\n        function blocks(p) {\n            let off = 0, len = p.length;\n            while (len >= 64) {\n                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;\n\n                for (i = 0; i < 16; i++) {\n                    j = off + i*4;\n                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |\n                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);\n                }\n\n                for (i = 16; i < 64; i++) {\n                    u = w[i-2];\n                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);\n\n                    u = w[i-15];\n                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);\n\n                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;\n                }\n\n                for (i = 0; i < 64; i++) {\n                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^\n                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +\n                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^\n                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n                    h = g;\n                    g = f;\n                    f = e;\n                    e = (d + t1) | 0;\n                    d = c;\n                    c = b;\n                    b = a;\n                    a = (t1 + t2) | 0;\n                }\n\n                h0 = (h0 + a) | 0;\n                h1 = (h1 + b) | 0;\n                h2 = (h2 + c) | 0;\n                h3 = (h3 + d) | 0;\n                h4 = (h4 + e) | 0;\n                h5 = (h5 + f) | 0;\n                h6 = (h6 + g) | 0;\n                h7 = (h7 + h) | 0;\n\n                off += 64;\n                len -= 64;\n            }\n        }\n\n        blocks(m);\n\n        let i, bytesLeft = m.length % 64,\n        bitLenHi = (m.length / 0x20000000) | 0,\n        bitLenLo = m.length << 3,\n        numZeros = (bytesLeft < 56) ? 56 : 120,\n        p = m.slice(m.length - bytesLeft, m.length);\n\n        p.push(0x80);\n        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }\n        p.push((bitLenHi >>> 24) & 0xff);\n        p.push((bitLenHi >>> 16) & 0xff);\n        p.push((bitLenHi >>> 8)  & 0xff);\n        p.push((bitLenHi >>> 0)  & 0xff);\n        p.push((bitLenLo >>> 24) & 0xff);\n        p.push((bitLenLo >>> 16) & 0xff);\n        p.push((bitLenLo >>> 8)  & 0xff);\n        p.push((bitLenLo >>> 0)  & 0xff);\n\n        blocks(p);\n\n        return [\n            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,\n            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,\n            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,\n            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,\n            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,\n            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,\n            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,\n            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff\n        ];\n    }\n\n    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n        // compress password if it's longer than hash block length\n        password = (password.length <= 64) ? password : SHA256(password);\n\n        const innerLen = 64 + salt.length + 4;\n        const inner = new Array(innerLen);\n        const outerKey = new Array(64);\n\n        let i;\n        let dk = [];\n\n        // inner = (password ^ ipad) || salt || counter\n        for (i = 0; i < 64; i++) { inner[i] = 0x36; }\n        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }\n        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }\n        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }\n\n        // outerKey = password ^ opad\n        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];\n\n        // increments counter inside inner\n        function incrementCounter() {\n            for (let i = innerLen - 1; i >= innerLen - 4; i--) {\n                inner[i]++;\n                if (inner[i] <= 0xff) return;\n                inner[i] = 0;\n            }\n        }\n\n        // output blocks = SHA256(outerKey || SHA256(inner)) ...\n        while (dkLen >= 32) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n            dkLen -= 32;\n        }\n        if (dkLen > 0) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n        }\n\n        return dk;\n    }\n\n    // The following is an adaptation of scryptsy\n    // See: https://www.npmjs.com/package/scryptsy\n    function blockmix_salsa8(BY, Yi, r, x, _X) {\n        let i;\n\n        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n        for (i = 0; i < 2 * r; i++) {\n            blockxor(BY, i * 16, _X, 16);\n            salsa20_8(_X, x);\n            arraycopy(_X, 0, BY, Yi + (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n        }\n    }\n\n    function R(a, b) {\n        return (a << b) | (a >>> (32 - b));\n    }\n\n    function salsa20_8(B, x) {\n        arraycopy(B, 0, x, 0, 16);\n\n        for (let i = 8; i > 0; i -= 2) {\n            x[ 4] ^= R(x[ 0] + x[12], 7);\n            x[ 8] ^= R(x[ 4] + x[ 0], 9);\n            x[12] ^= R(x[ 8] + x[ 4], 13);\n            x[ 0] ^= R(x[12] + x[ 8], 18);\n            x[ 9] ^= R(x[ 5] + x[ 1], 7);\n            x[13] ^= R(x[ 9] + x[ 5], 9);\n            x[ 1] ^= R(x[13] + x[ 9], 13);\n            x[ 5] ^= R(x[ 1] + x[13], 18);\n            x[14] ^= R(x[10] + x[ 6], 7);\n            x[ 2] ^= R(x[14] + x[10], 9);\n            x[ 6] ^= R(x[ 2] + x[14], 13);\n            x[10] ^= R(x[ 6] + x[ 2], 18);\n            x[ 3] ^= R(x[15] + x[11], 7);\n            x[ 7] ^= R(x[ 3] + x[15], 9);\n            x[11] ^= R(x[ 7] + x[ 3], 13);\n            x[15] ^= R(x[11] + x[ 7], 18);\n            x[ 1] ^= R(x[ 0] + x[ 3], 7);\n            x[ 2] ^= R(x[ 1] + x[ 0], 9);\n            x[ 3] ^= R(x[ 2] + x[ 1], 13);\n            x[ 0] ^= R(x[ 3] + x[ 2], 18);\n            x[ 6] ^= R(x[ 5] + x[ 4], 7);\n            x[ 7] ^= R(x[ 6] + x[ 5], 9);\n            x[ 4] ^= R(x[ 7] + x[ 6], 13);\n            x[ 5] ^= R(x[ 4] + x[ 7], 18);\n            x[11] ^= R(x[10] + x[ 9], 7);\n            x[ 8] ^= R(x[11] + x[10], 9);\n            x[ 9] ^= R(x[ 8] + x[11], 13);\n            x[10] ^= R(x[ 9] + x[ 8], 18);\n            x[12] ^= R(x[15] + x[14], 7);\n            x[13] ^= R(x[12] + x[15], 9);\n            x[14] ^= R(x[13] + x[12], 13);\n            x[15] ^= R(x[14] + x[13], 18);\n        }\n\n        for (let i = 0; i < 16; ++i) {\n            B[i] += x[i];\n        }\n    }\n\n    // naive approach... going back to loop unrolling may yield additional performance\n    function blockxor(S, Si, D, len) {\n        for (let i = 0; i < len; i++) {\n            D[i] ^= S[Si + i]\n        }\n    }\n\n    function arraycopy(src, srcPos, dest, destPos, length) {\n        while (length--) {\n            dest[destPos++] = src[srcPos++];\n        }\n    }\n\n    function checkBufferish(o) {\n        if (!o || typeof(o.length) !== 'number') { return false; }\n\n        for (let i = 0; i < o.length; i++) {\n            const v = o[i];\n            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function ensureInteger(value, name) {\n        if (typeof(value) !== \"number\" || (value % 1)) { throw new Error('invalid ' + name); }\n        return value;\n    }\n\n    // N = Cpu cost, r = Memory cost, p = parallelization cost\n    // callback(error, progress, key)\n    function _scrypt(password, salt, N, r, p, dkLen, callback) {\n\n        N = ensureInteger(N, 'N');\n        r = ensureInteger(r, 'r');\n        p = ensureInteger(p, 'p');\n\n        dkLen = ensureInteger(dkLen, 'dkLen');\n\n        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }\n\n        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }\n        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }\n\n        if (!checkBufferish(password)) {\n            throw new Error('password must be an array or buffer');\n        }\n        password = Array.prototype.slice.call(password);\n\n        if (!checkBufferish(salt)) {\n            throw new Error('salt must be an array or buffer');\n        }\n        salt = Array.prototype.slice.call(salt);\n\n        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n        const B = new Uint32Array(p * 32 * r)\n        for (let i = 0; i < B.length; i++) {\n            const j = i * 4;\n            B[i] = ((b[j + 3] & 0xff) << 24) |\n                   ((b[j + 2] & 0xff) << 16) |\n                   ((b[j + 1] & 0xff) << 8) |\n                   ((b[j + 0] & 0xff) << 0);\n        }\n\n        const XY = new Uint32Array(64 * r);\n        const V = new Uint32Array(32 * r * N);\n\n        const Yi = 32 * r;\n\n        // scratch space\n        const x = new Uint32Array(16);       // salsa20_8\n        const _X = new Uint32Array(16);      // blockmix_salsa8\n\n        const totalOps = p * N * 2;\n        let currentOp = 0;\n        let lastPercent10 = null;\n\n        // Set this to true to abandon the scrypt on the next step\n        let stop = false;\n\n        // State information\n        let state = 0;\n        let i0 = 0, i1;\n        let Bi;\n\n        // How many blockmix_salsa8 can we do per step?\n        const limit = callback ? parseInt(1000 / r): 0xffffffff;\n\n        // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;\n\n        // This is really all I changed; making scryptsy a state machine so we occasionally\n        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n        const incrementalSMix = function() {\n            if (stop) {\n                return callback(new Error('cancelled'), currentOp / totalOps);\n            }\n\n            let steps;\n\n            switch (state) {\n                case 0:\n                    // for (var i = 0; i < p; i++)...\n                    Bi = i0 * 32 * r;\n\n                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1\n\n                    state = 1;                                         // Move to ROMix 2\n                    i1 = 0;\n\n                    // Fall through\n\n                case 1:\n\n                    // Run up to 1000 steps of the first inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                  // ROMix - 2\n                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3\n                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4\n                    }\n\n                    // for (var i = 0; i < N; i++)\n                    i1 += steps;\n                    currentOp += steps;\n\n                    if (callback) {\n                        // Call the callback with the progress (optionally stopping us)\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    i1 = 0;                                          // Move to ROMix 6\n                    state = 2;\n\n                    // Fall through\n\n                case 2:\n\n                    // Run up to 1000 steps of the second inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                // ROMix - 6\n                        const offset = (2 * r - 1) * 16;             // ROMix - 7\n                        const j = XY[offset] & (N - 1);\n                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)\n                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)\n                    }\n\n                    // for (var i = 0; i < N; i++)...\n                    i1 += steps;\n                    currentOp += steps;\n\n                    // Call the callback with the progress (optionally stopping us)\n                    if (callback) {\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10\n\n                    // for (var i = 0; i < p; i++)...\n                    i0++;\n                    if (i0 < p) {\n                        state = 0;\n                        break;\n                    }\n\n                    b = [];\n                    for (let i = 0; i < B.length; i++) {\n                        b.push((B[i] >>  0) & 0xff);\n                        b.push((B[i] >>  8) & 0xff);\n                        b.push((B[i] >> 16) & 0xff);\n                        b.push((B[i] >> 24) & 0xff);\n                    }\n\n                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);\n\n                    // Send the result to the callback\n                    if (callback) { callback(null, 1.0, derivedKey); }\n\n                    // Done; don't break (which would reschedule)\n                    return derivedKey;\n            }\n\n            // Schedule the next steps\n            if (callback) { nextTick(incrementalSMix); }\n        }\n\n        // Run the smix state machine until completion\n        if (!callback) {\n            while (true) {\n                const derivedKey = incrementalSMix();\n                if (derivedKey != undefined) { return derivedKey; }\n            }\n        }\n\n        // Bootstrap the async incremental smix\n        incrementalSMix();\n    }\n\n    const lib = {\n        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {\n            return new Promise(function(resolve, reject) {\n                let lastProgress = 0;\n                if (progressCallback) { progressCallback(0); }\n                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {\n                    if (error) {\n                        reject(error);\n                    } else if (key) {\n                        if (progressCallback && lastProgress !== 1) {\n                            progressCallback(1);\n                        }\n                        resolve(new Uint8Array(key));\n                    } else if (progressCallback && progress !== lastProgress) {\n                        lastProgress = progress;\n                        return progressCallback(progress);\n                    }\n                });\n            });\n        },\n        syncScrypt: function(password, salt, N, r, p, dkLen) {\n            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n        }\n    };\n\n    // node.js\n    if (typeof(exports) !== 'undefined') {\n       module.exports = lib;\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(lib);\n\n    // Web Browsers\n    } else if (root) {\n\n        // If there was an existing library \"scrypt\", make sure it is still available\n        if (root.scrypt) {\n            root._scrypt = root.scrypt;\n        }\n\n        root.scrypt = lib;\n    }\n\n})(this);\n","// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\nvar nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;\n","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-disable flowtype/no-weak-types */\nimport nodejsCustomInspectSymbol from \"./nodejsCustomInspectSymbol.mjs\";\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","export default function invariant(condition, message) {\n  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n  }\n}\n","import invariant from \"./invariant.mjs\";\nimport nodejsCustomInspectSymbol from \"./nodejsCustomInspectSymbol.mjs\";\n/**\n * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`\n */\n\nexport default function defineInspect(classObject) {\n  var fn = classObject.prototype.toJSON;\n  typeof fn === 'function' || invariant(0);\n  classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n","import defineInspect from \"../jsutils/defineInspect.mjs\";\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport var Location = /*#__PURE__*/function () {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport var Token = /*#__PURE__*/function () {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */\n","import inspect from \"../jsutils/inspect.mjs\";\nimport { isNode } from \"./ast.mjs\";\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error(\"Invalid AST Node: \".concat(inspect(node), \".\"));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _visitorKeys$node$kin;\n\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n","/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  var startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  var endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nexport function getBlockStringIndentation(value) {\n  var _commonIndent;\n\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n","import { visit } from \"./visitor.mjs\";\nimport { printBlockString } from \"./blockString.mjs\";\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    var prefix = wrap('', alias, ': ') + name;\n    var argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n    if (argsLine.length > MAX_LINE_LENGTH) {\n      argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n    }\n\n    return join([argsLine, join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: addDescription(function (_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  }),\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        interfaces = _ref26.interfaces,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        interfaces = _ref35.interfaces,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray) {\n  var _maybeArray$filter$jo;\n\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {\n    return x;\n  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\n\nfunction wrap(start, maybeString) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction isMultiline(str) {\n  return str.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray != null && maybeArray.some(isMultiline);\n}\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[5855],{\n\n/***/ 48709:\n/***/ (function(module) {\n\n\n\n(function(root) {\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = value >> 8;\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (true) {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n\n\n})(this);\n\n\n/***/ }),\n\n/***/ 89744:\n/***/ (function(__unused_webpack_module, exports) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS = exports.GENERIC_GAS_LIMIT_ORDER_EXECUTION = exports.NATIVE_WRAPPED_TOKEN_ADDRESS = exports.NATIVE_TOKEN_NAME = exports.NATIVE_WRAPPED_TOKEN_TICKER = exports.NATIVE_TOKEN_TICKER = exports.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER = exports.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS = exports.GELATO_LIMIT_ORDERS_MODULE_ADDRESS = exports.GELATO_LIMIT_ORDERS_ADDRESS = exports.SUBGRAPH_URL = exports.OLD_SUBGRAPH_URL = exports.NETWORK_STOP_LIMIT_HANDLERS = exports.NETWORK_HANDLERS = exports.NETWORK_NAME = exports.HANDLERS_ADDRESSES = exports.LIMIT_ORDER_SLIPPAGE = exports.STOP_LIMIT_SLIPPAGE_BPS = exports.BPS_GELATO_FEE = exports.CHAIN_ID = exports.MAX_LIFETIME_IN_SECONDS = exports.SLIPPAGE_BPS = exports.ETH_ADDRESS = void 0;\nexports.ETH_ADDRESS = \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\nexports.SLIPPAGE_BPS = 40; // 0.4%\nexports.MAX_LIFETIME_IN_SECONDS = 7889238; // 3 months in seconds\nexports.CHAIN_ID = {\n    MAINNET: 1,\n    ROPSTEN: 3,\n    GOERLI: 5,\n    BSC: 56,\n    MATIC: 137,\n    FANTOM: 250,\n    AVAX: 43114,\n};\nexports.BPS_GELATO_FEE = {\n    [exports.CHAIN_ID.MAINNET]: 10,\n    [exports.CHAIN_ID.MATIC]: 10,\n    [exports.CHAIN_ID.FANTOM]: 10,\n    [exports.CHAIN_ID.BSC]: 10,\n    [exports.CHAIN_ID.AVAX]: 10,\n};\nexports.STOP_LIMIT_SLIPPAGE_BPS = {\n    [exports.CHAIN_ID.MAINNET]: 500,\n    [exports.CHAIN_ID.ROPSTEN]: 500,\n    [exports.CHAIN_ID.MATIC]: 500,\n    [exports.CHAIN_ID.FANTOM]: 500,\n    [exports.CHAIN_ID.BSC]: 500,\n    [exports.CHAIN_ID.AVAX]: 500,\n};\nexports.LIMIT_ORDER_SLIPPAGE = {\n    [exports.CHAIN_ID.MAINNET]: 40,\n    [exports.CHAIN_ID.ROPSTEN]: 40,\n    [exports.CHAIN_ID.MATIC]: 40,\n    [exports.CHAIN_ID.FANTOM]: 40,\n    [exports.CHAIN_ID.BSC]: 40,\n    [exports.CHAIN_ID.AVAX]: 40,\n};\nexports.HANDLERS_ADDRESSES = {\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.MAINNET]: {\n        [\"uniswap\"]: \"0x837c03414fb86861f28ca7e91e5fd770fda0f52d\",\n        [\"uniswap_stoplimit\"]: \"0xf437a1a98566872f734bd18addf4bb610d1f887b\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.ROPSTEN]: {\n        [\"uniswap\"]: \"0x1f397f95d31eb20183b69d685a5060cfdefd508b\",\n        [\"quickswap_stoplimit\"]: \"0x87bE4Eb9dFb2DefcEA035D3010f33584Fc8ddDB5\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.MATIC]: {\n        [\"quickswap\"]: \"0xaccbd2c6ad75ad3394dc5f4b1f606bf111e4eae3\",\n        [\"polydex\"]: \"0x00fc86d360162e4672ec6B427E12ed36F39f1f53\",\n        [\"cafeswap\"]: \"0xd167afcee4e9a89e69646fd3c27e58b61d1b7f97\",\n        [\"quickswap_stoplimit\"]: \"0x51cc226648f8de65513de7cdfd3e7b116156234e\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.FANTOM]: {\n        [\"spiritswap\"]: \"0x5fb00386558ccc219e51b69d8e963ef20b0c267a\",\n        [\"spookyswap\"]: \"0x228ffd7122d202c0cd24330892881c47b0817c7a\",\n        [\"bombswap\"]: \"0x87C4Fbd67f6DD8a1B5EFD9879956c728C97afeFe\",\n        [\"defyswap\"]: \"0x3d401587320522a5e0bb973d10a852430a8edbbd\",\n        [\"spiritswap_stoplimit\"]: \"0x6ea82c72732389c5149326e048a46be9f8bec8e8\",\n        [\"spookyswap_stoplimit\"]: \"0xe912cd26c4a4cfffc175a297f1328ab23313a1a7\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.BSC]: {\n        [\"pancakeswap\"]: \"0x88f8CCC064bA2D39cF08D57B6e7504a7B6bE8E4e\",\n        [\"pancakeswap_stoplimit\"]: \"0x84b826bcd26f1bc0cd5fbbdef7f5b8965d6bbb38\",\n    },\n    // UniswapV2Router02Handler\n    [exports.CHAIN_ID.AVAX]: {\n        [\"traderjoe\"]: \"0x88f8CCC064bA2D39cF08D57B6e7504a7B6bE8E4e\",\n        [\"pangolin\"]: \"0x8b206547cfe6f35a77ddab2d6d97260765a349ef\",\n        [\"pangolin_stoplimit\"]: \"0xb4c53e2e32caf977d61a8a776bdc44837a5d0d91\",\n        [\"traderjoe_stoplimit\"]: \"0xcf497830e43836738bdd0c3d7e09b599ddf081b2\",\n    },\n};\nexports.NETWORK_NAME = {\n    [exports.CHAIN_ID.MAINNET]: \"Ethereum\",\n    [exports.CHAIN_ID.ROPSTEN]: \"Ropsten\",\n    [exports.CHAIN_ID.GOERLI]: \"Goerli\",\n    [exports.CHAIN_ID.MATIC]: \"Polygon (Matic)\",\n    [exports.CHAIN_ID.FANTOM]: \"FANTOM\",\n    [exports.CHAIN_ID.BSC]: \"BSC\",\n    [exports.CHAIN_ID.AVAX]: \"AVAX\",\n};\nexports.NETWORK_HANDLERS = {\n    [exports.CHAIN_ID.MAINNET]: [\"uniswap\", \"uniswap_stoplimit\"],\n    [exports.CHAIN_ID.ROPSTEN]: [\"uniswap\", \"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.MATIC]: [\"quickswap\", \"polydex\", \"cafeswap\", \"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.FANTOM]: [\n        \"spiritswap\",\n        \"spookyswap\",\n        \"bombswap\",\n        \"defyswap\",\n        \"spiritswap_stoplimit\",\n        \"spookyswap_stoplimit\",\n    ],\n    [exports.CHAIN_ID.BSC]: [\"pancakeswap\", \"pancakeswap_stoplimit\"],\n    [exports.CHAIN_ID.AVAX]: [\n        \"traderjoe\",\n        \"pangolin\",\n        \"pangolin_stoplimit\",\n        \"traderjoe_stoplimit\",\n    ],\n};\nexports.NETWORK_STOP_LIMIT_HANDLERS = {\n    [exports.CHAIN_ID.MAINNET]: [\"uniswap_stoplimit\"],\n    [exports.CHAIN_ID.ROPSTEN]: [\"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.MATIC]: [\"quickswap_stoplimit\"],\n    [exports.CHAIN_ID.BSC]: [\"pancakeswap_stoplimit\"],\n    [exports.CHAIN_ID.FANTOM]: [\"spookyswap_stoplimit\", \"spiritswap_stoplimit\"],\n    [exports.CHAIN_ID.AVAX]: [\"traderjoe_stoplimit\", \"pangolin_stoplimit\"],\n};\nexports.OLD_SUBGRAPH_URL = {\n    [exports.CHAIN_ID.MAINNET]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders\",\n    [exports.CHAIN_ID.ROPSTEN]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-ropsten\",\n    [exports.CHAIN_ID.MATIC]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-polygon\",\n    [exports.CHAIN_ID.FANTOM]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-fantom\",\n};\nexports.SUBGRAPH_URL = {\n    [exports.CHAIN_ID.MAINNET]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-ii\",\n    [exports.CHAIN_ID.MATIC]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-polygon-ii\",\n    [exports.CHAIN_ID.FANTOM]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-fantom-ii\",\n    [exports.CHAIN_ID.BSC]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-bsc\",\n    [exports.CHAIN_ID.AVAX]: \"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-avax\",\n};\nexports.GELATO_LIMIT_ORDERS_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0x36049D479A97CdE1fC6E2a5D2caE30B666Ebf92B\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0x0e5096D201Fe2985f5C26432A76f145D6e5D1453\",\n    [exports.CHAIN_ID.GOERLI]: \"0xa0453c6ab71fe3da89640ee2503326bd0899a589\",\n    [exports.CHAIN_ID.MATIC]: \"0x38c4092b28dAB7F3d98eE6524549571c283cdfA5\",\n    [exports.CHAIN_ID.FANTOM]: \"0x05Ad1094Eb6Cde564d732196F6754Ee464896031\",\n    [exports.CHAIN_ID.BSC]: \"0x0c30D3d66bc7C73A83fdA929888c34dcb24FD599\",\n    [exports.CHAIN_ID.AVAX]: \"0x0c30D3d66bc7C73A83fdA929888c34dcb24FD599\",\n};\nexports.GELATO_LIMIT_ORDERS_MODULE_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0x037fc8e71445910e1E0bBb2a0896d5e9A7485318\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0x3f3C13b09B601fb6074124fF8D779d2964caBf8B\",\n    [exports.CHAIN_ID.GOERLI]: \"0xCf8EDB3333Fae73b23f689229F4De6Ac95d1f707\",\n    [exports.CHAIN_ID.MATIC]: \"0x5A36178E38864F5E724A2DaF5f9cD9bA473f7903\",\n    [exports.CHAIN_ID.FANTOM]: \"0xf2253BF9a0BD002300cFe6f4E630d755669f6DCa\",\n    [exports.CHAIN_ID.BSC]: \"0xb7499a92fc36e9053a4324aFfae59d333635D9c3\",\n    [exports.CHAIN_ID.AVAX]: \"0xb7499a92fc36e9053a4324aFfae59d333635D9c3\",\n};\nexports.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0xbeC333EDE1A0687D2b9624F8C073a54c93ba9777\",\n    [exports.CHAIN_ID.GOERLI]: \"0xCf8EDB3333Fae73b23f689229F4De6Ac95d1f707\",\n};\nexports.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER = {\n    [exports.CHAIN_ID.MAINNET]: \"0x5fb00386558ccc219e51b69d8e963ef20b0c267a\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0x9c06ff386779cc2269d482bcecf2378a4ff5cb90\",\n    [exports.CHAIN_ID.GOERLI]: \"0x247A1306b6122ba28862b19a95004899db91f1b5\",\n    [exports.CHAIN_ID.MATIC]: \"0x0c2c2963a4353ffd839590f7cb1e783688378814\",\n    [exports.CHAIN_ID.FANTOM]: \"0x59e61b95f20e940ac777e88fa2dfa0a6a4c40fa0\",\n    [exports.CHAIN_ID.BSC]: \"0x64c7f3c2C19B41a6aD67bb5f4edc8EdbB3284F34\",\n    [exports.CHAIN_ID.AVAX]: \"0x64c7f3c2C19B41a6aD67bb5f4edc8EdbB3284F34\",\n};\nexports.NATIVE_TOKEN_TICKER = {\n    [exports.CHAIN_ID.MAINNET]: \"ETH\",\n    [exports.CHAIN_ID.ROPSTEN]: \"ETH\",\n    [exports.CHAIN_ID.GOERLI]: \"ETH\",\n    [exports.CHAIN_ID.MATIC]: \"MATIC\",\n    [exports.CHAIN_ID.FANTOM]: \"FTM\",\n    [exports.CHAIN_ID.BSC]: \"BNB\",\n    [exports.CHAIN_ID.AVAX]: \"AVAX\",\n};\nexports.NATIVE_WRAPPED_TOKEN_TICKER = {\n    [exports.CHAIN_ID.MAINNET]: \"WETH\",\n    [exports.CHAIN_ID.ROPSTEN]: \"WETH\",\n    [exports.CHAIN_ID.GOERLI]: \"WETH\",\n    [exports.CHAIN_ID.MATIC]: \"WMATIC\",\n    [exports.CHAIN_ID.FANTOM]: \"WFTM\",\n    [exports.CHAIN_ID.BSC]: \"WBNB\",\n    [exports.CHAIN_ID.AVAX]: \"WAVAX\",\n};\nexports.NATIVE_TOKEN_NAME = {\n    [exports.CHAIN_ID.MAINNET]: \"Ether\",\n    [exports.CHAIN_ID.ROPSTEN]: \"Ether\",\n    [exports.CHAIN_ID.GOERLI]: \"Ether\",\n    [exports.CHAIN_ID.MATIC]: \"Matic\",\n    [exports.CHAIN_ID.FANTOM]: \"Fantom\",\n    [exports.CHAIN_ID.BSC]: \"Bnb\",\n    [exports.CHAIN_ID.AVAX]: \"Avax\",\n};\nexports.NATIVE_WRAPPED_TOKEN_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0xc778417e063141139fce010982780140aa0cd5ab\",\n    [exports.CHAIN_ID.GOERLI]: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n    [exports.CHAIN_ID.MATIC]: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n    [exports.CHAIN_ID.FANTOM]: \"0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83\",\n    [exports.CHAIN_ID.BSC]: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n    [exports.CHAIN_ID.AVAX]: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n};\nexports.GENERIC_GAS_LIMIT_ORDER_EXECUTION = \"400000\";\nexports.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS = {\n    [exports.CHAIN_ID.MAINNET]: \"0x260aB0aCb931D7Da784fC35c7E96c3B13213Abf1\",\n    [exports.CHAIN_ID.ROPSTEN]: \"0xDC41072F4aFE7e4a7ea0f21d13a92662Fe733C55\",\n    [exports.CHAIN_ID.MATIC]: \"0x81967ac4ce8e2d94f7e4b4cf3d2e760605079604\",\n    [exports.CHAIN_ID.BSC]: \"0xe912cd26c4a4cfffc175a297f1328ab23313a1a7\",\n    [exports.CHAIN_ID.FANTOM]: \"0xf437a1a98566872f734bd18addf4bb610d1f887b\",\n    [exports.CHAIN_ID.AVAX]: \"0xf437a1a98566872f734bd18addf4bb610d1f887b\",\n};\n\n\n/***/ }),\n\n/***/ 98081:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC20OrderRouter__factory = void 0;\nconst ethers_1 = __webpack_require__(81804);\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IGelatoPineCore\",\n                name: \"_gelatoPineCore\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"caller\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"module\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"inputToken\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"witness\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"secret\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"DepositToken\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_secret\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"depositToken\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"gelatoPineCore\",\n        outputs: [\n            {\n                internalType: \"contract IGelatoPineCore\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ERC20OrderRouter__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.ERC20OrderRouter__factory = ERC20OrderRouter__factory;\nERC20OrderRouter__factory.abi = _abi;\n\n\n/***/ }),\n\n/***/ 99272:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERC20__factory = void 0;\nconst ethers_1 = __webpack_require__(81804);\nconst _abi = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"balance\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                name: \"_value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                name: \"_spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"fallback\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n];\nclass ERC20__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.ERC20__factory = ERC20__factory;\nERC20__factory.abi = _abi;\n\n\n/***/ }),\n\n/***/ 23744:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GelatoLimitOrders__factory = void 0;\nconst ethers_1 = __webpack_require__(81804);\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"DepositETH\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"OrderCancelled\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_key\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_auxData\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bought\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"OrderExecuted\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ETH_ADDRESS\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_auxData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"canExecuteOrder\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"cancelOrder\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"decodeOrder\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"secret\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"depositEth\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_secret\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"encodeEthOrder\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_secret\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"encodeTokenOrder\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ethDeposits\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_signature\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_auxData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"executeOrder\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"existOrder\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"keyOf\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract IModule\",\n                name: \"_module\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"_inputToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address payable\",\n                name: \"_owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_witness\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"vaultOfOrder\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nclass GelatoLimitOrders__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.GelatoLimitOrders__factory = GelatoLimitOrders__factory;\nGelatoLimitOrders__factory.abi = _abi;\n\n\n/***/ }),\n\n/***/ 82354:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Multicall__factory = void 0;\nconst ethers_1 = __webpack_require__(81804);\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_factory\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_mainModule\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_imageHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_threshold\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_signers\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"RequiredConfig\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_signer\",\n                type: \"address\",\n            },\n        ],\n        name: \"RequiredSigner\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callBalanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callBlockNumber\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_i\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"callBlockhash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callChainId\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callCode\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"code\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callCodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"codeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_addr\",\n                type: \"address\",\n            },\n        ],\n        name: \"callCodeSize\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"size\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callCoinbase\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callDifficulty\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callGasLeft\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callGasLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callGasPrice\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callOrigin\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"lastSignerUpdate\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"lastWalletUpdate\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bool\",\n                        name: \"delegateCall\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revertOnError\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"target\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct IModuleCalls.Transaction[]\",\n                name: \"_txs\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiCall\",\n        outputs: [\n            {\n                internalType: \"bool[]\",\n                name: \"_successes\",\n                type: \"bool[]\",\n            },\n            {\n                internalType: \"bytes[]\",\n                name: \"_results\",\n                type: \"bytes[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_threshold\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"weight\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"signer\",\n                        type: \"address\",\n                    },\n                ],\n                internalType: \"struct RequireUtils.Member[]\",\n                name: \"_members\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_index\",\n                type: \"bool\",\n            },\n        ],\n        name: \"publishConfig\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_hash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_sizeMembers\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_signature\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_index\",\n                type: \"bool\",\n            },\n        ],\n        name: \"publishInitialSigners\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_wallet\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_nonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"requireMinNonce\",\n        outputs: [],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_expiration\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"requireNonExpired\",\n        outputs: [],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass Multicall__factory {\n    static createInterface() {\n        return new ethers_1.utils.Interface(_abi);\n    }\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.Multicall__factory = Multicall__factory;\nMulticall__factory.abi = _abi;\n\n\n/***/ }),\n\n/***/ 16060:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Multicall__factory = exports.GelatoLimitOrders__factory = exports.ERC20OrderRouter__factory = exports.ERC20__factory = void 0;\nvar ERC20__factory_1 = __webpack_require__(99272);\nObject.defineProperty(exports, \"ERC20__factory\", ({ enumerable: true, get: function () { return ERC20__factory_1.ERC20__factory; } }));\nvar ERC20OrderRouter__factory_1 = __webpack_require__(98081);\nObject.defineProperty(exports, \"ERC20OrderRouter__factory\", ({ enumerable: true, get: function () { return ERC20OrderRouter__factory_1.ERC20OrderRouter__factory; } }));\nvar GelatoLimitOrders__factory_1 = __webpack_require__(23744);\nObject.defineProperty(exports, \"GelatoLimitOrders__factory\", ({ enumerable: true, get: function () { return GelatoLimitOrders__factory_1.GelatoLimitOrders__factory; } }));\nvar Multicall__factory_1 = __webpack_require__(82354);\nObject.defineProperty(exports, \"Multicall__factory\", ({ enumerable: true, get: function () { return Multicall__factory_1.Multicall__factory; } }));\n\n\n/***/ }),\n\n/***/ 55855:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.constants = exports.utils = exports.isEthereumChain = exports.GelatoStopLimitOrders = exports.isValidChainIdAndHandler = exports.GelatoLimitOrders = void 0;\nconst tslib_1 = __webpack_require__(70655);\nvar limit_orders_1 = __webpack_require__(78905);\nObject.defineProperty(exports, \"GelatoLimitOrders\", ({ enumerable: true, get: function () { return limit_orders_1.GelatoLimitOrders; } }));\nObject.defineProperty(exports, \"isValidChainIdAndHandler\", ({ enumerable: true, get: function () { return limit_orders_1.isValidChainIdAndHandler; } }));\nvar stoplimit_orders_1 = __webpack_require__(45741);\nObject.defineProperty(exports, \"GelatoStopLimitOrders\", ({ enumerable: true, get: function () { return stoplimit_orders_1.GelatoStopLimitOrders; } }));\nvar utils_1 = __webpack_require__(41153);\nObject.defineProperty(exports, \"isEthereumChain\", ({ enumerable: true, get: function () { return utils_1.isEthereumChain; } }));\n(0, tslib_1.__exportStar)(__webpack_require__(82938), exports);\nexports.utils = (0, tslib_1.__importStar)(__webpack_require__(41153));\nexports.constants = (0, tslib_1.__importStar)(__webpack_require__(89744));\n\n\n/***/ }),\n\n/***/ 78905:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GelatoLimitOrders = exports.isFlashbotsCompatibleChainId = exports.isValidChainIdAndHandler = void 0;\nconst tslib_1 = __webpack_require__(70655);\nconst ethers_1 = __webpack_require__(81804);\nconst abstract_provider_1 = __webpack_require__(81556);\nconst abstract_signer_1 = __webpack_require__(48088);\nconst constants_1 = __webpack_require__(89744);\nconst types_1 = __webpack_require__(16060);\nconst queries_1 = __webpack_require__(40615);\nconst utils_1 = __webpack_require__(41153);\nconst isValidChainIdAndHandler = (chainId, handler) => {\n    return constants_1.NETWORK_HANDLERS[chainId].includes(handler);\n};\nexports.isValidChainIdAndHandler = isValidChainIdAndHandler;\nconst isFlashbotsCompatibleChainId = (chainId) => {\n    return chainId == constants_1.CHAIN_ID.MAINNET || chainId == constants_1.CHAIN_ID.GOERLI;\n};\nexports.isFlashbotsCompatibleChainId = isFlashbotsCompatibleChainId;\nclass GelatoLimitOrders {\n    constructor(chainId, signerOrProvider, handler, isFlashbotsProtected = false) {\n        var _a;\n        if (handler && !(0, exports.isValidChainIdAndHandler)(chainId, handler)) {\n            throw new Error(\"Invalid chainId and handler\");\n        }\n        else if (isFlashbotsProtected &&\n            (handler || !(0, exports.isFlashbotsCompatibleChainId)(chainId))) {\n            throw new Error(\"Invalid chainId or handler for Flashbots bundle submission. handler must be undefined, and chainId either 1 (mainnet) or 5 (goerli)\");\n        }\n        this._chainId = chainId;\n        this._gelatoFeeBPS = constants_1.BPS_GELATO_FEE[chainId];\n        this._slippageBPS = constants_1.LIMIT_ORDER_SLIPPAGE[chainId];\n        this._subgraphUrl = constants_1.SUBGRAPH_URL[chainId];\n        this._signer = abstract_signer_1.Signer.isSigner(signerOrProvider)\n            ? signerOrProvider\n            : undefined;\n        this._provider = abstract_provider_1.Provider.isProvider(signerOrProvider)\n            ? signerOrProvider\n            : abstract_signer_1.Signer.isSigner(signerOrProvider)\n                ? signerOrProvider.provider\n                : undefined;\n        this._gelatoLimitOrders = this._signer\n            ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._signer)\n            : this._provider\n                ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], types_1.GelatoLimitOrders__factory.createInterface());\n        this._moduleAddress = isFlashbotsProtected\n            ? constants_1.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS[this._chainId]\n            : constants_1.GELATO_LIMIT_ORDERS_MODULE_ADDRESS[this._chainId];\n        this._handler = handler;\n        this._handlerAddress = handler\n            ? (_a = constants_1.HANDLERS_ADDRESSES[this._chainId][handler]) === null || _a === void 0 ? void 0 : _a.toLowerCase()\n            : undefined;\n        this._isFlashbotsProtected = isFlashbotsProtected;\n        this._abiEncoder = new ethers_1.utils.AbiCoder();\n        this._erc20OrderRouter = this._signer\n            ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._signer)\n            : this._provider\n                ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], types_1.ERC20OrderRouter__factory.createInterface());\n    }\n    get gelatoFeeBPS() {\n        return this._gelatoFeeBPS;\n    }\n    get slippageBPS() {\n        return this._slippageBPS;\n    }\n    get chainId() {\n        return this._chainId;\n    }\n    get signer() {\n        return this._signer;\n    }\n    get provider() {\n        return this._provider;\n    }\n    get subgraphUrl() {\n        return this._subgraphUrl;\n    }\n    get handler() {\n        return this._handler;\n    }\n    get handlerAddress() {\n        return this._handlerAddress;\n    }\n    get moduleAddress() {\n        return this._moduleAddress;\n    }\n    get contract() {\n        return this._gelatoLimitOrders;\n    }\n    get erc20OrderRouter() {\n        return this._erc20OrderRouter;\n    }\n    get isFlashbotsProtected() {\n        return this._isFlashbotsProtected;\n    }\n    encodeLimitOrderSubmission(inputToken, outputToken, inputAmount, minReturn, owner, checkAllowance = true) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const { payload } = yield this.encodeLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, minReturn, owner, checkAllowance);\n            return payload;\n        });\n    }\n    encodeLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, minReturnToBeParsed, owner, checkAllowance = true) {\n        var _a;\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const randomSecret = ethers_1.utils.hexlify(ethers_1.utils.randomBytes(19)).replace(\"0x\", \"\");\n            // 0x67656c61746f6e6574776f726b = gelatonetwork in hex\n            const fullSecret = `0x67656c61746f6e6574776f726b${randomSecret}`;\n            const { privateKey: secret, address: witness } = new ethers_1.Wallet(fullSecret);\n            const { minReturn } = this.getFeeAndSlippageAdjustedMinReturn(minReturnToBeParsed);\n            const payload = yield this._encodeSubmitData(inputToken, outputToken, owner, witness, inputAmount, minReturn, secret, checkAllowance);\n            const encodedData = this._handlerAddress\n                ? this._abiEncoder.encode([\"address\", \"uint256\", \"address\"], [outputToken, minReturn, this._handlerAddress])\n                : this._abiEncoder.encode([\"address\", \"uint256\"], [outputToken, minReturn]);\n            return {\n                payload,\n                secret,\n                witness,\n                order: {\n                    id: this._getKey({\n                        module: this._moduleAddress,\n                        inputToken,\n                        owner,\n                        witness,\n                        data: encodedData,\n                    }),\n                    module: this._moduleAddress.toLowerCase(),\n                    data: encodedData,\n                    inputToken: inputToken.toLowerCase(),\n                    outputToken: outputToken.toLowerCase(),\n                    owner: owner.toLowerCase(),\n                    witness: witness.toLowerCase(),\n                    inputAmount: inputAmount.toString(),\n                    minReturn: minReturn.toString(),\n                    adjustedMinReturn: minReturnToBeParsed.toString(),\n                    inputData: payload.data.toString(),\n                    secret: secret.toLowerCase(),\n                    handler: (_a = this._handlerAddress) !== null && _a !== void 0 ? _a : null,\n                },\n            };\n        });\n    }\n    submitLimitOrder(inputToken, outputToken, inputAmount, minReturn, checkAllowance = true, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            const owner = yield this._signer.getAddress();\n            const txData = yield this.encodeLimitOrderSubmission(inputToken, outputToken, inputAmount, minReturn, owner, checkAllowance);\n            return this._signer.sendTransaction(Object.assign(Object.assign({}, overrides), { to: txData.to, data: txData.data, value: ethers_1.BigNumber.from(txData.value) }));\n        });\n    }\n    encodeLimitOrderCancellation(order, checkIsActiveOrder) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._gelatoLimitOrders)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!order.owner)\n                throw new Error(\"No owner\");\n            if (!order.module)\n                throw new Error(\"No module in order\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const data = this._gelatoLimitOrders.interface.encodeFunctionData(\"cancelOrder\", [order.module, order.inputToken, order.owner, order.witness, order.data]);\n            return {\n                data,\n                to: this._gelatoLimitOrders.address,\n                value: ethers_1.constants.Zero,\n            };\n        });\n    }\n    cancelLimitOrder(order, checkIsActiveOrder, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            if (!this._gelatoLimitOrders)\n                throw new Error(\"No gelato limit orders contract\");\n            let _order = order;\n            if (order.id) {\n                try {\n                    const subgraphOrder = yield Promise.race([\n                        this.getOrder(order.id),\n                        new Promise((resolve) => setTimeout(resolve, 5000)).then(() => {\n                            throw new Error(\"Timeout\");\n                        }),\n                    ]);\n                    if (subgraphOrder) {\n                        if (subgraphOrder.status === \"cancelled\") {\n                            throw new Error(`Order status is not open. Current order status: ${subgraphOrder.status}. Cancellation transaction hash: ${subgraphOrder.cancelledTxHash}`);\n                        }\n                        if (subgraphOrder.status === \"executed\") {\n                            throw new Error(`Order status is not open. Current order status: ${subgraphOrder.status}. Execution transaction hash: ${subgraphOrder.executedTxHash}`);\n                        }\n                        _order = Object.assign(Object.assign({}, order), subgraphOrder);\n                    }\n                    // eslint-disable-next-line no-empty\n                }\n                catch (error) { }\n            }\n            if (!_order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!_order.witness)\n                throw new Error(\"No witness in order\");\n            if (!_order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!_order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!_order.data)\n                throw new Error(\"No data in order\");\n            if (!_order.module)\n                throw new Error(\"No module in order\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(_order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const owner = yield this._signer.getAddress();\n            if (owner.toLowerCase() !== order.owner.toLowerCase())\n                throw new Error(\"Owner and signer mismatch\");\n            return this._gelatoLimitOrders.cancelOrder(_order.module, _order.inputToken, _order.owner, _order.witness, _order.data, overrides !== null && overrides !== void 0 ? overrides : {\n                gasLimit: (0, utils_1.isEthereumChain)(this._chainId) ? 600000 : 2000000,\n            });\n        });\n    }\n    approveTokenAmount(inputToken, amount, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            return overrides\n                ? types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount, overrides)\n                : types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount);\n        });\n    }\n    isActiveOrder(order) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider)\n                throw new Error(\"No provider\");\n            if (!this._gelatoLimitOrders)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.module)\n                throw new Error(\"No module in order\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.owner)\n                throw new Error(\"No owner in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.data)\n                throw new Error(\"No data in order\");\n            return this._gelatoLimitOrders.existOrder(order.module, order.inputToken, order.owner, order.witness, order.data);\n        });\n    }\n    getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(18));\n        if (invert) {\n            return ethers_1.BigNumber.from(inputValue)\n                .mul(factor)\n                .div(outputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputValue)\n                .mul(factor)\n                .div(inputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .toString();\n        }\n    }\n    getFeeAndSlippageAdjustedMinReturn(outputAmount, extraSlippageBPS) {\n        if (extraSlippageBPS) {\n            if (!Number.isInteger(extraSlippageBPS))\n                throw new Error(\"Extra Slippage BPS must an unsigned integer\");\n        }\n        const gelatoFee = ethers_1.BigNumber.from(outputAmount)\n            .mul(this._gelatoFeeBPS)\n            .div(10000)\n            .gte(1)\n            ? ethers_1.BigNumber.from(outputAmount).mul(this._gelatoFeeBPS).div(10000)\n            : ethers_1.BigNumber.from(1);\n        const slippageBPS = extraSlippageBPS\n            ? this._slippageBPS + extraSlippageBPS\n            : this._slippageBPS;\n        const slippage = ethers_1.BigNumber.from(outputAmount).mul(slippageBPS).div(10000);\n        const minReturn = ethers_1.BigNumber.from(outputAmount).sub(gelatoFee).sub(slippage);\n        return {\n            minReturn: minReturn.toString(),\n            slippage: slippage.toString(),\n            gelatoFee: gelatoFee.toString(),\n        };\n    }\n    getAdjustedMinReturn(minReturn, extraSlippageBPS) {\n        const gelatoFee = ethers_1.BigNumber.from(this._gelatoFeeBPS);\n        const slippage = extraSlippageBPS\n            ? ethers_1.BigNumber.from(this._slippageBPS + extraSlippageBPS)\n            : ethers_1.BigNumber.from(this._slippageBPS);\n        const fees = gelatoFee.add(slippage);\n        const adjustedMinReturn = ethers_1.BigNumber.from(minReturn)\n            .mul(10000)\n            .div(ethers_1.BigNumber.from(10000).sub(fees));\n        return adjustedMinReturn.toString();\n    }\n    getExecutionPrice(inputAmount, inputDecimals, outputAmount, outputDecimals, isInverted = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(isInverted ? outputDecimals : inputDecimals));\n        if (isInverted) {\n            return ethers_1.BigNumber.from(inputAmount)\n                .mul(factor)\n                .div(outputAmount)\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputAmount)\n                .mul(factor)\n                .div(inputAmount)\n                .toString();\n        }\n    }\n    getOrder(orderId) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const order = yield (0, queries_1.queryOrder)(orderId, this._chainId);\n            if (order) {\n                return Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) });\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    getOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getOpenOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryOpenOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getPastOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryPastOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getExecutedOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryExecutedOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    getCancelledOrders(owner, includeOrdersWithNullHandler = false) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, queries_1.queryCancelledOrders)(owner, this._chainId);\n            return orders\n                .map((order) => (Object.assign(Object.assign({}, order), { adjustedMinReturn: this.getAdjustedMinReturn(order.minReturn) })))\n                .filter((order) => {\n                if (this._handler && !order.handler) {\n                    return includeOrdersWithNullHandler ? true : false;\n                }\n                else {\n                    return this._handler ? order.handler === this._handlerAddress : true;\n                }\n            });\n        });\n    }\n    _getKey(order) {\n        return ethers_1.utils.keccak256(this._abiEncoder.encode([\"address\", \"address\", \"address\", \"address\", \"bytes\"], [order.module, order.inputToken, order.owner, order.witness, order.data]));\n    }\n    _encodeSubmitData(inputToken, outputToken, owner, witness, amount, minReturn, secret, checkAllowance) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider)\n                throw new Error(\"No provider\");\n            if (inputToken.toLowerCase() === outputToken.toLowerCase())\n                throw new Error(\"Input token and output token can not be equal\");\n            const encodedData = this._handlerAddress\n                ? this._abiEncoder.encode([\"address\", \"uint256\", \"address\"], [outputToken, minReturn, this._handlerAddress])\n                : this._abiEncoder.encode([\"address\", \"uint256\"], [outputToken, minReturn]);\n            let data, value, to;\n            if ((0, utils_1.isNetworkGasToken)(inputToken)) {\n                const encodedEthOrder = yield this._gelatoLimitOrders.encodeEthOrder(this._moduleAddress, constants_1.ETH_ADDRESS, // we also use ETH_ADDRESS if it's MATIC\n                owner, witness, encodedData, secret);\n                data = this._gelatoLimitOrders.interface.encodeFunctionData(\"depositEth\", [encodedEthOrder]);\n                value = amount;\n                to = this._gelatoLimitOrders.address;\n            }\n            else {\n                if (checkAllowance) {\n                    const allowance = yield types_1.ERC20__factory.connect(inputToken, this._provider).allowance(owner, this._erc20OrderRouter.address);\n                    if (allowance.lt(amount))\n                        throw new Error(\"Insufficient token allowance for placing order\");\n                }\n                data = this._erc20OrderRouter.interface.encodeFunctionData(\"depositToken\", [\n                    amount,\n                    this._moduleAddress,\n                    inputToken,\n                    owner,\n                    witness,\n                    encodedData,\n                    secret,\n                ]);\n                value = ethers_1.constants.Zero;\n                to = this._erc20OrderRouter.address;\n            }\n            return { data, value, to };\n        });\n    }\n}\nexports.GelatoLimitOrders = GelatoLimitOrders;\n\n\n/***/ }),\n\n/***/ 50105:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GelatoBase = exports.isETHOrWETH = exports.isFlashbotsCompatibleChainId = exports.isValidChainIdAndHandler = void 0;\nconst tslib_1 = __webpack_require__(70655);\nconst ethers_1 = __webpack_require__(81804);\nconst abstract_provider_1 = __webpack_require__(81556);\nconst abstract_signer_1 = __webpack_require__(48088);\nconst constants_1 = __webpack_require__(89744);\nconst types_1 = __webpack_require__(16060);\nconst utils_1 = __webpack_require__(41153);\nconst isValidChainIdAndHandler = (chainId, handler) => {\n    return constants_1.NETWORK_HANDLERS[chainId].includes(handler);\n};\nexports.isValidChainIdAndHandler = isValidChainIdAndHandler;\nconst isFlashbotsCompatibleChainId = (chainId) => {\n    return chainId == constants_1.CHAIN_ID.MAINNET || chainId == constants_1.CHAIN_ID.GOERLI;\n};\nexports.isFlashbotsCompatibleChainId = isFlashbotsCompatibleChainId;\nconst isETHOrWETH = (tokenAddress, chainID) => {\n    const WETH_ADDRESS = constants_1.NATIVE_WRAPPED_TOKEN_ADDRESS[chainID];\n    return (tokenAddress.toLowerCase() === constants_1.ETH_ADDRESS.toLowerCase() ||\n        tokenAddress.toLowerCase() === WETH_ADDRESS.toLowerCase());\n};\nexports.isETHOrWETH = isETHOrWETH;\nclass GelatoBase {\n    constructor(chainId, moduleAddress, signerOrProvider, handler, handlerAddress) {\n        if (handler && !(0, exports.isValidChainIdAndHandler)(chainId, handler)) {\n            throw new Error(\"Invalid chainId and handler\");\n        }\n        this._chainId = chainId;\n        this._gelatoFeeBPS = !(0, utils_1.isEthereumChain)(chainId)\n            ? constants_1.BPS_GELATO_FEE[chainId]\n            : 0;\n        this._slippageBPS = constants_1.STOP_LIMIT_SLIPPAGE_BPS[chainId];\n        this._subgraphUrl = constants_1.SUBGRAPH_URL[chainId];\n        this._signer = abstract_signer_1.Signer.isSigner(signerOrProvider)\n            ? signerOrProvider\n            : undefined;\n        this._provider = abstract_provider_1.Provider.isProvider(signerOrProvider)\n            ? signerOrProvider\n            : abstract_signer_1.Signer.isSigner(signerOrProvider)\n                ? signerOrProvider.provider\n                : undefined;\n        this._gelatoCore = this._signer\n            ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._signer)\n            : this._provider\n                ? types_1.GelatoLimitOrders__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId], types_1.GelatoLimitOrders__factory.createInterface());\n        this._abiEncoder = new ethers_1.utils.AbiCoder();\n        this._erc20OrderRouter = this._signer\n            ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._signer)\n            : this._provider\n                ? types_1.ERC20OrderRouter__factory.connect(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], this._provider)\n                : new ethers_1.Contract(constants_1.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId], types_1.ERC20OrderRouter__factory.createInterface());\n        this._handler = handler;\n        this._handlerAddress = handlerAddress;\n        this._moduleAddress = moduleAddress;\n    }\n    get gelatoFeeBPS() {\n        return this._gelatoFeeBPS;\n    }\n    get slippageBPS() {\n        return this._slippageBPS;\n    }\n    get chainId() {\n        return this._chainId;\n    }\n    get signer() {\n        return this._signer;\n    }\n    get provider() {\n        return this._provider;\n    }\n    get subgraphUrl() {\n        return this._subgraphUrl;\n    }\n    get handler() {\n        return this._handler;\n    }\n    get handlerAddress() {\n        return this._handlerAddress;\n    }\n    get moduleAddress() {\n        return this._moduleAddress;\n    }\n    get contract() {\n        return this._gelatoCore;\n    }\n    get erc20OrderRouter() {\n        return this._erc20OrderRouter;\n    }\n    get abiEncoder() {\n        return this._abiEncoder;\n    }\n    encodeLimitOrderCancellation(order, checkIsActiveOrder) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._gelatoCore)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!order.owner)\n                throw new Error(\"No owner\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const data = this._gelatoCore.interface.encodeFunctionData(\"cancelOrder\", [\n                this._moduleAddress,\n                order.inputToken,\n                order.owner,\n                order.witness,\n                order.data,\n            ]);\n            return {\n                data,\n                to: this._gelatoCore.address,\n                value: ethers_1.constants.Zero,\n            };\n        });\n    }\n    cancelStopLimitOrder(order, checkIsActiveOrder, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            if (!this._gelatoCore)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.outputToken)\n                throw new Error(\"No output token in order\");\n            if (!order.minReturn)\n                throw new Error(\"No minReturn in order\");\n            if (!order.data)\n                throw new Error(\"No data in order\");\n            if (checkIsActiveOrder) {\n                const isActiveOrder = yield this.isActiveOrder(order);\n                if (!isActiveOrder)\n                    throw new Error(\"Order not found. Please review your order data.\");\n            }\n            const owner = yield this._signer.getAddress();\n            if (owner.toLowerCase() !== order.owner.toLowerCase())\n                throw new Error(\"Owner and signer mismatch\");\n            return this._gelatoCore.cancelOrder(this._moduleAddress, order.inputToken, order.owner, order.witness, order.data, overrides !== null && overrides !== void 0 ? overrides : {\n                gasLimit: (0, utils_1.isEthereumChain)(this._chainId) ? 500000 : 1500000,\n            });\n        });\n    }\n    approveTokenAmount(inputToken, amount, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._signer)\n                throw new Error(\"No signer\");\n            return overrides\n                ? types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount, overrides)\n                : types_1.ERC20__factory.connect(inputToken, this._signer).approve(this._erc20OrderRouter.address, amount);\n        });\n    }\n    isActiveOrder(order) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider)\n                throw new Error(\"No provider\");\n            if (!this._gelatoCore)\n                throw new Error(\"No gelato limit orders contract\");\n            if (!order.module)\n                throw new Error(\"No module in order\");\n            if (!order.inputToken)\n                throw new Error(\"No input token in order\");\n            if (!order.owner)\n                throw new Error(\"No owner in order\");\n            if (!order.witness)\n                throw new Error(\"No witness in order\");\n            if (!order.data)\n                throw new Error(\"No data in order\");\n            return this._gelatoCore.existOrder(order.module, order.inputToken, order.owner, order.witness, order.data);\n        });\n    }\n    getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(18));\n        if (invert) {\n            return ethers_1.BigNumber.from(inputValue)\n                .mul(factor)\n                .div(outputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputValue)\n                .mul(factor)\n                .div(inputValue)\n                .mul(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(inputDecimals)))\n                .div(ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(outputDecimals)))\n                .toString();\n        }\n    }\n    getFeeAndSlippageAdjustedMinReturn(outputAmount, extraSlippageBPS) {\n        if (extraSlippageBPS) {\n            if (!Number.isInteger(extraSlippageBPS))\n                throw new Error(\"Extra Slippage BPS must an unsigned integer\");\n        }\n        const gelatoFee = (0, utils_1.isEthereumChain)(this._chainId)\n            ? 0\n            : ethers_1.BigNumber.from(outputAmount).mul(this._gelatoFeeBPS).div(10000).gte(1)\n                ? ethers_1.BigNumber.from(outputAmount).mul(this._gelatoFeeBPS).div(10000)\n                : ethers_1.BigNumber.from(1);\n        const slippageBPS = extraSlippageBPS ? extraSlippageBPS : this._slippageBPS;\n        const slippage = ethers_1.BigNumber.from(outputAmount).mul(slippageBPS).div(10000);\n        const minReturn = ethers_1.BigNumber.from(outputAmount).sub(gelatoFee).sub(slippage);\n        return {\n            minReturn: minReturn.toString(),\n            slippage: slippage.toString(),\n            gelatoFee: gelatoFee.toString(),\n        };\n    }\n    getAdjustedMinReturn(minReturn, extraSlippageBPS) {\n        if ((0, utils_1.isEthereumChain)(this._chainId))\n            throw new Error(\"Method not available for current chain.\");\n        const gelatoFee = ethers_1.BigNumber.from(this._gelatoFeeBPS);\n        const slippage = extraSlippageBPS\n            ? ethers_1.BigNumber.from(extraSlippageBPS)\n            : ethers_1.BigNumber.from(this._slippageBPS);\n        const fees = gelatoFee.add(slippage);\n        const adjustedMinReturn = ethers_1.BigNumber.from(minReturn)\n            .mul(10000)\n            .div(ethers_1.BigNumber.from(10000).sub(fees));\n        return adjustedMinReturn.toString();\n    }\n    getExecutionPrice(inputAmount, inputDecimals, outputAmount, outputDecimals, isInverted = false) {\n        const factor = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(isInverted ? outputDecimals : inputDecimals));\n        if (isInverted) {\n            return ethers_1.BigNumber.from(inputAmount)\n                .mul(factor)\n                .div(outputAmount)\n                .toString();\n        }\n        else {\n            return ethers_1.BigNumber.from(outputAmount)\n                .mul(factor)\n                .div(inputAmount)\n                .toString();\n        }\n    }\n    _getKey(order) {\n        return ethers_1.utils.keccak256(this._abiEncoder.encode([\"address\", \"address\", \"address\", \"address\", \"bytes\"], [order.module, order.inputToken, order.owner, order.witness, order.data]));\n    }\n    _encodeSubmitData(inputToken, outputToken, owner, witness, amount, maxReturn, minReturn, secret, checkAllowance) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.provider)\n                throw new Error(\"No provider\");\n            if (!this.handlerAddress)\n                throw new Error(\"No handlerAddress\");\n            if (inputToken.toLowerCase() === outputToken.toLowerCase())\n                throw new Error(\"Input token and output token can not be equal\");\n            const encodedData = this.abiEncoder.encode([\"address\", \"uint256\", \"address\", \"uint256\"], [outputToken, minReturn, this.handlerAddress, maxReturn]);\n            let data, value, to;\n            if ((0, utils_1.isNetworkGasToken)(inputToken)) {\n                const encodedEthOrder = yield this.contract.encodeEthOrder(this.moduleAddress, constants_1.ETH_ADDRESS, // we also use ETH_ADDRESS if it's MATIC\n                owner, witness, encodedData, secret);\n                data = this.contract.interface.encodeFunctionData(\"depositEth\", [\n                    encodedEthOrder,\n                ]);\n                value = amount;\n                to = this.contract.address;\n            }\n            else {\n                if (checkAllowance) {\n                    const allowance = yield types_1.ERC20__factory.connect(inputToken, this.provider).allowance(owner, this.erc20OrderRouter.address);\n                    if (allowance.lt(amount))\n                        throw new Error(\"Insufficient token allowance for placing order\");\n                }\n                data = this.erc20OrderRouter.interface.encodeFunctionData(\"depositToken\", [\n                    amount,\n                    this.moduleAddress,\n                    inputToken,\n                    owner,\n                    witness,\n                    encodedData,\n                    secret,\n                ]);\n                value = ethers_1.constants.Zero;\n                to = this.erc20OrderRouter.address;\n            }\n            return { data, value, to };\n        });\n    }\n}\nexports.GelatoBase = GelatoBase;\n\n\n/***/ }),\n\n/***/ 45741:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GelatoStopLimitOrders = void 0;\nconst tslib_1 = __webpack_require__(70655);\nconst ethers_1 = __webpack_require__(81804);\nconst constants_1 = __webpack_require__(89744);\nconst core_1 = __webpack_require__(50105);\nconst stoplimit_1 = __webpack_require__(73813);\nclass GelatoStopLimitOrders extends core_1.GelatoBase {\n    constructor(chainId, signerOrProvider, handler) {\n        var _a;\n        if (handler && !(0, core_1.isValidChainIdAndHandler)(chainId, handler)) {\n            throw new Error(\"Invalid chainId and handler\");\n        }\n        const sotplossHandlers = constants_1.NETWORK_STOP_LIMIT_HANDLERS[chainId];\n        if (!handler) {\n            throw new Error(\"No Handler defined\");\n        }\n        if (handler && !sotplossHandlers.includes(handler)) {\n            throw new Error(\"Handler not supported\");\n        }\n        const moduleAddress = constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId];\n        if (!moduleAddress)\n            throw new Error(\"Invalid chainId and handler\");\n        const handlerAddress = (_a = constants_1.HANDLERS_ADDRESSES[chainId][handler]) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        super(chainId, moduleAddress, signerOrProvider, handler, handlerAddress);\n    }\n    submitStopLimitOrder(inputToken, outputToken, inputAmount, maxReturn, checkAllowance = true, overrides) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.signer)\n                throw new Error(\"No signer\");\n            if (!maxReturn)\n                throw new Error(\"No StopLimit defined\");\n            const owner = yield this.signer.getAddress();\n            const txData = yield this.encodeStopLimitOrderSubmission(inputToken, outputToken, inputAmount, maxReturn, owner, checkAllowance);\n            return this.signer.sendTransaction(Object.assign(Object.assign({}, overrides), { to: txData.to, data: txData.data, value: ethers_1.BigNumber.from(txData.value) }));\n        });\n    }\n    encodeStopLimitOrderSubmission(inputToken, outputToken, inputAmount, maxReturn, owner, checkAllowance = true) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const { payload } = yield this.encodeStopLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, maxReturn, owner, checkAllowance);\n            return payload;\n        });\n    }\n    encodeStopLimitOrderSubmissionWithSecret(inputToken, outputToken, inputAmount, maxReturnToBeParsed, owner, checkAllowance = true) {\n        var _a;\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!maxReturnToBeParsed)\n                throw new Error(\"No StopLimit defined\");\n            if (!this.handlerAddress)\n                throw new Error(\"No handlerAddress\");\n            const randomSecret = ethers_1.utils.hexlify(ethers_1.utils.randomBytes(19)).replace(\"0x\", \"\");\n            // 0x67656c61746f6e6574776f726b = gelatonetwork in hex\n            const fullSecret = `0x67656c61746f6e6574776f726b${randomSecret}`;\n            const { privateKey: secret, address: witness } = new ethers_1.Wallet(fullSecret);\n            const { minReturn } = this.getFeeAndSlippageAdjustedMinReturn(maxReturnToBeParsed);\n            const payload = yield this._encodeSubmitData(inputToken, outputToken, owner, witness, inputAmount, maxReturnToBeParsed, minReturn, secret, checkAllowance);\n            const encodedData = this.abiEncoder.encode([\"address\", \"uint256\", \"address\", \"uint256\"], [outputToken, minReturn, this.handlerAddress, maxReturnToBeParsed]);\n            return {\n                payload,\n                secret,\n                witness,\n                order: {\n                    id: this._getKey({\n                        module: this.moduleAddress,\n                        inputToken,\n                        owner,\n                        witness,\n                        data: encodedData,\n                    }),\n                    module: this.moduleAddress.toLowerCase(),\n                    data: encodedData,\n                    inputToken: inputToken.toLowerCase(),\n                    outputToken: outputToken.toLowerCase(),\n                    owner: owner.toLowerCase(),\n                    witness: witness.toLowerCase(),\n                    inputAmount: inputAmount.toString(),\n                    minReturn: minReturn.toString(),\n                    maxReturn: maxReturnToBeParsed.toString(),\n                    adjustedMinReturn: maxReturnToBeParsed.toString(),\n                    inputData: payload.data.toString(),\n                    secret: secret.toLowerCase(),\n                    handler: (_a = this.handlerAddress) !== null && _a !== void 0 ? _a : null,\n                },\n            };\n        });\n    }\n    getOpenStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getExecutedStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitExecutedOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getCancelledStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryStopLimitCancelledOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n    getPastStopLimitOrders(owner) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const orders = yield (0, stoplimit_1.queryPastOrders)(owner, this.chainId);\n            return orders;\n        });\n    }\n}\nexports.GelatoStopLimitOrders = GelatoStopLimitOrders;\n\n\n/***/ }),\n\n/***/ 82938:\n/***/ (function(__unused_webpack_module, exports) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n\n/***/ }),\n\n/***/ 41153:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEthereumChain = exports.isTransactionCostDependentChain = exports.isNetworkGasToken = exports.queries = void 0;\nconst tslib_1 = __webpack_require__(70655);\nconst constants_1 = __webpack_require__(89744);\nexports.queries = (0, tslib_1.__importStar)(__webpack_require__(39258));\nconst isNetworkGasToken = (token) => {\n    if (token.toLowerCase() === constants_1.ETH_ADDRESS.toLowerCase()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n};\nexports.isNetworkGasToken = isNetworkGasToken;\nconst isTransactionCostDependentChain = (chainId) => {\n    switch (chainId) {\n        case 1:\n            return true;\n        case 3:\n            return true;\n        case 5:\n            return true;\n        case 56:\n            return true;\n        case 250:\n            return true;\n        case 43114:\n            return true;\n        default:\n            return false;\n    }\n};\nexports.isTransactionCostDependentChain = isTransactionCostDependentChain;\nconst isEthereumChain = (chainId) => {\n    switch (chainId) {\n        case 1:\n            return true;\n        case 3:\n            return true;\n        case 5:\n            return true;\n        default:\n            return false;\n    }\n};\nexports.isEthereumChain = isEthereumChain;\n\n\n/***/ }),\n\n/***/ 39258:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER = exports.GET_ALL_CANCELLED_ORDERS_BY_OWNER = exports.GET_ALL_EXECUTED_ORDERS_BY_OWNER = exports.GET_ALL_PAST_ORDERS_BY_OWNER = exports.GET_ALL_OPEN_ORDERS_BY_OWNER = exports.GET_ALL_ORDERS_BY_OWNER = exports.GET_ORDER_BY_ID = void 0;\nconst graphql_request_1 = __webpack_require__(66729);\nexports.GET_ORDER_BY_ID = (0, graphql_request_1.gql) `\n  query getOrdersByOwner($id: String) {\n    orders(where: { id: $id }) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_OPEN_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getOpenOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status: open }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_PAST_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getPastOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status_not: open }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_EXECUTED_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getExecutedOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status: executed }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_CANCELLED_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getCancelledOrdersByOwner($owner: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, status: cancelled }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\nexports.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER = (0, graphql_request_1.gql) `\n  query getOrdersByOwner($owner: String, $module: String) {\n    orders(\n      first: 1000\n      orderBy: updatedAtBlock\n      orderDirection: desc\n      where: { owner: $owner, module: $module }\n    ) {\n      id\n      owner\n      inputToken\n      outputToken\n      minReturn\n      maxReturn\n      module\n      witness\n      secret\n      inputAmount\n      vault\n      bought\n      auxData\n      status\n      createdTxHash\n      executedTxHash\n      cancelledTxHash\n      blockNumber\n      createdAt\n      updatedAt\n      updatedAtBlock\n      updatedAtBlockHash\n      data\n      inputData\n      handler\n    }\n  }\n`;\n\n\n/***/ }),\n\n/***/ 40615:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.queryCancelledOrders = exports.queryExecutedOrders = exports.queryPastOrders = exports.queryOpenOrders = exports.queryOrders = exports.queryOrder = void 0;\nconst tslib_1 = __webpack_require__(70655);\nconst graphql_request_1 = __webpack_require__(66729);\nconst constants_1 = __webpack_require__(89744);\nconst constants_2 = __webpack_require__(39258);\nconst stopLimitModule = (chainId) => constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase();\nconst queryOrder = (orderId, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    var _a;\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n                id: orderId.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ORDER_BY_ID, {\n                id: orderId.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return (_a = _getUniqueOrdersWithExpiry(allOrders, chainId).pop()) !== null && _a !== void 0 ? _a : null;\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryOrder = queryOrder;\nconst queryOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId);\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryOrders = queryOrders;\nconst queryOpenOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for open orders\");\n    }\n});\nexports.queryOpenOrders = queryOpenOrders;\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status !== \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for past orders\");\n    }\n});\nexports.queryPastOrders = queryPastOrders;\nconst queryExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"executed\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for executed orders\");\n    }\n});\nexports.queryExecutedOrders = queryExecutedOrders;\nconst queryCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataFromOldSubgraph = constants_1.OLD_SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.OLD_SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const dataFromNewSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n            })\n            : { orders: [] };\n        const allOrders = [\n            ...dataFromOldSubgraph.orders,\n            ...dataFromNewSubgraph.orders,\n        ];\n        return _getUniqueOrdersWithExpiry(allOrders, chainId).filter((order) => order.status === \"cancelled\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for cancelled orders\");\n    }\n});\nexports.queryCancelledOrders = queryCancelledOrders;\nconst _getUniqueOrdersWithExpiry = (allOrders, chainId) => \n// create Map and asign order id to order (key:value) to avoid having duplicated orders form multiple subgraphs\n[...new Map(allOrders.map((order) => [order.id, order])).values()]\n    // sort by `updatedAt` asc so that the most recent one will be used\n    .sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt))\n    // filter out stop limit module\n    .filter((order) => order.module !== stopLimitModule(chainId))\n    // add expiry to order obj\n    .map((order) => {\n    const isExpired = Date.now() >\n        (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n    return Object.assign(Object.assign({}, order), { isExpired });\n});\n\n\n/***/ }),\n\n/***/ 73813:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._getUniqueOrdersWithExpiry = exports.queryPastOrders = exports.queryStopLimitCancelledOrders = exports.queryStopLimitExecutedOrders = exports.queryOpenStopLimitOrders = exports.queryStopLimitOrders = void 0;\nconst tslib_1 = __webpack_require__(70655);\nconst graphql_request_1 = __webpack_require__(66729);\nconst constants_1 = __webpack_require__(89744);\nconst constants_2 = __webpack_require__(39258);\nconst queryStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders);\n    }\n    catch (error) {\n        console.error(error);\n        throw new Error(\"Could not query subgraph for all orders\");\n    }\n});\nexports.queryStopLimitOrders = queryStopLimitOrders;\nconst queryOpenStopLimitOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for open orders\");\n    }\n});\nexports.queryOpenStopLimitOrders = queryOpenStopLimitOrders;\nconst queryStopLimitExecutedOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"executed\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for executed orders\");\n    }\n});\nexports.queryStopLimitExecutedOrders = queryStopLimitExecutedOrders;\nconst queryStopLimitCancelledOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status === \"cancelled\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for cancelled orders\");\n    }\n});\nexports.queryStopLimitCancelledOrders = queryStopLimitCancelledOrders;\nconst queryPastOrders = (owner, chainId) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    try {\n        const dataStopLimitSubgraph = constants_1.SUBGRAPH_URL[chainId]\n            ? yield (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL[chainId], constants_2.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER, {\n                owner: owner.toLowerCase(),\n                module: constants_1.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n            })\n            : { orders: [] };\n        const orders = dataStopLimitSubgraph.orders;\n        return (0, exports._getUniqueOrdersWithExpiry)(orders).filter((order) => order.status !== \"open\");\n    }\n    catch (error) {\n        throw new Error(\"Could not query subgraph for past orders\");\n    }\n});\nexports.queryPastOrders = queryPastOrders;\nconst _getUniqueOrdersWithExpiry = (allOrders) => [...new Map(allOrders.map((order) => [order.id, order])).values()]\n    // sort by `updatedAt` asc so that the most recent one will be used\n    .sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt))\n    // add expiry to order obj\n    .map((order) => {\n    const isExpired = Date.now() >\n        (parseInt(order.createdAt) + constants_1.MAX_LIFETIME_IN_SECONDS) * 1000;\n    return Object.assign(Object.assign({}, order), { isExpired });\n});\nexports._getUniqueOrdersWithExpiry = _getUniqueOrdersWithExpiry;\n\n\n/***/ }),\n\n/***/ 29152:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar extract_files_1 = __webpack_require__(34823);\nvar form_data_1 = __importDefault(__webpack_require__(6230));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nvar isExtractableFileEnhanced = function (value) {\n    return extract_files_1.isExtractableFile(value) ||\n        (value !== null && typeof value === 'object' && typeof value.pipe === 'function');\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nfunction createRequestBody(query, variables, operationName) {\n    var _a = extract_files_1.extractFiles({ query: query, variables: variables, operationName: operationName }, '', isExtractableFileEnhanced), clone = _a.clone, files = _a.files;\n    if (files.size === 0) {\n        if (!Array.isArray(query)) {\n            return JSON.stringify(clone);\n        }\n        if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n            throw new Error('Cannot create request body with given variable type, array expected');\n        }\n        // Batch support\n        var payload = query.reduce(function (accu, currentQuery, index) {\n            accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined });\n            return accu;\n        }, []);\n        return JSON.stringify(payload);\n    }\n    var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n    var form = new Form();\n    form.append('operations', JSON.stringify(clone));\n    var map = {};\n    var i = 0;\n    files.forEach(function (paths) {\n        map[++i] = paths;\n    });\n    form.append('map', JSON.stringify(map));\n    i = 0;\n    files.forEach(function (paths, file) {\n        form.append(\"\" + ++i, file);\n    });\n    return form;\n}\nexports[\"default\"] = createRequestBody;\n//# sourceMappingURL=createRequestBody.js.map\n\n/***/ }),\n\n/***/ 66729:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.gql = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\nvar cross_fetch_1 = __importStar(__webpack_require__(54098)), CrossFetch = cross_fetch_1;\nvar printer_1 = __webpack_require__(91625);\nvar createRequestBody_1 = __importDefault(__webpack_require__(29152));\nvar types_1 = __webpack_require__(66321);\nObject.defineProperty(exports, \"ClientError\", ({ enumerable: true, get: function () { return types_1.ClientError; } }));\n/**\n * Convert the given headers configuration into a plain object.\n */\nvar resolveHeaders = function (headers) {\n    var oHeaders = {};\n    if (headers) {\n        if ((typeof Headers !== 'undefined' && headers instanceof Headers) ||\n            headers instanceof CrossFetch.Headers) {\n            oHeaders = HeadersInstanceToPlainObject(headers);\n        }\n        else if (Array.isArray(headers)) {\n            headers.forEach(function (_a) {\n                var name = _a[0], value = _a[1];\n                oHeaders[name] = value;\n            });\n        }\n        else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\nvar queryCleanner = function (str) { return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim(); };\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\nvar buildGetQueryParams = function (_a) {\n    var query = _a.query, variables = _a.variables, operationName = _a.operationName;\n    if (!Array.isArray(query)) {\n        var search = [\"query=\" + encodeURIComponent(queryCleanner(query))];\n        if (variables) {\n            search.push(\"variables=\" + encodeURIComponent(JSON.stringify(variables)));\n        }\n        if (operationName) {\n            search.push(\"operationName=\" + encodeURIComponent(operationName));\n        }\n        return search.join('&');\n    }\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n        throw new Error('Cannot create query with given variable type, array expected');\n    }\n    // Batch support\n    var payload = query.reduce(function (accu, currentQuery, index) {\n        accu.push({\n            query: queryCleanner(currentQuery),\n            variables: variables ? JSON.stringify(variables[index]) : undefined,\n        });\n        return accu;\n    }, []);\n    return \"query=\" + encodeURIComponent(JSON.stringify(payload));\n};\n/**\n * Fetch data using POST method\n */\nvar post = function (_a) {\n    var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch = _a.fetch, fetchOptions = _a.fetchOptions;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var body;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    body = createRequestBody_1.default(query, variables, operationName);\n                    return [4 /*yield*/, fetch(url, __assign({ method: 'POST', headers: __assign(__assign({}, (typeof body === 'string' ? { 'Content-Type': 'application/json' } : {})), headers), body: body }, fetchOptions))];\n                case 1: return [2 /*return*/, _b.sent()];\n            }\n        });\n    });\n};\n/**\n * Fetch data using GET method\n */\nvar get = function (_a) {\n    var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch = _a.fetch, fetchOptions = _a.fetchOptions;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var queryParams;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    queryParams = buildGetQueryParams({\n                        query: query,\n                        variables: variables,\n                        operationName: operationName,\n                    });\n                    return [4 /*yield*/, fetch(url + \"?\" + queryParams, __assign({ method: 'GET', headers: headers }, fetchOptions))];\n                case 1: return [2 /*return*/, _b.sent()];\n            }\n        });\n    });\n};\n/**\n * todo\n */\nvar GraphQLClient = /** @class */ (function () {\n    function GraphQLClient(url, options) {\n        this.url = url;\n        this.options = options || {};\n    }\n    GraphQLClient.prototype.rawRequest = function (query, variables, requestHeaders) {\n        var _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n        var url = this.url;\n        return makeRequest({\n            url: url,\n            query: query,\n            variables: variables,\n            headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n            operationName: undefined,\n            fetch: fetch,\n            method: method,\n            fetchOptions: fetchOptions,\n        });\n    };\n    /**\n     * Send a GraphQL document to the server.\n     */\n    GraphQLClient.prototype.request = function (document, variables, requestHeaders) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, headers, _b, fetch, _c, method, fetchOptions, url, _d, query, operationName, data;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n                        url = this.url;\n                        _d = resolveRequestDocument(document), query = _d.query, operationName = _d.operationName;\n                        return [4 /*yield*/, makeRequest({\n                                url: url,\n                                query: query,\n                                variables: variables,\n                                headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n                                operationName: operationName,\n                                fetch: fetch,\n                                method: method,\n                                fetchOptions: fetchOptions,\n                            })];\n                    case 1:\n                        data = (_e.sent()).data;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * Send a GraphQL document to the server.\n     */\n    GraphQLClient.prototype.batchRequests = function (documents, requestHeaders) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, headers, _b, fetch, _c, method, fetchOptions, url, queries, variables, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n                        url = this.url;\n                        queries = documents.map(function (_a) {\n                            var document = _a.document;\n                            return resolveRequestDocument(document).query;\n                        });\n                        variables = documents.map(function (_a) {\n                            var variables = _a.variables;\n                            return variables;\n                        });\n                        return [4 /*yield*/, makeRequest({\n                                url: url,\n                                query: queries,\n                                variables: variables,\n                                headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n                                operationName: undefined,\n                                fetch: fetch,\n                                method: method,\n                                fetchOptions: fetchOptions,\n                            })];\n                    case 1:\n                        data = (_d.sent()).data;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    GraphQLClient.prototype.setHeaders = function (headers) {\n        this.options.headers = headers;\n        return this;\n    };\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */\n    GraphQLClient.prototype.setHeader = function (key, value) {\n        var _a;\n        var headers = this.options.headers;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-ignore\n            headers[key] = value;\n        }\n        else {\n            this.options.headers = (_a = {}, _a[key] = value, _a);\n        }\n        return this;\n    };\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */\n    GraphQLClient.prototype.setEndpoint = function (value) {\n        this.url = value;\n        return this;\n    };\n    return GraphQLClient;\n}());\nexports.GraphQLClient = GraphQLClient;\nfunction makeRequest(_a) {\n    var url = _a.url, query = _a.query, variables = _a.variables, headers = _a.headers, operationName = _a.operationName, fetch = _a.fetch, _b = _a.method, method = _b === void 0 ? 'POST' : _b, fetchOptions = _a.fetchOptions;\n    return __awaiter(this, void 0, void 0, function () {\n        var fetcher, isBathchingQuery, response, result, successfullyReceivedData, headers_1, status_1, errorResult;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    fetcher = method.toUpperCase() === 'POST' ? post : get;\n                    isBathchingQuery = Array.isArray(query);\n                    return [4 /*yield*/, fetcher({\n                            url: url,\n                            query: query,\n                            variables: variables,\n                            operationName: operationName,\n                            headers: headers,\n                            fetch: fetch,\n                            fetchOptions: fetchOptions,\n                        })];\n                case 1:\n                    response = _c.sent();\n                    return [4 /*yield*/, getResult(response)];\n                case 2:\n                    result = _c.sent();\n                    successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {\n                        var data = _a.data;\n                        return !data;\n                    }) : !!result.data;\n                    if (response.ok && !result.errors && successfullyReceivedData) {\n                        headers_1 = response.headers, status_1 = response.status;\n                        return [2 /*return*/, __assign(__assign({}, (isBathchingQuery ? { data: result } : result)), { headers: headers_1, status: status_1 })];\n                    }\n                    else {\n                        errorResult = typeof result === 'string' ? { error: result } : result;\n                        throw new types_1.ClientError(__assign(__assign({}, errorResult), { status: response.status, headers: response.headers }), { query: query, variables: variables });\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\n/**\n * todo\n */\nfunction rawRequest(url, query, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n            client = new GraphQLClient(url);\n            return [2 /*return*/, client.rawRequest(query, variables, requestHeaders)];\n        });\n    });\n}\nexports.rawRequest = rawRequest;\n/**\n * Send a GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\nfunction request(url, document, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n            client = new GraphQLClient(url);\n            return [2 /*return*/, client.request(document, variables, requestHeaders)];\n        });\n    });\n}\nexports.request = request;\n/**\n * Send a batch of GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nfunction batchRequests(url, documents, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n        var client;\n        return __generator(this, function (_a) {\n            client = new GraphQLClient(url);\n            return [2 /*return*/, client.batchRequests(documents, requestHeaders)];\n        });\n    });\n}\nexports.batchRequests = batchRequests;\nexports[\"default\"] = request;\n/**\n * todo\n */\nfunction getResult(response) {\n    var contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.startsWith('application/json')) {\n        return response.json();\n    }\n    else {\n        return response.text();\n    }\n}\n/**\n * helpers\n */\nfunction resolveRequestDocument(document) {\n    var _a;\n    if (typeof document === 'string')\n        return { query: document };\n    var operationName = undefined;\n    var operationDefinitions = document.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; });\n    if (operationDefinitions.length === 1) {\n        operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    return { query: printer_1.print(document), operationName: operationName };\n}\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nfunction gql(chunks) {\n    var variables = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        variables[_i - 1] = arguments[_i];\n    }\n    return chunks.reduce(function (accumulator, chunk, index) { return \"\" + accumulator + chunk + (index in variables ? variables[index] : ''); }, '');\n}\nexports.gql = gql;\n/**\n * Convert Headers instance into regular object\n */\nfunction HeadersInstanceToPlainObject(headers) {\n    var o = {};\n    headers.forEach(function (v, k) {\n        o[k] = v;\n    });\n    return o;\n}\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 66321:\n/***/ (function(__unused_webpack_module, exports) {\n\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientError = void 0;\nvar ClientError = /** @class */ (function (_super) {\n    __extends(ClientError, _super);\n    function ClientError(response, request) {\n        var _this = this;\n        var message = ClientError.extractMessage(response) + \": \" + JSON.stringify({\n            response: response,\n            request: request,\n        });\n        _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, ClientError.prototype);\n        _this.response = response;\n        _this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(_this, ClientError);\n        }\n        return _this;\n    }\n    ClientError.extractMessage = function (response) {\n        try {\n            return response.errors[0].message;\n        }\n        catch (e) {\n            return \"GraphQL Error (Code: \" + response.status + \")\";\n        }\n    };\n    return ClientError;\n}(Error));\nexports.ClientError = ClientError;\n//# sourceMappingURL=types.js.map\n\n/***/ }),\n\n/***/ 81804:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"BaseContract\": function() { return /* reexport */ lib_esm/* BaseContract */.VZ; },\n  \"BigNumber\": function() { return /* reexport */ bignumber/* BigNumber */.O$; },\n  \"Contract\": function() { return /* reexport */ lib_esm/* Contract */.CH; },\n  \"ContractFactory\": function() { return /* reexport */ lib_esm/* ContractFactory */.lV; },\n  \"FixedNumber\": function() { return /* reexport */ fixednumber/* FixedNumber */.xs; },\n  \"Signer\": function() { return /* reexport */ abstract_signer_lib_esm.Signer; },\n  \"VoidSigner\": function() { return /* reexport */ abstract_signer_lib_esm.VoidSigner; },\n  \"Wallet\": function() { return /* reexport */ Wallet; },\n  \"Wordlist\": function() { return /* reexport */ Wordlist; },\n  \"constants\": function() { return /* reexport */ constants_lib_esm_namespaceObject; },\n  \"errors\": function() { return /* reexport */ logger_lib_esm/* ErrorCode */.jK; },\n  \"ethers\": function() { return /* reexport */ ethers_namespaceObject; },\n  \"getDefaultProvider\": function() { return /* reexport */ getDefaultProvider; },\n  \"logger\": function() { return /* reexport */ ethers_logger; },\n  \"providers\": function() { return /* reexport */ providers_lib_esm_namespaceObject; },\n  \"utils\": function() { return /* reexport */ lib_esm_utils_namespaceObject; },\n  \"version\": function() { return /* reexport */ ethers_lib_esm_version_version; },\n  \"wordlists\": function() { return /* reexport */ wordlists; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@ethersproject/constants/lib.esm/index.js\nvar constants_lib_esm_namespaceObject = {};\n__webpack_require__.r(constants_lib_esm_namespaceObject);\n__webpack_require__.d(constants_lib_esm_namespaceObject, {\n  \"AddressZero\": function() { return addresses/* AddressZero */.d; },\n  \"EtherSymbol\": function() { return EtherSymbol; },\n  \"HashZero\": function() { return hashes/* HashZero */.R; },\n  \"MaxInt256\": function() { return bignumbers/* MaxInt256 */.PS; },\n  \"MaxUint256\": function() { return bignumbers/* MaxUint256 */.Bz; },\n  \"MinInt256\": function() { return bignumbers/* MinInt256 */.$B; },\n  \"NegativeOne\": function() { return bignumbers/* NegativeOne */.tL; },\n  \"One\": function() { return bignumbers/* One */.fh; },\n  \"Two\": function() { return bignumbers/* Two */.Py; },\n  \"WeiPerEther\": function() { return bignumbers/* WeiPerEther */.Ce; },\n  \"Zero\": function() { return bignumbers/* Zero */._Y; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/index.js\nvar providers_lib_esm_namespaceObject = {};\n__webpack_require__.r(providers_lib_esm_namespaceObject);\n__webpack_require__.d(providers_lib_esm_namespaceObject, {\n  \"AlchemyProvider\": function() { return AlchemyProvider; },\n  \"AlchemyWebSocketProvider\": function() { return AlchemyWebSocketProvider; },\n  \"BaseProvider\": function() { return BaseProvider; },\n  \"CloudflareProvider\": function() { return CloudflareProvider; },\n  \"EtherscanProvider\": function() { return EtherscanProvider; },\n  \"FallbackProvider\": function() { return FallbackProvider; },\n  \"Formatter\": function() { return Formatter; },\n  \"InfuraProvider\": function() { return InfuraProvider; },\n  \"InfuraWebSocketProvider\": function() { return InfuraWebSocketProvider; },\n  \"IpcProvider\": function() { return IpcProvider; },\n  \"JsonRpcBatchProvider\": function() { return JsonRpcBatchProvider; },\n  \"JsonRpcProvider\": function() { return JsonRpcProvider; },\n  \"JsonRpcSigner\": function() { return JsonRpcSigner; },\n  \"NodesmithProvider\": function() { return NodesmithProvider; },\n  \"PocketProvider\": function() { return PocketProvider; },\n  \"Provider\": function() { return abstract_provider_lib_esm.Provider; },\n  \"Resolver\": function() { return Resolver; },\n  \"StaticJsonRpcProvider\": function() { return StaticJsonRpcProvider; },\n  \"UrlJsonRpcProvider\": function() { return UrlJsonRpcProvider; },\n  \"Web3Provider\": function() { return Web3Provider; },\n  \"WebSocketProvider\": function() { return WebSocketProvider; },\n  \"getDefaultProvider\": function() { return getDefaultProvider; },\n  \"getNetwork\": function() { return networks_lib_esm/* getNetwork */.H; },\n  \"isCommunityResourcable\": function() { return isCommunityResourcable; },\n  \"isCommunityResource\": function() { return isCommunityResource; },\n  \"showThrottleMessage\": function() { return showThrottleMessage; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/@ethersproject/base64/lib.esm/index.js\nvar base64_lib_esm_namespaceObject = {};\n__webpack_require__.r(base64_lib_esm_namespaceObject);\n__webpack_require__.d(base64_lib_esm_namespaceObject, {\n  \"decode\": function() { return base64/* decode */.J; },\n  \"encode\": function() { return base64/* encode */.c; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/ethers/lib.esm/utils.js\nvar lib_esm_utils_namespaceObject = {};\n__webpack_require__.r(lib_esm_utils_namespaceObject);\n__webpack_require__.d(lib_esm_utils_namespaceObject, {\n  \"AbiCoder\": function() { return abi_coder/* AbiCoder */.R; },\n  \"ConstructorFragment\": function() { return fragments/* ConstructorFragment */.Xg; },\n  \"ErrorFragment\": function() { return fragments/* ErrorFragment */.IC; },\n  \"EventFragment\": function() { return fragments/* EventFragment */.QV; },\n  \"FormatTypes\": function() { return fragments/* FormatTypes */.pc; },\n  \"Fragment\": function() { return fragments/* Fragment */.HY; },\n  \"FunctionFragment\": function() { return fragments/* FunctionFragment */.YW; },\n  \"HDNode\": function() { return HDNode; },\n  \"Indexed\": function() { return lib_esm_interface/* Indexed */.Hk; },\n  \"Interface\": function() { return lib_esm_interface/* Interface */.vU; },\n  \"LogDescription\": function() { return lib_esm_interface/* LogDescription */.CC; },\n  \"Logger\": function() { return logger_lib_esm/* Logger */.Yd; },\n  \"ParamType\": function() { return fragments/* ParamType */._R; },\n  \"RLP\": function() { return rlp_lib_esm; },\n  \"SigningKey\": function() { return signing_key_lib_esm/* SigningKey */.Et; },\n  \"SupportedAlgorithm\": function() { return types/* SupportedAlgorithm */.p; },\n  \"TransactionDescription\": function() { return lib_esm_interface/* TransactionDescription */.vk; },\n  \"TransactionTypes\": function() { return transactions_lib_esm/* TransactionTypes */.em; },\n  \"UnicodeNormalizationForm\": function() { return utf8/* UnicodeNormalizationForm */.Uj; },\n  \"Utf8ErrorFuncs\": function() { return utf8/* Utf8ErrorFuncs */.te; },\n  \"Utf8ErrorReason\": function() { return utf8/* Utf8ErrorReason */.Uw; },\n  \"_TypedDataEncoder\": function() { return typed_data/* TypedDataEncoder */.E; },\n  \"_fetchData\": function() { return web_lib_esm/* _fetchData */.MY; },\n  \"_toEscapedUtf8String\": function() { return utf8/* _toEscapedUtf8String */.U$; },\n  \"accessListify\": function() { return transactions_lib_esm/* accessListify */.z7; },\n  \"arrayify\": function() { return bytes_lib_esm/* arrayify */.lE; },\n  \"base58\": function() { return basex_lib_esm/* Base58 */.eU; },\n  \"base64\": function() { return base64_lib_esm_namespaceObject; },\n  \"checkProperties\": function() { return properties_lib_esm/* checkProperties */.uj; },\n  \"checkResultErrors\": function() { return abstract_coder/* checkResultErrors */.BR; },\n  \"commify\": function() { return units_lib_esm/* commify */.Fn; },\n  \"computeAddress\": function() { return transactions_lib_esm/* computeAddress */.db; },\n  \"computeHmac\": function() { return sha2/* computeHmac */.Gy; },\n  \"computePublicKey\": function() { return signing_key_lib_esm/* computePublicKey */.VW; },\n  \"concat\": function() { return bytes_lib_esm/* concat */.zo; },\n  \"deepCopy\": function() { return properties_lib_esm/* deepCopy */.p$; },\n  \"defaultAbiCoder\": function() { return abi_coder/* defaultAbiCoder */.$; },\n  \"defaultPath\": function() { return defaultPath; },\n  \"defineReadOnly\": function() { return properties_lib_esm/* defineReadOnly */.zG; },\n  \"entropyToMnemonic\": function() { return entropyToMnemonic; },\n  \"fetchJson\": function() { return web_lib_esm/* fetchJson */.rd; },\n  \"formatBytes32String\": function() { return lib_esm_bytes32/* formatBytes32String */.s; },\n  \"formatEther\": function() { return units_lib_esm/* formatEther */.dF; },\n  \"formatUnits\": function() { return units_lib_esm/* formatUnits */.bM; },\n  \"getAccountPath\": function() { return getAccountPath; },\n  \"getAddress\": function() { return address_lib_esm/* getAddress */.Kn; },\n  \"getContractAddress\": function() { return address_lib_esm/* getContractAddress */.CR; },\n  \"getCreate2Address\": function() { return address_lib_esm/* getCreate2Address */.hB; },\n  \"getIcapAddress\": function() { return address_lib_esm/* getIcapAddress */.vU; },\n  \"getJsonWalletAddress\": function() { return getJsonWalletAddress; },\n  \"getStatic\": function() { return properties_lib_esm/* getStatic */.tu; },\n  \"hashMessage\": function() { return hashMessage; },\n  \"hexConcat\": function() { return bytes_lib_esm/* hexConcat */.xs; },\n  \"hexDataLength\": function() { return bytes_lib_esm/* hexDataLength */.E1; },\n  \"hexDataSlice\": function() { return bytes_lib_esm/* hexDataSlice */.p3; },\n  \"hexStripZeros\": function() { return bytes_lib_esm/* hexStripZeros */.Ou; },\n  \"hexValue\": function() { return bytes_lib_esm/* hexValue */.$P; },\n  \"hexZeroPad\": function() { return bytes_lib_esm/* hexZeroPad */.$m; },\n  \"hexlify\": function() { return bytes_lib_esm/* hexlify */.Dv; },\n  \"id\": function() { return id.id; },\n  \"isAddress\": function() { return address_lib_esm/* isAddress */.UJ; },\n  \"isBytes\": function() { return bytes_lib_esm/* isBytes */._t; },\n  \"isBytesLike\": function() { return bytes_lib_esm/* isBytesLike */.Zq; },\n  \"isHexString\": function() { return bytes_lib_esm/* isHexString */.A7; },\n  \"isValidMnemonic\": function() { return isValidMnemonic; },\n  \"isValidName\": function() { return namehash/* isValidName */.r; },\n  \"joinSignature\": function() { return bytes_lib_esm/* joinSignature */.gV; },\n  \"keccak256\": function() { return keccak256_lib_esm/* keccak256 */.w; },\n  \"mnemonicToEntropy\": function() { return mnemonicToEntropy; },\n  \"mnemonicToSeed\": function() { return mnemonicToSeed; },\n  \"namehash\": function() { return namehash/* namehash */.V; },\n  \"nameprep\": function() { return idna/* nameprep */.Ll; },\n  \"parseBytes32String\": function() { return lib_esm_bytes32/* parseBytes32String */.F; },\n  \"parseEther\": function() { return units_lib_esm/* parseEther */.fi; },\n  \"parseTransaction\": function() { return transactions_lib_esm/* parse */.Qc; },\n  \"parseUnits\": function() { return units_lib_esm/* parseUnits */.vz; },\n  \"poll\": function() { return web_lib_esm/* poll */.$l; },\n  \"randomBytes\": function() { return randomBytes; },\n  \"recoverAddress\": function() { return transactions_lib_esm/* recoverAddress */.RJ; },\n  \"recoverPublicKey\": function() { return signing_key_lib_esm/* recoverPublicKey */.LO; },\n  \"resolveProperties\": function() { return properties_lib_esm/* resolveProperties */.mE; },\n  \"ripemd160\": function() { return sha2/* ripemd160 */.bP; },\n  \"serializeTransaction\": function() { return transactions_lib_esm/* serialize */.qC; },\n  \"sha256\": function() { return sha2/* sha256 */.JQ; },\n  \"sha512\": function() { return sha2/* sha512 */.o; },\n  \"shallowCopy\": function() { return properties_lib_esm/* shallowCopy */.DC; },\n  \"shuffled\": function() { return shuffled; },\n  \"solidityKeccak256\": function() { return keccak256; },\n  \"solidityPack\": function() { return pack; },\n  \"soliditySha256\": function() { return sha256; },\n  \"splitSignature\": function() { return bytes_lib_esm/* splitSignature */.N; },\n  \"stripZeros\": function() { return bytes_lib_esm/* stripZeros */.G1; },\n  \"toUtf8Bytes\": function() { return utf8/* toUtf8Bytes */.Y0; },\n  \"toUtf8CodePoints\": function() { return utf8/* toUtf8CodePoints */.XL; },\n  \"toUtf8String\": function() { return utf8/* toUtf8String */.ZN; },\n  \"verifyMessage\": function() { return verifyMessage; },\n  \"verifyTypedData\": function() { return verifyTypedData; },\n  \"zeroPad\": function() { return bytes_lib_esm/* zeroPad */.Bu; }\n});\n\n// NAMESPACE OBJECT: ./node_modules/ethers/lib.esm/ethers.js\nvar ethers_namespaceObject = {};\n__webpack_require__.r(ethers_namespaceObject);\n__webpack_require__.d(ethers_namespaceObject, {\n  \"BaseContract\": function() { return lib_esm/* BaseContract */.VZ; },\n  \"BigNumber\": function() { return bignumber/* BigNumber */.O$; },\n  \"Contract\": function() { return lib_esm/* Contract */.CH; },\n  \"ContractFactory\": function() { return lib_esm/* ContractFactory */.lV; },\n  \"FixedNumber\": function() { return fixednumber/* FixedNumber */.xs; },\n  \"Signer\": function() { return abstract_signer_lib_esm.Signer; },\n  \"VoidSigner\": function() { return abstract_signer_lib_esm.VoidSigner; },\n  \"Wallet\": function() { return Wallet; },\n  \"Wordlist\": function() { return Wordlist; },\n  \"constants\": function() { return constants_lib_esm_namespaceObject; },\n  \"errors\": function() { return logger_lib_esm/* ErrorCode */.jK; },\n  \"getDefaultProvider\": function() { return getDefaultProvider; },\n  \"logger\": function() { return ethers_logger; },\n  \"providers\": function() { return providers_lib_esm_namespaceObject; },\n  \"utils\": function() { return lib_esm_utils_namespaceObject; },\n  \"version\": function() { return ethers_lib_esm_version_version; },\n  \"wordlists\": function() { return wordlists; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@ethersproject/contracts/lib.esm/index.js + 1 modules\nvar lib_esm = __webpack_require__(64146);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\nvar bignumber = __webpack_require__(2593);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\nvar fixednumber = __webpack_require__(20335);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/abstract-signer/lib.esm/index.js + 1 modules\nvar abstract_signer_lib_esm = __webpack_require__(48088);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/address/lib.esm/index.js + 1 modules\nvar address_lib_esm = __webpack_require__(19485);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/abstract-provider/lib.esm/index.js + 1 modules\nvar abstract_provider_lib_esm = __webpack_require__(81556);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js + 1 modules\nvar bytes_lib_esm = __webpack_require__(16441);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/keccak256/lib.esm/index.js\nvar keccak256_lib_esm = __webpack_require__(38197);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/strings/lib.esm/utf8.js + 1 modules\nvar utf8 = __webpack_require__(29251);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/message.js\n\n\n\nconst messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nfunction hashMessage(message) {\n    if (typeof (message) === \"string\") {\n        message = (0,utf8/* toUtf8Bytes */.Y0)(message);\n    }\n    return (0,keccak256_lib_esm/* keccak256 */.w)((0,bytes_lib_esm/* concat */.zo)([\n        (0,utf8/* toUtf8Bytes */.Y0)(messagePrefix),\n        (0,utf8/* toUtf8Bytes */.Y0)(String(message.length)),\n        message\n    ]));\n}\n//# sourceMappingURL=message.js.map\n// EXTERNAL MODULE: ./node_modules/@ethersproject/hash/lib.esm/typed-data.js\nvar typed_data = __webpack_require__(67827);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/basex/lib.esm/index.js\nvar basex_lib_esm = __webpack_require__(57727);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/sha2/lib.esm/sha2.js + 1 modules\nvar sha2 = __webpack_require__(2006);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js\n\n\n\nfunction pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n    password = (0,bytes_lib_esm/* arrayify */.lE)(password);\n    salt = (0,bytes_lib_esm/* arrayify */.lE)(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen);\n    const block1 = new Uint8Array(salt.length + 4);\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n    let r;\n    let T;\n    for (let i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = (i >> 24) & 0xff;\n        block1[salt.length + 1] = (i >> 16) & 0xff;\n        block1[salt.length + 2] = (i >> 8) & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n        //let U = createHmac(password).update(block1).digest();\n        let U = (0,bytes_lib_esm/* arrayify */.lE)((0,sha2/* computeHmac */.Gy)(hashAlgorithm, password, block1));\n        if (!hLen) {\n            hLen = U.length;\n            T = new Uint8Array(hLen);\n            l = Math.ceil(keylen / hLen);\n            r = keylen - (l - 1) * hLen;\n        }\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n        for (let j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = (0,bytes_lib_esm/* arrayify */.lE)((0,sha2/* computeHmac */.Gy)(hashAlgorithm, password, U));\n            for (let k = 0; k < hLen; k++)\n                T[k] ^= U[k];\n        }\n        const destPos = (i - 1) * hLen;\n        const len = (i === l ? r : hLen);\n        //T.copy(DK, destPos, 0, len)\n        DK.set((0,bytes_lib_esm/* arrayify */.lE)(T).slice(0, len), destPos);\n    }\n    return (0,bytes_lib_esm/* hexlify */.Dv)(DK);\n}\n//# sourceMappingURL=pbkdf2.js.map\n// EXTERNAL MODULE: ./node_modules/@ethersproject/properties/lib.esm/index.js + 1 modules\nvar properties_lib_esm = __webpack_require__(6881);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/index.js + 2 modules\nvar signing_key_lib_esm = __webpack_require__(67669);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/sha2/lib.esm/types.js\nvar types = __webpack_require__(21261);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/transactions/lib.esm/index.js + 1 modules\nvar transactions_lib_esm = __webpack_require__(83875);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/hash/lib.esm/id.js\nvar id = __webpack_require__(32046);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules\nvar logger_lib_esm = __webpack_require__(1581);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/_version.js\nconst version = \"wordlists/5.5.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\n\n\n\nconst logger = new logger_lib_esm/* Logger */.Yd(version);\nclass Wordlist {\n    constructor(locale) {\n        logger.checkAbstract(new.target, Wordlist);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    split(mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n    join(words) {\n        return words.join(\" \");\n    }\n    static check(wordlist) {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return (0,id.id)(words.join(\"\\n\") + \"\\n\");\n    }\n    static register(lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        (0,properties_lib_esm/* defineReadOnly */.zG)(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    }\n}\n//# sourceMappingURL=wordlist.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/lang-en.js\n\n\nconst words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\nlet wordlist = null;\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\nclass LangEn extends Wordlist {\n    constructor() {\n        super(\"en\");\n    }\n    getWord(index) {\n        loadWords(this);\n        return wordlist[index];\n    }\n    getWordIndex(word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    }\n}\nconst langEn = new LangEn();\nWordlist.register(langEn);\n\n//# sourceMappingURL=lang-en.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js\n\n\nconst wordlists = {\n    en: langEn\n};\n//# sourceMappingURL=wordlists.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hdnode/lib.esm/_version.js\nconst _version_version = \"hdnode/5.5.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hdnode/lib.esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst lib_esm_logger = new logger_lib_esm/* Logger */.Yd(_version_version);\nconst N = bignumber/* BigNumber.from */.O$.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nconst MasterSecret = (0,utf8/* toUtf8Bytes */.Y0)(\"Bitcoin seed\");\nconst HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits);\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n    return (0,bytes_lib_esm/* hexZeroPad */.$m)((0,bytes_lib_esm/* hexlify */.Dv)(value), 32);\n}\nfunction base58check(data) {\n    return basex_lib_esm/* Base58.encode */.eU.encode((0,bytes_lib_esm/* concat */.zo)([data, (0,bytes_lib_esm/* hexDataSlice */.p3)((0,sha2/* sha256 */.JQ)((0,sha2/* sha256 */.JQ)(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n    if (wordlist == null) {\n        return wordlists.en;\n    }\n    if (typeof (wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            lib_esm_logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n    return wordlist;\n}\nconst _constructorGuard = {};\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n;\nclass HDNode {\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n        lib_esm_logger.checkNew(new.target, HDNode);\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n        if (privateKey) {\n            const signingKey = new signing_key_lib_esm/* SigningKey */.Et(privateKey);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"privateKey\", signingKey.privateKey);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"publicKey\", signingKey.compressedPublicKey);\n        }\n        else {\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"privateKey\", null);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"publicKey\", (0,bytes_lib_esm/* hexlify */.Dv)(publicKey));\n        }\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"parentFingerprint\", parentFingerprint);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"fingerprint\", (0,bytes_lib_esm/* hexDataSlice */.p3)((0,sha2/* ripemd160 */.bP)((0,sha2/* sha256 */.JQ)(this.publicKey)), 0, 4));\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"address\", (0,transactions_lib_esm/* computeAddress */.db)(this.publicKey));\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"chainCode\", chainCode);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"index\", index);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"depth\", depth);\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"mnemonic\", null);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"path\", null);\n        }\n        else if (typeof (mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"mnemonic\", null);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"path\", mnemonicOrPath);\n        }\n        else {\n            // From a fully qualified source\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"mnemonic\", mnemonicOrPath);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        if (this.depth >= 256) {\n            throw new Error(\"Depth too large!\");\n        }\n        return base58check((0,bytes_lib_esm/* concat */.zo)([\n            ((this.privateKey != null) ? \"0x0488ADE4\" : \"0x0488B21E\"),\n            (0,bytes_lib_esm/* hexlify */.Dv)(this.depth),\n            this.parentFingerprint,\n            (0,bytes_lib_esm/* hexZeroPad */.$m)((0,bytes_lib_esm/* hexlify */.Dv)(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? (0,bytes_lib_esm/* concat */.zo)([\"0x00\", this.privateKey]) : this.publicKey),\n        ]));\n    }\n    neuter() {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n    _derive(index) {\n        if (index > 0xffffffff) {\n            throw new Error(\"invalid index - \" + String(index));\n        }\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n        }\n        const data = new Uint8Array(37);\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n            // Data = 0x00 || ser_256(k_par)\n            data.set((0,bytes_lib_esm/* arrayify */.lE)(this.privateKey), 1);\n            // Hardened path\n            if (path) {\n                path += \"'\";\n            }\n        }\n        else {\n            // Data = ser_p(point(k_par))\n            data.set((0,bytes_lib_esm/* arrayify */.lE)(this.publicKey));\n        }\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n        }\n        const I = (0,bytes_lib_esm/* arrayify */.lE)((0,sha2/* computeHmac */.Gy)(types/* SupportedAlgorithm.sha512 */.p.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n        // The private key\n        let ki = null;\n        // The public key\n        let Ki = null;\n        if (this.privateKey) {\n            ki = bytes32(bignumber/* BigNumber.from */.O$.from(IL).add(this.privateKey).mod(N));\n        }\n        else {\n            const ek = new signing_key_lib_esm/* SigningKey */.Et((0,bytes_lib_esm/* hexlify */.Dv)(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n        let mnemonicOrPath = path;\n        const srcMnemonic = this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n    derivePath(path) {\n        const components = path.split(\"/\");\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n        if (components[0] === \"m\") {\n            components.shift();\n        }\n        let result = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(HardenedBit + index);\n            }\n            else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(index);\n            }\n            else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n        return result;\n    }\n    static _fromSeed(seed, mnemonic) {\n        const seedArray = (0,bytes_lib_esm/* arrayify */.lE)(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n        }\n        const I = (0,bytes_lib_esm/* arrayify */.lE)((0,sha2/* computeHmac */.Gy)(types/* SupportedAlgorithm.sha512 */.p.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n    static fromMnemonic(mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n    static fromSeed(seed) {\n        return HDNode._fromSeed(seed, null);\n    }\n    static fromExtendedKey(extendedKey) {\n        const bytes = basex_lib_esm/* Base58.decode */.eU.decode(extendedKey);\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            lib_esm_logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n        const depth = bytes[4];\n        const parentFingerprint = (0,bytes_lib_esm/* hexlify */.Dv)(bytes.slice(5, 9));\n        const index = parseInt((0,bytes_lib_esm/* hexlify */.Dv)(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = (0,bytes_lib_esm/* hexlify */.Dv)(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch ((0,bytes_lib_esm/* hexlify */.Dv)(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, (0,bytes_lib_esm/* hexlify */.Dv)(key), parentFingerprint, chainCode, index, depth, null);\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNode(_constructorGuard, (0,bytes_lib_esm/* hexlify */.Dv)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n        return lib_esm_logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\nfunction mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n        password = \"\";\n    }\n    const salt = (0,utf8/* toUtf8Bytes */.Y0)(\"mnemonic\" + password, utf8/* UnicodeNormalizationForm.NFKD */.Uj.NFKD);\n    return pbkdf2((0,utf8/* toUtf8Bytes */.Y0)(mnemonic, utf8/* UnicodeNormalizationForm.NFKD */.Uj.NFKD), salt, 2048, 64, \"sha512\");\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = getWordlist(wordlist);\n    lib_esm_logger.checkNormalize();\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) {\n        throw new Error(\"invalid mnemonic\");\n    }\n    const entropy = (0,bytes_lib_esm/* arrayify */.lE)(new Uint8Array(Math.ceil(11 * words.length / 8)));\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) {\n            throw new Error(\"invalid mnemonic\");\n        }\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = (0,bytes_lib_esm/* arrayify */.lE)((0,sha2/* sha256 */.JQ)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n    return (0,bytes_lib_esm/* hexlify */.Dv)(entropy.slice(0, entropyBits / 8));\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n    wordlist = getWordlist(wordlist);\n    entropy = (0,bytes_lib_esm/* arrayify */.lE)(entropy);\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n    const indices = [0];\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = (0,bytes_lib_esm/* arrayify */.lE)((0,sha2/* sha256 */.JQ)(entropy))[0] & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\n}\nfunction isValidMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nfunction getAccountPath(index) {\n    if (typeof (index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        lib_esm_logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${index}'/0/0`;\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/random/lib.esm/_version.js\nconst lib_esm_version_version = \"random/5.5.1\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/random/lib.esm/random.js\n\n\n\n\nconst random_logger = new logger_lib_esm/* Logger */.Yd(lib_esm_version_version);\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof __webpack_require__.g !== 'undefined') {\n        return __webpack_require__.g;\n    }\n    throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nlet random_crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!random_crypto || !random_crypto.getRandomValues) {\n    random_logger.warn(\"WARNING: Missing strong random number source\");\n    random_crypto = {\n        getRandomValues: function (buffer) {\n            return random_logger.throwError(\"no secure random source avaialble\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\nfunction randomBytes(length) {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        random_logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n    const result = new Uint8Array(length);\n    random_crypto.getRandomValues(result);\n    return (0,bytes_lib_esm/* arrayify */.lE)(result);\n}\n;\n//# sourceMappingURL=random.js.map\n// EXTERNAL MODULE: ./node_modules/@ethersproject/json-wallets/node_modules/aes-js/index.js\nvar aes_js = __webpack_require__(48709);\nvar aes_js_default = /*#__PURE__*/__webpack_require__.n(aes_js);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/_version.js\nconst json_wallets_lib_esm_version_version = \"json-wallets/5.5.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/utils.js\n\n\n\nfunction looseArrayify(hexString) {\n    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\n        hexString = '0x' + hexString;\n    }\n    return (0,bytes_lib_esm/* arrayify */.lE)(hexString);\n}\nfunction zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n        value = '0' + value;\n    }\n    return value;\n}\nfunction getPassword(password) {\n    if (typeof (password) === 'string') {\n        return (0,utf8/* toUtf8Bytes */.Y0)(password, utf8/* UnicodeNormalizationForm.NFKC */.Uj.NFKC);\n    }\n    return (0,bytes_lib_esm/* arrayify */.lE)(password);\n}\nfunction searchPath(object, path) {\n    let currentChild = object;\n    const comps = path.toLowerCase().split('/');\n    for (let i = 0; i < comps.length; i++) {\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n            if (key.toLowerCase() === comps[i]) {\n                matchingChild = currentChild[key];\n                break;\n            }\n        }\n        // Didn't find one. :'(\n        if (matchingChild === null) {\n            return null;\n        }\n        // Now check this child...\n        currentChild = matchingChild;\n    }\n    return currentChild;\n}\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nfunction uuidV4(randomBytes) {\n    const bytes = (0,bytes_lib_esm/* arrayify */.lE)(randomBytes);\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    const value = (0,bytes_lib_esm/* hexlify */.Dv)(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34),\n    ].join(\"-\");\n}\n//# sourceMappingURL=utils.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js\n\n\n\n\n\n\n\n\n\n\nconst crowdsale_logger = new logger_lib_esm/* Logger */.Yd(json_wallets_lib_esm_version_version);\n\nclass CrowdsaleAccount extends properties_lib_esm/* Description */.dk {\n    isCrowdsaleAccount(value) {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n// See: https://github.com/ethereum/pyethsaletool\nfunction decrypt(json, password) {\n    const data = JSON.parse(json);\n    password = getPassword(password);\n    // Ethereum Address\n    const ethaddr = (0,address_lib_esm/* getAddress */.Kn)(searchPath(data, \"ethaddr\"));\n    // Encrypted Seed\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        crowdsale_logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n    const key = (0,bytes_lib_esm/* arrayify */.lE)(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new (aes_js_default()).ModeOfOperation.cbc(key, iv);\n    const seed = aes_js_default().padding.pkcs7.strip((0,bytes_lib_esm/* arrayify */.lE)(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    const seedHexBytes = (0,utf8/* toUtf8Bytes */.Y0)(seedHex);\n    const privateKey = (0,keccak256_lib_esm/* keccak256 */.w)(seedHexBytes);\n    return new CrowdsaleAccount({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\n//# sourceMappingURL=crowdsale.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js\n\n\nfunction isCrowdsaleWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    return (data.encseed && data.ethaddr);\n}\nfunction isKeystoreWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nfunction getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return (0,address_lib_esm/* getAddress */.Kn)(JSON.parse(json).ethaddr);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    if (isKeystoreWallet(json)) {\n        try {\n            return (0,address_lib_esm/* getAddress */.Kn)(JSON.parse(json).address);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=inspect.js.map\n// EXTERNAL MODULE: ./node_modules/scrypt-js/scrypt.js\nvar scrypt = __webpack_require__(17635);\nvar scrypt_default = /*#__PURE__*/__webpack_require__.n(scrypt);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst keystore_logger = new logger_lib_esm/* Logger */.Yd(json_wallets_lib_esm_version_version);\n// Exported Types\nfunction hasMnemonic(value) {\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\n}\nclass KeystoreAccount extends properties_lib_esm/* Description */.dk {\n    isKeystoreAccount(value) {\n        return !!(value && value._isKeystoreAccount);\n    }\n}\nfunction _decrypt(data, key, ciphertext) {\n    const cipher = searchPath(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n        const counter = new (aes_js_default()).Counter(iv);\n        const aesCtr = new (aes_js_default()).ModeOfOperation.ctr(key, counter);\n        return (0,bytes_lib_esm/* arrayify */.lE)(aesCtr.decrypt(ciphertext));\n    }\n    return null;\n}\nfunction _getAccount(data, key) {\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n    const computedMAC = (0,bytes_lib_esm/* hexlify */.Dv)((0,keccak256_lib_esm/* keccak256 */.w)((0,bytes_lib_esm/* concat */.zo)([key.slice(16, 32), ciphertext]))).substring(2);\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n    if (!privateKey) {\n        keystore_logger.throwError(\"unsupported cipher\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n    const mnemonicKey = key.slice(32, 64);\n    const address = (0,transactions_lib_esm/* computeAddress */.db)(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") {\n            check = \"0x\" + check;\n        }\n        if ((0,address_lib_esm/* getAddress */.Kn)(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n    const account = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: (0,bytes_lib_esm/* hexlify */.Dv)(privateKey)\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n        const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n        const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n        const mnemonicCounter = new (aes_js_default()).Counter(mnemonicIv);\n        const mnemonicAesCtr = new (aes_js_default()).ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n        const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n        const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n        const entropy = (0,bytes_lib_esm/* arrayify */.lE)(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n        try {\n            const mnemonic = entropyToMnemonic(entropy, locale);\n            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n            account.mnemonic = node.mnemonic;\n        }\n        catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== logger_lib_esm/* Logger.errors.INVALID_ARGUMENT */.Yd.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n    return new KeystoreAccount(account);\n}\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n    return (0,bytes_lib_esm/* arrayify */.lE)(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction keystore_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n    const passwordBytes = getPassword(password);\n    const kdf = searchPath(data, \"crypto/kdf\");\n    if (kdf && typeof (kdf) === \"string\") {\n        const throwError = function (name, value) {\n            return keystore_logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        };\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n            const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n            const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n            // Check for all required parameters\n            if (!N || !r || !p) {\n                throwError(\"kdf\", kdf);\n            }\n            // Make sure N is a power of 2\n            if ((N & (N - 1)) !== 0) {\n                throwError(\"N\", N);\n            }\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n        }\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            let prfFunc = null;\n            const prf = searchPath(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            }\n            else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            }\n            else {\n                throwError(\"prf\", prf);\n            }\n            const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n    return keystore_logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\nfunction decryptSync(json, password) {\n    const data = JSON.parse(json);\n    const key = _computeKdfKey(data, password, pbkdf2Sync, (scrypt_default()).syncScrypt);\n    return _getAccount(data, key);\n}\nfunction keystore_decrypt(json, password, progressCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = JSON.parse(json);\n        const key = yield _computeKdfKey(data, password, keystore_pbkdf2, (scrypt_default()).scrypt, progressCallback);\n        return _getAccount(data, key);\n    });\n}\nfunction encrypt(account, password, options, progressCallback) {\n    try {\n        // Check the address matches the private key\n        if ((0,address_lib_esm/* getAddress */.Kn)(account.address) !== (0,transactions_lib_esm/* computeAddress */.db)(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            const mnemonic = account.mnemonic;\n            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n    // The options are optional, so adjust the call as needed\n    if (typeof (options) === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) {\n        options = {};\n    }\n    const privateKey = (0,bytes_lib_esm/* arrayify */.lE)(account.privateKey);\n    const passwordBytes = getPassword(password);\n    let entropy = null;\n    let path = null;\n    let locale = null;\n    if (hasMnemonic(account)) {\n        const srcMnemonic = account.mnemonic;\n        entropy = (0,bytes_lib_esm/* arrayify */.lE)(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n    let client = options.client;\n    if (!client) {\n        client = \"ethers.js\";\n    }\n    // Check/generate the salt\n    let salt = null;\n    if (options.salt) {\n        salt = (0,bytes_lib_esm/* arrayify */.lE)(options.salt);\n    }\n    else {\n        salt = randomBytes(32);\n        ;\n    }\n    // Override initialization vector\n    let iv = null;\n    if (options.iv) {\n        iv = (0,bytes_lib_esm/* arrayify */.lE)(options.iv);\n        if (iv.length !== 16) {\n            throw new Error(\"invalid iv\");\n        }\n    }\n    else {\n        iv = randomBytes(16);\n    }\n    // Override the uuid\n    let uuidRandom = null;\n    if (options.uuid) {\n        uuidRandom = (0,bytes_lib_esm/* arrayify */.lE)(options.uuid);\n        if (uuidRandom.length !== 16) {\n            throw new Error(\"invalid uuid\");\n        }\n    }\n    else {\n        uuidRandom = randomBytes(16);\n    }\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt_default().scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {\n        key = (0,bytes_lib_esm/* arrayify */.lE)(key);\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        const derivedKey = key.slice(0, 16);\n        const macPrefix = key.slice(16, 32);\n        // This will be used to encrypt the mnemonic phrase (if any)\n        const mnemonicKey = key.slice(32, 64);\n        // Encrypt the private key\n        const counter = new (aes_js_default()).Counter(iv);\n        const aesCtr = new (aes_js_default()).ModeOfOperation.ctr(derivedKey, counter);\n        const ciphertext = (0,bytes_lib_esm/* arrayify */.lE)(aesCtr.encrypt(privateKey));\n        // Compute the message authentication code, used to check the password\n        const mac = (0,keccak256_lib_esm/* keccak256 */.w)((0,bytes_lib_esm/* concat */.zo)([macPrefix, ciphertext]));\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        const data = {\n            address: account.address.substring(2).toLowerCase(),\n            id: uuidV4(uuidRandom),\n            version: 3,\n            Crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: (0,bytes_lib_esm/* hexlify */.Dv)(iv).substring(2),\n                },\n                ciphertext: (0,bytes_lib_esm/* hexlify */.Dv)(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: (0,bytes_lib_esm/* hexlify */.Dv)(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            const mnemonicIv = randomBytes(16);\n            const mnemonicCounter = new (aes_js_default()).Counter(mnemonicIv);\n            const mnemonicAesCtr = new (aes_js_default()).ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            const mnemonicCiphertext = (0,bytes_lib_esm/* arrayify */.lE)(mnemonicAesCtr.encrypt(entropy));\n            const now = new Date();\n            const timestamp = (now.getUTCFullYear() + \"-\" +\n                zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                zpad(now.getUTCDate(), 2) + \"T\" +\n                zpad(now.getUTCHours(), 2) + \"-\" +\n                zpad(now.getUTCMinutes(), 2) + \"-\" +\n                zpad(now.getUTCSeconds(), 2) + \".0Z\");\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n                mnemonicCounter: (0,bytes_lib_esm/* hexlify */.Dv)(mnemonicIv).substring(2),\n                mnemonicCiphertext: (0,bytes_lib_esm/* hexlify */.Dv)(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n        return JSON.stringify(data);\n    });\n}\n//# sourceMappingURL=keystore.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/index.js\n\n\n\n\nfunction decryptJsonWallet(json, password, progressCallback) {\n    if (isCrowdsaleWallet(json)) {\n        if (progressCallback) {\n            progressCallback(0);\n        }\n        const account = decrypt(json, password);\n        if (progressCallback) {\n            progressCallback(1);\n        }\n        return Promise.resolve(account);\n    }\n    if (isKeystoreWallet(json)) {\n        return keystore_decrypt(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nfunction decryptJsonWalletSync(json, password) {\n    if (isCrowdsaleWallet(json)) {\n        return decrypt(json, password);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptSync(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n}\n\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/wallet/lib.esm/_version.js\nconst wallet_lib_esm_version_version = \"wallet/5.5.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/wallet/lib.esm/index.js\n\nvar lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst wallet_lib_esm_logger = new logger_lib_esm/* Logger */.Yd(wallet_lib_esm_version_version);\nfunction isAccount(value) {\n    return (value != null && (0,bytes_lib_esm/* isHexString */.A7)(value.privateKey, 32) && value.address != null);\n}\nfunction lib_esm_hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nclass Wallet extends abstract_signer_lib_esm.Signer {\n    constructor(privateKey, provider) {\n        wallet_lib_esm_logger.checkNew(new.target, Wallet);\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new signing_key_lib_esm/* SigningKey */.Et(privateKey.privateKey);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_signingKey\", () => signingKey);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"address\", (0,transactions_lib_esm/* computeAddress */.db)(this.publicKey));\n            if (this.address !== (0,address_lib_esm/* getAddress */.Kn)(privateKey.address)) {\n                wallet_lib_esm_logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (lib_esm_hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_mnemonic\", () => ({\n                    phrase: srcMnemonic.phrase,\n                    path: srcMnemonic.path || defaultPath,\n                    locale: srcMnemonic.locale || \"en\"\n                }));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if ((0,transactions_lib_esm/* computeAddress */.db)(node.privateKey) !== this.address) {\n                    wallet_lib_esm_logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_mnemonic\", () => null);\n            }\n        }\n        else {\n            if (signing_key_lib_esm/* SigningKey.isSigningKey */.Et.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    wallet_lib_esm_logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_signingKey\", () => privateKey);\n            }\n            else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof (privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n                const signingKey = new signing_key_lib_esm/* SigningKey */.Et(privateKey);\n                (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_signingKey\", () => signingKey);\n            }\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_mnemonic\", () => null);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"address\", (0,transactions_lib_esm/* computeAddress */.db)(this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !abstract_provider_lib_esm.Provider.isProvider(provider)) {\n            wallet_lib_esm_logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"provider\", provider || null);\n    }\n    get mnemonic() { return this._mnemonic(); }\n    get privateKey() { return this._signingKey().privateKey; }\n    get publicKey() { return this._signingKey().publicKey; }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return (0,properties_lib_esm/* resolveProperties */.mE)(transaction).then((tx) => {\n            if (tx.from != null) {\n                if ((0,address_lib_esm/* getAddress */.Kn)(tx.from) !== this.address) {\n                    wallet_lib_esm_logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest((0,keccak256_lib_esm/* keccak256 */.w)((0,transactions_lib_esm/* serialize */.qC)(tx)));\n            return (0,transactions_lib_esm/* serialize */.qC)(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return lib_esm_awaiter(this, void 0, void 0, function* () {\n            return (0,bytes_lib_esm/* joinSignature */.gV)(this._signingKey().signDigest(hashMessage(message)));\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return lib_esm_awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names\n            const populated = yield typed_data/* TypedDataEncoder.resolveNames */.E.resolveNames(domain, types, value, (name) => {\n                if (this.provider == null) {\n                    wallet_lib_esm_logger.throwError(\"cannot resolve ENS names without a provider\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"resolveName\",\n                        value: name\n                    });\n                }\n                return this.provider.resolveName(name);\n            });\n            return (0,bytes_lib_esm/* joinSignature */.gV)(this._signingKey().signDigest(typed_data/* TypedDataEncoder.hash */.E.hash(populated.domain, types, populated.value)));\n        });\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return encrypt(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options) {\n        let entropy = randomBytes(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = (0,bytes_lib_esm/* arrayify */.lE)((0,bytes_lib_esm/* hexDataSlice */.p3)((0,keccak256_lib_esm/* keccak256 */.w)((0,bytes_lib_esm/* concat */.zo)([entropy, options.extraEntropy])), 0, 16));\n        }\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\nfunction verifyMessage(message, signature) {\n    return (0,transactions_lib_esm/* recoverAddress */.RJ)(hashMessage(message), signature);\n}\nfunction verifyTypedData(domain, types, value, signature) {\n    return (0,transactions_lib_esm/* recoverAddress */.RJ)(typed_data/* TypedDataEncoder.hash */.E.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=index.js.map\n// EXTERNAL MODULE: ./node_modules/@ethersproject/constants/lib.esm/addresses.js\nvar addresses = __webpack_require__(9279);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\nvar bignumbers = __webpack_require__(21046);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/constants/lib.esm/hashes.js\nvar hashes = __webpack_require__(57218);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/strings.js\n// NFKC (composed)             // (decomposed)\nconst EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\n//# sourceMappingURL=strings.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/index.js\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n// EXTERNAL MODULE: ./node_modules/@ethersproject/networks/lib.esm/index.js + 1 modules\nvar networks_lib_esm = __webpack_require__(45710);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/hash/lib.esm/namehash.js\nvar namehash = __webpack_require__(84706);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/web/lib.esm/index.js + 2 modules\nvar web_lib_esm = __webpack_require__(37707);\n// EXTERNAL MODULE: ./node_modules/bech32/index.js\nvar bech32 = __webpack_require__(92882);\nvar bech32_default = /*#__PURE__*/__webpack_require__.n(bech32);\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/_version.js\nconst providers_lib_esm_version_version = \"providers/5.5.3\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/formatter.js\n\n\n\n\n\n\n\n\n\nconst formatter_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\nclass Formatter {\n    constructor() {\n        formatter_logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: address,\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = (0,properties_lib_esm/* shallowCopy */.DC)(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return (0,transactions_lib_esm/* accessListify */.z7)(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return bignumber/* BigNumber.from */.O$.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return bignumber/* BigNumber.from */.O$.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return bignumber/* BigNumber.from */.O$.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if ((0,bytes_lib_esm/* isHexString */.A7)(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return formatter_logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return (0,address_lib_esm/* getAddress */.Kn)(value);\n    }\n    callAddress(value) {\n        if (!(0,bytes_lib_esm/* isHexString */.A7)(value, 32)) {\n            return null;\n        }\n        const address = (0,address_lib_esm/* getAddress */.Kn)((0,bytes_lib_esm/* hexDataSlice */.p3)(value, 12));\n        return (address === addresses/* AddressZero */.d) ? null : address;\n    }\n    contractAddress(value) {\n        return (0,address_lib_esm/* getContractAddress */.CR)(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || (0,bytes_lib_esm/* isHexString */.A7)(blockTag)) {\n            return (0,bytes_lib_esm/* hexValue */.$P)(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if ((0,bytes_lib_esm/* hexDataLength */.E1)(result) !== 32) {\n            return formatter_logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = bignumber/* BigNumber.from */.O$.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!(0,bytes_lib_esm/* isHexString */.A7)(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return (0,bytes_lib_esm/* hexZeroPad */.$m)(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : bignumber/* BigNumber.from */.O$.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && bignumber/* BigNumber.from */.O$.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if ((0,bytes_lib_esm/* isHexString */.A7)(chainId)) {\n                chainId = bignumber/* BigNumber.from */.O$.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if ((0,bytes_lib_esm/* isHexString */.A7)(chainId)) {\n                chainId = bignumber/* BigNumber.from */.O$.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return (0,transactions_lib_esm/* parse */.Qc)(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = bignumber/* BigNumber.from */.O$.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        formatter_logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    formatter_logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                formatter_logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nfunction isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nfunction isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nfunction showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/base-provider.js\n\nvar base_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst base_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if ((0,bytes_lib_esm/* hexDataLength */.E1)(topic) !== 32) {\n        base_provider_logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if ((0,bytes_lib_esm/* hexDataLength */.E1)(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (abstract_provider_lib_esm.ForkEvent.isForkEvent(eventName)) {\n        base_provider_logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nclass Event {\n    constructor(tag, listener, once) {\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"tag\", tag);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"listener\", listener);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"once\", once);\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return (0,bytes_lib_esm/* hexZeroPad */.$m)(bignumber/* BigNumber.from */.O$.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return basex_lib_esm/* Base58.encode */.eU.encode((0,bytes_lib_esm/* concat */.zo)([data, (0,bytes_lib_esm/* hexDataSlice */.p3)((0,sha2/* sha256 */.JQ)((0,sha2/* sha256 */.JQ)(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result) {\n    try {\n        return (0,utf8/* toUtf8String */.ZN)(_parseBytes(result));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = bignumber/* BigNumber.from */.O$.from((0,bytes_lib_esm/* hexDataSlice */.p3)(result, 0, 32)).toNumber();\n    const length = bignumber/* BigNumber.from */.O$.from((0,bytes_lib_esm/* hexDataSlice */.p3)(result, offset, offset + 32)).toNumber();\n    return (0,bytes_lib_esm/* hexDataSlice */.p3)(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        base_provider_logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nclass Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"provider\", provider);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"name\", name);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"address\", provider.formatter.address(address));\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    _fetchBytes(selector, parameters) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                data: (0,bytes_lib_esm/* hexConcat */.xs)([selector, (0,namehash/* namehash */.V)(this.name), (parameters || \"0x\")])\n            };\n            try {\n                return _parseBytes(yield this.provider.call(tx));\n            }\n            catch (error) {\n                if (error.code === logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                return null;\n            }\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            base_provider_logger.throwError(`unsupported coin type: ${coinType}`, logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = (0,bytes_lib_esm/* arrayify */.lE)(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode((0,bytes_lib_esm/* concat */.zo)([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode((0,bytes_lib_esm/* concat */.zo)([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32_default().toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32_default().encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const transaction = {\n                        to: this.address,\n                        data: (\"0x3b3b57de\" + (0,namehash/* namehash */.V)(this.name).substring(2))\n                    };\n                    const hexBytes = yield this.provider.call(transaction);\n                    // No address\n                    if (hexBytes === \"0x\" || hexBytes === hashes/* HashZero */.R) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(hexBytes);\n                }\n                catch (error) {\n                    if (error.code === logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                base_provider_logger.throwError(`invalid or unsupported coin data`, logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = (0,bytes_lib_esm/* hexZeroPad */.$m)(bignumber/* BigNumber.from */.O$.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: (0,bytes_lib_esm/* hexConcat */.xs)([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = bignumber/* BigNumber.from */.O$.from(yield this.provider.call({\n                                    to: addr, data: (0,bytes_lib_esm/* hexConcat */.xs)([\"0x00fdd58e\", (0,bytes_lib_esm/* hexZeroPad */.$m)(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: (0,bytes_lib_esm/* hexConcat */.xs)([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx));\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield (0,web_lib_esm/* fetchJson */.rd)(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + basex_lib_esm/* Base58.encode */.eU.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            return base_provider_logger.throwError(`invalid or unsupported content hash data`, logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = (0,utf8/* toUtf8Bytes */.Y0)(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = (0,bytes_lib_esm/* concat */.zo)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = (0,bytes_lib_esm/* concat */.zo)([keyBytes, (0,bytes_lib_esm/* hexZeroPad */.$m)(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", (0,bytes_lib_esm/* hexlify */.Dv)(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return (0,utf8/* toUtf8String */.ZN)(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nclass BaseProvider extends abstract_provider_lib_esm.Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        base_provider_logger.checkNew(new.target, abstract_provider_lib_esm.Provider);\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = (0,properties_lib_esm/* getStatic */.tu)(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                base_provider_logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    base_provider_logger.throwError(\"no network detected\", logger_lib_esm/* Logger.errors.UNKNOWN_ERROR */.Yd.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return (0,web_lib_esm/* poll */.$l)(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === logger_lib_esm/* Logger.errors.NETWORK_ERROR */.Yd.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return (0,networks_lib_esm/* getNetwork */.H)((network == null) ? \"homestead\" : network);\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = (0,properties_lib_esm/* resolveProperties */.mE)({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = bignumber/* BigNumber.from */.O$.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                base_provider_logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", base_provider_logger.makeError(\"network block skew detected\", logger_lib_esm/* Logger.errors.NETWORK_ERROR */.Yd.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        const filter = event.filter;\n                        filter.fromBlock = this._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        const runner = this.getLogs(filter).then((logs) => {\n                            if (logs.length === 0) {\n                                return;\n                            }\n                            logs.forEach((log) => {\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                this.emit(filter, log);\n                            });\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            return base_provider_logger.throwError(\"provider does not support network detection\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = base_provider_logger.makeError(\"underlying network changed\", logger_lib_esm/* Logger.errors.NETWORK_ERROR */.Yd.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => base_provider_awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => base_provider_awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(base_provider_logger.makeError(\"transaction was replaced\", logger_lib_esm/* Logger.errors.TRANSACTION_REPLACED */.Yd.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(base_provider_logger.makeError(\"timeout exceeded\", logger_lib_esm/* Logger.errors.TIMEOUT */.Yd.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return bignumber/* BigNumber.from */.O$.from(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield (0,properties_lib_esm/* resolveProperties */.mE)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return bignumber/* BigNumber.from */.O$.from(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield (0,properties_lib_esm/* resolveProperties */.mE)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return bignumber/* BigNumber.from */.O$.from(result).toNumber();\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield (0,properties_lib_esm/* resolveProperties */.mE)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return (0,bytes_lib_esm/* hexlify */.Dv)(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield (0,properties_lib_esm/* resolveProperties */.mE)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => (0,bytes_lib_esm/* hexValue */.$P)(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return (0,bytes_lib_esm/* hexlify */.Dv)(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && (0,bytes_lib_esm/* hexDataLength */.E1)(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            base_provider_logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", logger_lib_esm/* Logger.errors.UNKNOWN_ERROR */.Yd.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => base_provider_awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                base_provider_logger.throwError(\"transaction failed\", logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => (0,bytes_lib_esm/* hexlify */.Dv)(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? bignumber/* BigNumber.from */.O$.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? (0,bytes_lib_esm/* hexlify */.Dv)(v) : null));\n            });\n            return this.formatter.transactionRequest(yield (0,properties_lib_esm/* resolveProperties */.mE)(tx));\n        });\n    }\n    _getFilter(filter) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield (0,properties_lib_esm/* resolveProperties */.mE)(result));\n        });\n    }\n    call(transaction, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield (0,properties_lib_esm/* resolveProperties */.mE)({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"call\", params);\n            try {\n                return (0,bytes_lib_esm/* hexlify */.Dv)(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    estimateGas(transaction) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield (0,properties_lib_esm/* resolveProperties */.mE)({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return bignumber/* BigNumber.from */.O$.from(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                base_provider_logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                base_provider_logger.throwError(\"ENS name not configured\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if ((0,bytes_lib_esm/* isHexString */.A7)(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if ((0,bytes_lib_esm/* isHexString */.A7)(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    base_provider_logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return (0,web_lib_esm/* poll */.$l)(() => base_provider_awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return (0,web_lib_esm/* poll */.$l)(() => base_provider_awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return (0,web_lib_esm/* poll */.$l)(() => base_provider_awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield (0,properties_lib_esm/* resolveProperties */.mE)({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    base_provider_logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            try {\n                const address = yield this._getResolver(name);\n                if (address == null) {\n                    return null;\n                }\n                return new Resolver(this, address, name);\n            }\n            catch (error) {\n                if (error.code === logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _getResolver(name) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            // Get the resolver from the blockchain\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                base_provider_logger.throwError(\"network does not support ENS\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: network.name });\n            }\n            // keccak256(\"resolver(bytes32)\")\n            const transaction = {\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + (0,namehash/* namehash */.V)(name).substring(2))\n            };\n            try {\n                return this.formatter.callAddress(yield this.call(transaction));\n            }\n            catch (error) {\n                if (error.code === logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    resolveName(name) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if ((0,bytes_lib_esm/* isHexString */.A7)(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                base_provider_logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resovler\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddress = yield this._getResolver(reverseName);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            let bytes = (0,bytes_lib_esm/* arrayify */.lE)(yield this.call({\n                to: resolverAddress,\n                data: (\"0x691f3431\" + (0,namehash/* namehash */.V)(reverseName).substring(2))\n            }));\n            // Strip off the dynamic string pointer (0x20)\n            if (bytes.length < 32 || !bignumber/* BigNumber.from */.O$.from(bytes.slice(0, 32)).eq(32)) {\n                return null;\n            }\n            bytes = bytes.slice(32);\n            // Not a length-prefixed string\n            if (bytes.length < 32) {\n                return null;\n            }\n            // Get the length of the string (from the length-prefix)\n            const length = bignumber/* BigNumber.from */.O$.from(bytes.slice(0, 32)).toNumber();\n            bytes = bytes.slice(32);\n            // Length longer than available data\n            if (length > bytes.length) {\n                return null;\n            }\n            const name = (0,utf8/* toUtf8String */.ZN)(bytes.slice(0, length));\n            // Make sure the reverse record matches the foward record\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if ((0,bytes_lib_esm/* isHexString */.A7)(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(reverseName);\n                if (!resolverAddress) {\n                    return null;\n                }\n                resolver = new Resolver(this, resolverAddress, \"_\", address);\n            }\n            else {\n                // ENS name; forward lookup\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return base_provider_logger.throwError(method + \" not implemented\", logger_lib_esm/* Logger.errors.NOT_IMPLEMENTED */.Yd.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\n\nvar json_rpc_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst json_rpc_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction checkError(method, error, params) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && (0,bytes_lib_esm/* isHexString */.A7)(e.data)) {\n            return e.data;\n        }\n        json_rpc_provider_logger.throwError(\"missing revert data in call exception\", logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n    let message = error.message;\n    if (error.code === logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    const transaction = params.transaction || params.signedTransaction;\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        json_rpc_provider_logger.throwError(\"insufficient funds for intrinsic transaction cost\", logger_lib_esm/* Logger.errors.INSUFFICIENT_FUNDS */.Yd.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        json_rpc_provider_logger.throwError(\"nonce has already been used\", logger_lib_esm/* Logger.errors.NONCE_EXPIRED */.Yd.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        json_rpc_provider_logger.throwError(\"replacement fee too low\", logger_lib_esm/* Logger.errors.REPLACEMENT_UNDERPRICED */.Yd.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        json_rpc_provider_logger.throwError(\"legacy pre-eip-155 transactions not supported\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        json_rpc_provider_logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", logger_lib_esm/* Logger.errors.UNPREDICTABLE_GAS_LIMIT */.Yd.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst json_rpc_provider_constructorGuard = {};\nclass JsonRpcSigner extends abstract_signer_lib_esm.Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        json_rpc_provider_logger.checkNew(new.target, JsonRpcSigner);\n        super();\n        if (constructorGuard !== json_rpc_provider_constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_index\", addressOrIndex);\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_address\", null);\n        }\n        else {\n            json_rpc_provider_logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return json_rpc_provider_logger.throwError(\"cannot alter JSON-RPC Signer connection\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(json_rpc_provider_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                json_rpc_provider_logger.throwError(\"unknown account #\" + this._index, logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = (0,properties_lib_esm/* shallowCopy */.DC)(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = (0,properties_lib_esm/* shallowCopy */.DC)(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n                if (to == null) {\n                    return null;\n                }\n                const address = yield this.provider.resolveName(to);\n                if (address == null) {\n                    json_rpc_provider_logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            }));\n        }\n        return (0,properties_lib_esm/* resolveProperties */.mE)({\n            tx: (0,properties_lib_esm/* resolveProperties */.mE)(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    json_rpc_provider_logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return json_rpc_provider_logger.throwError(\"signing transactions is unsupported\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield (0,web_lib_esm/* poll */.$l)(() => json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n                    const tx = yield this.provider.getTransaction(hash);\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\n                }), { oncePoll: this.provider });\n            }\n            catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? (0,utf8/* toUtf8Bytes */.Y0)(message) : message);\n            const address = yield this.getAddress();\n            return yield this.provider.send(\"personal_sign\", [(0,bytes_lib_esm/* hexlify */.Dv)(data), address.toLowerCase()]);\n        });\n    }\n    _legacySignMessage(message) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? (0,utf8/* toUtf8Bytes */.Y0)(message) : message);\n            const address = yield this.getAddress();\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), (0,bytes_lib_esm/* hexlify */.Dv)(data)]);\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield typed_data/* TypedDataEncoder.resolveNames */.E.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            return yield this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(typed_data/* TypedDataEncoder.getPayload */.E.getPayload(populated.domain, types, populated.value))\n            ]);\n        });\n    }\n    unlock(password) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nclass JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        json_rpc_provider_logger.checkNew(new.target, JsonRpcProvider);\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = (0,properties_lib_esm/* getStatic */.tu)(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"connection\", Object.freeze((0,properties_lib_esm/* shallowCopy */.DC)(url)));\n        }\n        this._nextId = 42;\n    }\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = (0,properties_lib_esm/* getStatic */.tu)(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(bignumber/* BigNumber.from */.O$.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return json_rpc_provider_logger.throwError(\"could not detect network\", logger_lib_esm/* Logger.errors.NETWORK_ERROR */.Yd.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return json_rpc_provider_logger.throwError(\"could not detect network\", logger_lib_esm/* Logger.errors.NETWORK_ERROR */.Yd.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(json_rpc_provider_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: (0,properties_lib_esm/* deepCopy */.p$)(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = (0,web_lib_esm/* fetchJson */.rd)(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = (0,properties_lib_esm/* getStatic */.tu)(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = (0,properties_lib_esm/* getStatic */.tu)(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && bignumber/* BigNumber.from */.O$.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-a559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = (0,properties_lib_esm/* shallowCopy */.DC)(params);\n                            params.transaction = (0,properties_lib_esm/* shallowCopy */.DC)(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                json_rpc_provider_logger.throwError(method + \" not implemented\", logger_lib_esm/* Logger.errors.NOT_IMPLEMENTED */.Yd.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = (0,properties_lib_esm/* shallowCopy */.DC)(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        (0,properties_lib_esm/* checkProperties */.uj)(transaction, allowed);\n        const result = {};\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = (0,bytes_lib_esm/* hexValue */.$P)(transaction[key]);\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = (0,bytes_lib_esm/* hexlify */.Dv)(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = (0,transactions_lib_esm/* accessListify */.z7)(transaction.accessList);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=json-rpc-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/ws.js\n\n\n\nlet WS = null;\ntry {\n    WS = WebSocket;\n    if (WS == null) {\n        throw new Error(\"inject please\");\n    }\n}\ncatch (error) {\n    const logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n    WS = function () {\n        logger.throwError(\"WebSockets not supported in this environment\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    };\n}\n//export default WS;\n//module.exports = WS;\n\n//# sourceMappingURL=ws.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\n\nvar websocket_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nconst websocket_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nclass WebSocketProvider extends JsonRpcProvider {\n    constructor(url, network) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            websocket_provider_logger.throwError(\"WebSocketProvider does not support 'any' network yet\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        super(url, network);\n        this._pollingInterval = -1;\n        this._wsReady = false;\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_websocket\", new WS(this.connection.url));\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_requests\", {});\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_subs\", {});\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_subIds\", {});\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_detectNetwork\", super.detectNetwork());\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n        this._websocket.onmessage = (messageEvent) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n                }\n                else {\n                    let error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        (0,properties_lib_esm/* defineReadOnly */.zG)(error, \"code\", result.error.code || null);\n                        (0,properties_lib_esm/* defineReadOnly */.zG)(error, \"response\", data);\n                    }\n                    else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n                }\n            }\n            else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            }\n            else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n    }\n    detectNetwork() {\n        return this._detectNetwork;\n    }\n    get pollingInterval() {\n        return 0;\n    }\n    resetEventsBlock(blockNumber) {\n        websocket_provider_logger.throwError(\"cannot reset events block on WebSocketProvider\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n    set pollingInterval(value) {\n        websocket_provider_logger.throwError(\"cannot set polling interval on WebSocketProvider\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n    poll() {\n        return websocket_provider_awaiter(this, void 0, void 0, function* () {\n            return null;\n        });\n    }\n    set polling(value) {\n        if (!value) {\n            return;\n        }\n        websocket_provider_logger.throwError(\"cannot set polling on WebSocketProvider\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n    send(method, params) {\n        const rid = NextId++;\n        return new Promise((resolve, reject) => {\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n            this._requests[String(rid)] = { callback, payload };\n            if (this._wsReady) {\n                this._websocket.send(payload);\n            }\n        });\n    }\n    static defaultUrl() {\n        return \"ws:/\\/localhost:8546\";\n    }\n    _subscribe(tag, param, processFunc) {\n        return websocket_provider_awaiter(this, void 0, void 0, function* () {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param) => {\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = { tag, processFunc };\n        });\n    }\n    _startEvent(event) {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [\"newHeads\"], (result) => {\n                    const blockNumber = bignumber/* BigNumber.from */.O$.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\"newPendingTransactions\"], (result) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], (result) => {\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\": {\n                const emitReceipt = (event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) {\n                            return;\n                        }\n                        this.emit(hash, receipt);\n                    });\n                };\n                // In case it is already mined\n                emitReceipt(event);\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [\"newHeads\"], (result) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n    _stopEvent(event) {\n        let tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        }\n        else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then((subId) => {\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [subId]);\n        });\n    }\n    destroy() {\n        return websocket_provider_awaiter(this, void 0, void 0, function* () {\n            // Wait until we have connected before trying to disconnect\n            if (this._websocket.readyState === WS.CONNECTING) {\n                yield (new Promise((resolve) => {\n                    this._websocket.onopen = function () {\n                        resolve(true);\n                    };\n                    this._websocket.onerror = function () {\n                        resolve(false);\n                    };\n                }));\n            }\n            // Hangup\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n            this._websocket.close(1000);\n        });\n    }\n}\n//# sourceMappingURL=websocket-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\n\nvar url_json_rpc_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst url_json_rpc_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nclass StaticJsonRpcProvider extends JsonRpcProvider {\n    detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: { get: () => super.detectNetwork }\n        });\n        return url_json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) {\n                    url_json_rpc_provider_logger.throwError(\"no network detected\", logger_lib_esm/* Logger.errors.UNKNOWN_ERROR */.Yd.errors.UNKNOWN_ERROR, {});\n                }\n                // If still not set, set it\n                if (this._network == null) {\n                    // A static network does not support \"any\"\n                    (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"_network\", network);\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return network;\n        });\n    }\n}\nclass UrlJsonRpcProvider extends StaticJsonRpcProvider {\n    constructor(network, apiKey) {\n        url_json_rpc_provider_logger.checkAbstract(new.target, UrlJsonRpcProvider);\n        // Normalize the Network and API Key\n        network = (0,properties_lib_esm/* getStatic */.tu)(new.target, \"getNetwork\")(network);\n        apiKey = (0,properties_lib_esm/* getStatic */.tu)(new.target, \"getApiKey\")(apiKey);\n        const connection = (0,properties_lib_esm/* getStatic */.tu)(new.target, \"getUrl\")(network, apiKey);\n        super(connection, network);\n        if (typeof (apiKey) === \"string\") {\n            (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"apiKey\", apiKey);\n        }\n        else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                (0,properties_lib_esm/* defineReadOnly */.zG)(this, key, apiKey[key]);\n            });\n        }\n    }\n    _startPending() {\n        url_json_rpc_provider_logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n    isCommunityResource() {\n        return false;\n    }\n    getSigner(address) {\n        return url_json_rpc_provider_logger.throwError(\"API provider does not support signing\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n    }\n    listAccounts() {\n        return Promise.resolve([]);\n    }\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey) {\n        return apiKey;\n    }\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network, apiKey) {\n        return url_json_rpc_provider_logger.throwError(\"not implemented; sub-classes must override getUrl\", logger_lib_esm/* Logger.errors.NOT_IMPLEMENTED */.Yd.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n//# sourceMappingURL=url-json-rpc-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js\n\n\n\n\n\n\nconst alchemy_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nclass AlchemyWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new AlchemyProvider(network, apiKey);\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        super(url, provider.network);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"apiKey\", provider.apiKey);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\nclass AlchemyProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            alchemy_provider_logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-kovan\":\n                host = \"opt-kovan.g.alchemy.com/v2/\";\n                break;\n            default:\n                alchemy_provider_logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=alchemy-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js\n\nvar cloudflare_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst cloudflare_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\nclass CloudflareProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey != null) {\n            cloudflare_provider_logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n                cloudflare_provider_logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return host;\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return cloudflare_provider_awaiter(this, void 0, void 0, function* () {\n            // The Cloudflare provider does not support eth_blockNumber,\n            // so we get the latest block and pull it from that\n            if (method === \"getBlockNumber\") {\n                const block = yield _super.perform.call(this, \"getBlock\", { blockTag: \"latest\" });\n                return block.number;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n}\n//# sourceMappingURL=cloudflare-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js\n\nvar etherscan_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nconst etherscan_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n    const result = {};\n    for (let key in transaction) {\n        if (transaction[key] == null) {\n            continue;\n        }\n        let value = transaction[key];\n        if (key === \"type\" && value === 0) {\n            continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n            value = (0,bytes_lib_esm/* hexValue */.$P)((0,bytes_lib_esm/* hexlify */.Dv)(value));\n        }\n        else if (key === \"accessList\") {\n            value = \"[\" + (0,transactions_lib_esm/* accessListify */.z7)(value).map((set) => {\n                return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n            }).join(\",\") + \"]\";\n        }\n        else {\n            value = (0,bytes_lib_esm/* hexlify */.Dv)(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\nfunction etherscan_provider_getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || result.message != \"OK\") {\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        const error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nconst etherscan_provider_defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\nfunction etherscan_provider_checkError(method, error, transaction) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR) {\n        const e = error.error;\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) {\n                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n            }\n            if ((0,bytes_lib_esm/* isHexString */.A7)(data)) {\n                return data;\n            }\n            etherscan_provider_logger.throwError(\"missing revert data in call exception\", logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR) {\n        if (error.error && typeof (error.error.message) === \"string\") {\n            message = error.error.message;\n        }\n        else if (typeof (error.body) === \"string\") {\n            message = error.body;\n        }\n        else if (typeof (error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        etherscan_provider_logger.throwError(\"insufficient funds for intrinsic transaction cost\", logger_lib_esm/* Logger.errors.INSUFFICIENT_FUNDS */.Yd.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        etherscan_provider_logger.throwError(\"nonce has already been used\", logger_lib_esm/* Logger.errors.NONCE_EXPIRED */.Yd.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n        etherscan_provider_logger.throwError(\"replacement fee too low\", logger_lib_esm/* Logger.errors.REPLACEMENT_UNDERPRICED */.Yd.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        etherscan_provider_logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", logger_lib_esm/* Logger.errors.UNPREDICTABLE_GAS_LIMIT */.Yd.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nclass EtherscanProvider extends BaseProvider {\n    constructor(network, apiKey) {\n        etherscan_provider_logger.checkNew(new.target, EtherscanProvider);\n        super(network);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"baseUrl\", this.getBaseUrl());\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"apiKey\", apiKey || etherscan_provider_defaultApiKey);\n    }\n    getBaseUrl() {\n        switch (this.network ? this.network.name : \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n        return etherscan_provider_logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n    getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${key}=${value}`;\n            }\n            return accum;\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : \"\");\n        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n    }\n    getPostUrl() {\n        return `${this.baseUrl}/api`;\n    }\n    getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    fetch(module, params, post) {\n        return etherscan_provider_awaiter(this, void 0, void 0, function* () {\n            const url = (post ? this.getPostUrl() : this.getUrl(module, params));\n            const payload = (post ? this.getPostData(module, params) : null);\n            const procFunc = (module === \"proxy\") ? getJsonResult : etherscan_provider_getResult;\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt, url) => {\n                    if (this.isCommunityResource()) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n            let payloadStr = null;\n            if (payload) {\n                connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n                payloadStr = Object.keys(payload).map((key) => {\n                    return `${key}=${payload[key]}`;\n                }).join(\"&\");\n            }\n            const result = yield (0,web_lib_esm/* fetchJson */.rd)(connection, payloadStr, procFunc || getJsonResult);\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: (0,properties_lib_esm/* deepCopy */.p$)(result),\n                provider: this\n            });\n            return result;\n        });\n    }\n    detectNetwork() {\n        return etherscan_provider_awaiter(this, void 0, void 0, function* () {\n            return this.network;\n        });\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return etherscan_provider_awaiter(this, void 0, void 0, function* () {\n            switch (method) {\n                case \"getBlockNumber\":\n                    return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n                case \"getGasPrice\":\n                    return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n                case \"getBalance\":\n                    // Returns base-10 result\n                    return this.fetch(\"account\", {\n                        action: \"balance\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getTransactionCount\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionCount\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getCode\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getCode\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getStorageAt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getStorageAt\",\n                        address: params.address,\n                        position: params.position,\n                        tag: params.blockTag\n                    });\n                case \"sendTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_sendRawTransaction\",\n                        hex: params.signedTransaction\n                    }, true).catch((error) => {\n                        return etherscan_provider_checkError(\"sendTransaction\", error, params.signedTransaction);\n                    });\n                case \"getBlock\":\n                    if (params.blockTag) {\n                        return this.fetch(\"proxy\", {\n                            action: \"eth_getBlockByNumber\",\n                            tag: params.blockTag,\n                            boolean: (params.includeTransactions ? \"true\" : \"false\")\n                        });\n                    }\n                    throw new Error(\"getBlock by blockHash not implemented\");\n                case \"getTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionByHash\",\n                        txhash: params.transactionHash\n                    });\n                case \"getTransactionReceipt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionReceipt\",\n                        txhash: params.transactionHash\n                    });\n                case \"call\": {\n                    if (params.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_call\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return etherscan_provider_checkError(\"call\", error, params.transaction);\n                    }\n                }\n                case \"estimateGas\": {\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_estimateGas\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return etherscan_provider_checkError(\"estimateGas\", error, params.transaction);\n                    }\n                }\n                case \"getLogs\": {\n                    const args = { action: \"getLogs\" };\n                    if (params.filter.fromBlock) {\n                        args.fromBlock = checkLogTag(params.filter.fromBlock);\n                    }\n                    if (params.filter.toBlock) {\n                        args.toBlock = checkLogTag(params.filter.toBlock);\n                    }\n                    if (params.filter.address) {\n                        args.address = params.filter.address;\n                    }\n                    // @TODO: We can handle slightly more complicated logs using the logs API\n                    if (params.filter.topics && params.filter.topics.length > 0) {\n                        if (params.filter.topics.length > 1) {\n                            etherscan_provider_logger.throwError(\"unsupported topic count\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                        }\n                        if (params.filter.topics.length === 1) {\n                            const topic0 = params.filter.topics[0];\n                            if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n                                etherscan_provider_logger.throwError(\"unsupported topic format\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                            }\n                            args.topic0 = topic0;\n                        }\n                    }\n                    const logs = yield this.fetch(\"logs\", args);\n                    // Cache txHash => blockHash\n                    let blocks = {};\n                    // Add any missing blockHash to the logs\n                    for (let i = 0; i < logs.length; i++) {\n                        const log = logs[i];\n                        if (log.blockHash != null) {\n                            continue;\n                        }\n                        if (blocks[log.blockNumber] == null) {\n                            const block = yield this.getBlock(log.blockNumber);\n                            if (block) {\n                                blocks[log.blockNumber] = block.hash;\n                            }\n                        }\n                        log.blockHash = blocks[log.blockNumber];\n                    }\n                    return logs;\n                }\n                case \"getEtherPrice\":\n                    if (this.network.name !== \"homestead\") {\n                        return 0.0;\n                    }\n                    return parseFloat((yield this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n                default:\n                    break;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    getHistory(addressOrName, startBlock, endBlock) {\n        return etherscan_provider_awaiter(this, void 0, void 0, function* () {\n            const params = {\n                action: \"txlist\",\n                address: (yield this.resolveName(addressOrName)),\n                startblock: ((startBlock == null) ? 0 : startBlock),\n                endblock: ((endBlock == null) ? 99999999 : endBlock),\n                sort: \"asc\"\n            };\n            const result = yield this.fetch(\"account\", params);\n            return result.map((tx) => {\n                [\"contractAddress\", \"to\"].forEach(function (key) {\n                    if (tx[key] == \"\") {\n                        delete tx[key];\n                    }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                    tx.creates = tx.contractAddress;\n                }\n                const item = this.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                    item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n            });\n        });\n    }\n    isCommunityResource() {\n        return (this.apiKey === etherscan_provider_defaultApiKey);\n    }\n}\n//# sourceMappingURL=etherscan-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/random/lib.esm/shuffle.js\n\nfunction shuffled(array) {\n    array = array.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n    return array;\n}\n//# sourceMappingURL=shuffle.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js\n\nvar fallback_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst fallback_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\nfunction now() { return (new Date()).getTime(); }\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n    let result = null;\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n        // Null! We do not know our network; bail.\n        if (network == null) {\n            return null;\n        }\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n                fallback_provider_logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n            }\n        }\n        else {\n            result = network;\n        }\n    }\n    return result;\n}\nfunction median(values, maxDelta) {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n    return (a + b) / 2;\n}\nfunction serialize(value) {\n    if (value === null) {\n        return \"null\";\n    }\n    else if (typeof (value) === \"number\" || typeof (value) === \"boolean\") {\n        return JSON.stringify(value);\n    }\n    else if (typeof (value) === \"string\") {\n        return value;\n    }\n    else if (bignumber/* BigNumber.isBigNumber */.O$.isBigNumber(value)) {\n        return value.toString();\n    }\n    else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    }\n    else if (typeof (value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof (v) === \"function\") {\n                v = \"[function]\";\n            }\n            else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n    throw new Error(\"unknown value type: \" + typeof (value));\n}\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n;\nfunction fallback_provider_stall(duration) {\n    let cancel = null;\n    let timer = null;\n    let promise = (new Promise((resolve) => {\n        cancel = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        };\n        timer = setTimeout(cancel, duration);\n    }));\n    const wait = (func) => {\n        promise = promise.then(func);\n        return promise;\n    };\n    function getPromise() {\n        return promise;\n    }\n    return { cancel, getPromise, wait };\n}\nconst ForwardErrors = [\n    logger_lib_esm/* Logger.errors.CALL_EXCEPTION */.Yd.errors.CALL_EXCEPTION,\n    logger_lib_esm/* Logger.errors.INSUFFICIENT_FUNDS */.Yd.errors.INSUFFICIENT_FUNDS,\n    logger_lib_esm/* Logger.errors.NONCE_EXPIRED */.Yd.errors.NONCE_EXPIRED,\n    logger_lib_esm/* Logger.errors.REPLACEMENT_UNDERPRICED */.Yd.errors.REPLACEMENT_UNDERPRICED,\n    logger_lib_esm/* Logger.errors.UNPREDICTABLE_GAS_LIMIT */.Yd.errors.UNPREDICTABLE_GAS_LIMIT\n];\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n;\nfunction exposeDebugConfig(config, now) {\n    const result = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) {\n        result.start = config.start;\n    }\n    if (now) {\n        result.duration = (now - config.start);\n    }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        }\n        else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\nfunction normalizedTally(normalize, quorum) {\n    return function (configs) {\n        // Count the votes for each result\n        const tally = {};\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) {\n                tally[value] = { count: 0, result: c.result };\n            }\n            tally[value].count++;\n        });\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n        // No quroum\n        return undefined;\n    };\n}\nfunction getProcessFunc(provider, method, params) {\n    let normalize = serialize;\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) {\n                    return undefined;\n                }\n                blockNumber = Math.ceil(blockNumber);\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) {\n                    blockNumber++;\n                }\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n                return provider._highestBlockNumber;\n            };\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            };\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function (configs) {\n                return median(configs.map((c) => c.result));\n            };\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function (tx) {\n                if (tx == null) {\n                    return null;\n                }\n                tx = (0,properties_lib_esm/* shallowCopy */.DC)(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            };\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    block = (0,properties_lib_esm/* shallowCopy */.DC)(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = (0,properties_lib_esm/* shallowCopy */.DC)(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            }\n            else {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    return serialize(block);\n                };\n            }\n            break;\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n    return fallback_provider_awaiter(this, void 0, void 0, function* () {\n        const provider = (config.provider);\n        if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n            return provider;\n        }\n        return (0,web_lib_esm/* poll */.$l)(() => {\n            return new Promise((resolve, reject) => {\n                setTimeout(function () {\n                    // We are synced\n                    if (provider.blockNumber >= blockNumber) {\n                        return resolve(provider);\n                    }\n                    // We're done; just quit\n                    if (config.cancelled) {\n                        return resolve(null);\n                    }\n                    // Try again, next block\n                    return resolve(undefined);\n                }, 0);\n            });\n        }, { oncePoll: provider });\n    });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n    return fallback_provider_awaiter(this, void 0, void 0, function* () {\n        let provider = config.provider;\n        switch (method) {\n            case \"getBlockNumber\":\n            case \"getGasPrice\":\n                return provider[method]();\n            case \"getEtherPrice\":\n                if (provider.getEtherPrice) {\n                    return provider.getEtherPrice();\n                }\n                break;\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n                if (params.blockTag && (0,bytes_lib_esm/* isHexString */.A7)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.address, params.blockTag || \"latest\");\n            case \"getStorageAt\":\n                if (params.blockTag && (0,bytes_lib_esm/* isHexString */.A7)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n            case \"getBlock\":\n                if (params.blockTag && (0,bytes_lib_esm/* isHexString */.A7)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[(params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\")](params.blockTag || params.blockHash);\n            case \"call\":\n            case \"estimateGas\":\n                if (params.blockTag && (0,bytes_lib_esm/* isHexString */.A7)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.transaction);\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n                return provider[method](params.transactionHash);\n            case \"getLogs\": {\n                let filter = params.filter;\n                if ((filter.fromBlock && (0,bytes_lib_esm/* isHexString */.A7)(filter.fromBlock)) || (filter.toBlock && (0,bytes_lib_esm/* isHexString */.A7)(filter.toBlock))) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getLogs(filter);\n            }\n        }\n        return fallback_provider_logger.throwError(\"unknown method error\", logger_lib_esm/* Logger.errors.UNKNOWN_ERROR */.Yd.errors.UNKNOWN_ERROR, {\n            method: method,\n            params: params\n        });\n    });\n}\nclass FallbackProvider extends BaseProvider {\n    constructor(providers, quorum) {\n        fallback_provider_logger.checkNew(new.target, FallbackProvider);\n        if (providers.length === 0) {\n            fallback_provider_logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n        const providerConfigs = providers.map((configOrProvider, index) => {\n            if (abstract_provider_lib_esm.Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n            const config = (0,properties_lib_esm/* shallowCopy */.DC)(configOrProvider);\n            if (config.priority == null) {\n                config.priority = 1;\n            }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n            }\n            if (config.weight == null) {\n                config.weight = 1;\n            }\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                fallback_provider_logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n            }\n            return Object.freeze(config);\n        });\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n        if (quorum == null) {\n            quorum = total / 2;\n        }\n        else if (quorum > total) {\n            fallback_provider_logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n        // Are all providers' networks are known\n        let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Preserve a copy, so we do not get mutated\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"quorum\", quorum);\n        this._highestBlockNumber = -1;\n    }\n    detectNetwork() {\n        return fallback_provider_awaiter(this, void 0, void 0, function* () {\n            const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n            return checkNetworks(networks);\n        });\n    }\n    perform(method, params) {\n        return fallback_provider_awaiter(this, void 0, void 0, function* () {\n            // Sending transactions is special; always broadcast it to all backends\n            if (method === \"sendTransaction\") {\n                const results = yield Promise.all(this.providerConfigs.map((c) => {\n                    return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                        return result.hash;\n                    }, (error) => {\n                        return error;\n                    });\n                }));\n                // Any success is good enough (other errors are likely \"already seen\" errors\n                for (let i = 0; i < results.length; i++) {\n                    const result = results[i];\n                    if (typeof (result) === \"string\") {\n                        return result;\n                    }\n                }\n                // They were all an error; pick the first error\n                throw results[0];\n            }\n            // We need to make sure we are in sync with our backends, so we need\n            // to know this before we can make a lot of calls\n            if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n                yield this.getBlockNumber();\n            }\n            const processFunc = getProcessFunc(this, method, params);\n            // Shuffle the providers and then sort them by their priority; we\n            // shallowCopy them since we will store the result in them too\n            const configs = shuffled(this.providerConfigs.map(properties_lib_esm/* shallowCopy */.DC));\n            configs.sort((a, b) => (a.priority - b.priority));\n            const currentBlockNumber = this._highestBlockNumber;\n            let i = 0;\n            let first = true;\n            while (true) {\n                const t0 = now();\n                // Compute the inflight weight (exclude anything past)\n                let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                    .reduce((accum, c) => (accum + c.weight), 0);\n                // Start running enough to meet quorum\n                while (inflightWeight < this.quorum && i < configs.length) {\n                    const config = configs[i++];\n                    const rid = nextRid++;\n                    config.start = now();\n                    config.staller = fallback_provider_stall(config.stallTimeout);\n                    config.staller.wait(() => { config.staller = null; });\n                    config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                        config.done = true;\n                        config.result = result;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: (0,properties_lib_esm/* deepCopy */.p$)(params) },\n                                provider: this\n                            });\n                        }\n                    }, (error) => {\n                        config.done = true;\n                        config.error = error;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: (0,properties_lib_esm/* deepCopy */.p$)(params) },\n                                provider: this\n                            });\n                        }\n                    });\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, null),\n                            request: { method: method, params: (0,properties_lib_esm/* deepCopy */.p$)(params) },\n                            provider: this\n                        });\n                    }\n                    inflightWeight += config.weight;\n                }\n                // Wait for anything meaningful to finish or stall out\n                const waiting = [];\n                configs.forEach((c) => {\n                    if (c.done || !c.runner) {\n                        return;\n                    }\n                    waiting.push(c.runner);\n                    if (c.staller) {\n                        waiting.push(c.staller.getPromise());\n                    }\n                });\n                if (waiting.length) {\n                    yield Promise.race(waiting);\n                }\n                // Check the quorum and process the results; the process function\n                // may additionally decide the quorum is not met\n                const results = configs.filter((c) => (c.done && c.error == null));\n                if (results.length >= this.quorum) {\n                    const result = processFunc(results);\n                    if (result !== undefined) {\n                        // Shut down any stallers\n                        configs.forEach(c => {\n                            if (c.staller) {\n                                c.staller.cancel();\n                            }\n                            c.cancelled = true;\n                        });\n                        return result;\n                    }\n                    if (!first) {\n                        yield fallback_provider_stall(100).getPromise();\n                    }\n                    first = false;\n                }\n                // No result, check for errors that should be forwarded\n                const errors = configs.reduce((accum, c) => {\n                    if (!c.done || c.error == null) {\n                        return accum;\n                    }\n                    const code = (c.error).code;\n                    if (ForwardErrors.indexOf(code) >= 0) {\n                        if (!accum[code]) {\n                            accum[code] = { error: c.error, weight: 0 };\n                        }\n                        accum[code].weight += c.weight;\n                    }\n                    return accum;\n                }, ({}));\n                Object.keys(errors).forEach((errorCode) => {\n                    const tally = errors[errorCode];\n                    if (tally.weight < this.quorum) {\n                        return;\n                    }\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) {\n                            c.staller.cancel();\n                        }\n                        c.cancelled = true;\n                    });\n                    const e = (tally.error);\n                    const props = {};\n                    ForwardProperties.forEach((name) => {\n                        if (e[name] == null) {\n                            return;\n                        }\n                        props[name] = e[name];\n                    });\n                    fallback_provider_logger.throwError(e.reason || e.message, errorCode, props);\n                });\n                // All configs have run to completion; we will never get more data\n                if (configs.filter((c) => !c.done).length === 0) {\n                    break;\n                }\n            }\n            // Shut down any stallers; shouldn't be any\n            configs.forEach(c => {\n                if (c.staller) {\n                    c.staller.cancel();\n                }\n                c.cancelled = true;\n            });\n            return fallback_provider_logger.throwError(\"failed to meet quorum\", logger_lib_esm/* Logger.errors.SERVER_ERROR */.Yd.errors.SERVER_ERROR, {\n                method: method,\n                params: params,\n                //results: configs.map((c) => c.result),\n                //errors: configs.map((c) => c.error),\n                results: configs.map((c) => exposeDebugConfig(c)),\n                provider: this\n            });\n        });\n    }\n}\n//# sourceMappingURL=fallback-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js\n\nconst IpcProvider = null;\n\n//# sourceMappingURL=ipc-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/infura-provider.js\n\n\n\n\n\n\nconst infura_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nclass InfuraWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            infura_provider_logger.throwError(\"INFURA WebSocket project secrets unsupported\", logger_lib_esm/* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"apiKey\", provider.projectId);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"projectId\", provider.projectId);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"projectSecret\", provider.projectSecret);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\nclass InfuraProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            infura_provider_logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            infura_provider_logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                infura_provider_logger.throwError(\"unsupported network\", logger_lib_esm/* Logger.errors.INVALID_ARGUMENT */.Yd.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n//# sourceMappingURL=infura-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js\n\n\n\n// Experimental\nclass JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: (0,properties_lib_esm/* deepCopy */.p$)(request),\n                    provider: this\n                });\n                return (0,web_lib_esm/* fetchJson */.rd)(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=json-rpc-batch-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js\n/* istanbul ignore file */\n\n\n\n\nconst nodesmith_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n// Special API key provided by Nodesmith for ethers.js\nconst nodesmith_provider_defaultApiKey = \"ETHERS_JS_SHARED\";\nclass NodesmithProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            nodesmith_provider_logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || nodesmith_provider_defaultApiKey;\n    }\n    static getUrl(network, apiKey) {\n        nodesmith_provider_logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n                nodesmith_provider_logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n//# sourceMappingURL=nodesmith-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js\n\n\n\n\nconst pocket_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\nclass PocketProvider extends UrlJsonRpcProvider {\n    constructor(network, apiKey) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n        if (apiKey == null) {\n            const n = (0,properties_lib_esm/* getStatic */.tu)(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                pocket_provider_logger.throwError(\"unsupported network\", logger_lib_esm/* Logger.errors.INVALID_ARGUMENT */.Yd.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n        }\n        super(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n        if (apiKey == null) {\n            pocket_provider_logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            pocket_provider_logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            pocket_provider_logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else if (apiKey.applicationId) {\n            pocket_provider_logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else {\n            pocket_provider_logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                pocket_provider_logger.throwError(\"unsupported network\", logger_lib_esm/* Logger.errors.INVALID_ARGUMENT */.Yd.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        }\n        else {\n            url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n        }\n        const connection = { url };\n        // Initialize empty headers\n        connection.headers = {};\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/web3-provider.js\n\n\n\n\nconst web3_provider_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n\nlet _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n    const fetcher = \"Web3LegacyFetcher\";\n    return function (method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: (0,properties_lib_esm/* deepCopy */.p$)(request),\n                provider: this\n            });\n            sendFunc(request, (error, response) => {\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n                    return reject(error);\n                }\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    error.code = response.error.code;\n                    error.data = response.error.data;\n                    return reject(error);\n                }\n                resolve(response.result);\n            });\n        });\n    };\n}\nfunction buildEip1193Fetcher(provider) {\n    return function (method, params) {\n        if (params == null) {\n            params = [];\n        }\n        const request = { method, params };\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: (0,properties_lib_esm/* deepCopy */.p$)(request),\n            provider: this\n        });\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n            return response;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n            throw error;\n        });\n    };\n}\nclass Web3Provider extends JsonRpcProvider {\n    constructor(provider, network) {\n        web3_provider_logger.checkNew(new.target, Web3Provider);\n        if (provider == null) {\n            web3_provider_logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n        let path = null;\n        let jsonRpcFetchFunc = null;\n        let subprovider = null;\n        if (typeof (provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n        }\n        else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n            subprovider = provider;\n            if (provider.request) {\n                if (path === \"\") {\n                    path = \"eip-1193:\";\n                }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            }\n            else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            }\n            else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            }\n            else {\n                web3_provider_logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n            if (!path) {\n                path = \"unknown:\";\n            }\n        }\n        super(path, network);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        (0,properties_lib_esm/* defineReadOnly */.zG)(this, \"provider\", subprovider);\n    }\n    send(method, params) {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n//# sourceMappingURL=web3-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/providers/lib.esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst providers_lib_esm_logger = new logger_lib_esm/* Logger */.Yd(providers_lib_esm_version_version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof (network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    providers_lib_esm_logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    const n = (0,networks_lib_esm/* getNetwork */.H)(network);\n    if (!n || !n._defaultProvider) {\n        providers_lib_esm_logger.throwError(\"unsupported getDefaultProvider network\", logger_lib_esm/* Logger.errors.NETWORK_ERROR */.Yd.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider: FallbackProvider,\n        AlchemyProvider: AlchemyProvider,\n        CloudflareProvider: CloudflareProvider,\n        EtherscanProvider: EtherscanProvider,\n        InfuraProvider: InfuraProvider,\n        JsonRpcProvider: JsonRpcProvider,\n        NodesmithProvider: NodesmithProvider,\n        PocketProvider: PocketProvider,\n        Web3Provider: Web3Provider,\n        IpcProvider: IpcProvider,\n    }, options);\n}\n////////////////////////\n// Exports\n\n//# sourceMappingURL=index.js.map\n// EXTERNAL MODULE: ./node_modules/@ethersproject/abi/lib.esm/abi-coder.js + 10 modules\nvar abi_coder = __webpack_require__(84243);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/abi/lib.esm/fragments.js\nvar fragments = __webpack_require__(11388);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\nvar abstract_coder = __webpack_require__(61184);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/abi/lib.esm/interface.js\nvar lib_esm_interface = __webpack_require__(8198);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/base64/lib.esm/base64.js\nvar base64 = __webpack_require__(59567);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/base64/lib.esm/index.js\n\n\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/solidity/lib.esm/_version.js\nconst solidity_lib_esm_version_version = \"solidity/5.5.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/node_modules/@ethersproject/solidity/lib.esm/index.js\n\n\n\n\n\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\n\nconst solidity_lib_esm_logger = new logger_lib_esm/* Logger */.Yd(solidity_lib_esm_version_version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return (0,bytes_lib_esm/* zeroPad */.Bu)(value, 32);\n            }\n            return (0,bytes_lib_esm/* arrayify */.lE)(value);\n        case \"string\":\n            return (0,utf8/* toUtf8Bytes */.Y0)(value);\n        case \"bytes\":\n            return (0,bytes_lib_esm/* arrayify */.lE)(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return (0,bytes_lib_esm/* zeroPad */.Bu)(value, 32);\n            }\n            return (0,bytes_lib_esm/* arrayify */.lE)(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            solidity_lib_esm_logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = bignumber/* BigNumber.from */.O$.from(value).toTwos(size);\n        return (0,bytes_lib_esm/* zeroPad */.Bu)(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            solidity_lib_esm_logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if ((0,bytes_lib_esm/* arrayify */.lE)(value).byteLength !== size) {\n            solidity_lib_esm_logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n        }\n        if (isArray) {\n            return (0,bytes_lib_esm/* arrayify */.lE)((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            solidity_lib_esm_logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n        }\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return (0,bytes_lib_esm/* concat */.zo)(result);\n    }\n    return solidity_lib_esm_logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n    if (types.length != values.length) {\n        solidity_lib_esm_logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0,bytes_lib_esm/* hexlify */.Dv)((0,bytes_lib_esm/* concat */.zo)(tight));\n}\nfunction keccak256(types, values) {\n    return (0,keccak256_lib_esm/* keccak256 */.w)(pack(types, values));\n}\nfunction sha256(types, values) {\n    return (0,sha2/* sha256 */.JQ)(pack(types, values));\n}\n//# sourceMappingURL=index.js.map\n// EXTERNAL MODULE: ./node_modules/@ethersproject/rlp/lib.esm/index.js + 1 modules\nvar rlp_lib_esm = __webpack_require__(59052);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/strings/lib.esm/idna.js\nvar idna = __webpack_require__(35637);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/strings/lib.esm/bytes32.js\nvar lib_esm_bytes32 = __webpack_require__(86237);\n// EXTERNAL MODULE: ./node_modules/@ethersproject/units/lib.esm/index.js + 1 modules\nvar units_lib_esm = __webpack_require__(61744);\n;// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/utils.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n////////////////////////\n// Enums\n\n\n////////////////////////\n// Exports\n\n//# sourceMappingURL=utils.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/_version.js\nconst ethers_lib_esm_version_version = \"ethers/5.5.4\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/ethers.js\n\n\n\n\n\n\n\n\n\n\n\n////////////////////////\n// Compile-Time Constants\n// This is generated by \"npm run dist\"\n\nconst ethers_logger = new logger_lib_esm/* Logger */.Yd(ethers_lib_esm_version_version);\n////////////////////////\n// Exports\n\n//# sourceMappingURL=ethers.js.map\n;// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/index.js\n\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\n\ntry {\n    const anyGlobal = window;\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers_namespaceObject;\n    }\n}\ncatch (error) { }\n\n\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 17635:\n/***/ (function(module) {\n\n\n\n(function(root) {\n    const MAX_VALUE = 0x7fffffff;\n\n    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n    // See: https://github.com/dchest/scrypt-async-js\n    function SHA256(m) {\n        const K = new Uint32Array([\n           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n       ]);\n\n        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;\n        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;\n        const w = new Uint32Array(64);\n\n        function blocks(p) {\n            let off = 0, len = p.length;\n            while (len >= 64) {\n                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;\n\n                for (i = 0; i < 16; i++) {\n                    j = off + i*4;\n                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |\n                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);\n                }\n\n                for (i = 16; i < 64; i++) {\n                    u = w[i-2];\n                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);\n\n                    u = w[i-15];\n                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);\n\n                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;\n                }\n\n                for (i = 0; i < 64; i++) {\n                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^\n                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +\n                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^\n                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n                    h = g;\n                    g = f;\n                    f = e;\n                    e = (d + t1) | 0;\n                    d = c;\n                    c = b;\n                    b = a;\n                    a = (t1 + t2) | 0;\n                }\n\n                h0 = (h0 + a) | 0;\n                h1 = (h1 + b) | 0;\n                h2 = (h2 + c) | 0;\n                h3 = (h3 + d) | 0;\n                h4 = (h4 + e) | 0;\n                h5 = (h5 + f) | 0;\n                h6 = (h6 + g) | 0;\n                h7 = (h7 + h) | 0;\n\n                off += 64;\n                len -= 64;\n            }\n        }\n\n        blocks(m);\n\n        let i, bytesLeft = m.length % 64,\n        bitLenHi = (m.length / 0x20000000) | 0,\n        bitLenLo = m.length << 3,\n        numZeros = (bytesLeft < 56) ? 56 : 120,\n        p = m.slice(m.length - bytesLeft, m.length);\n\n        p.push(0x80);\n        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }\n        p.push((bitLenHi >>> 24) & 0xff);\n        p.push((bitLenHi >>> 16) & 0xff);\n        p.push((bitLenHi >>> 8)  & 0xff);\n        p.push((bitLenHi >>> 0)  & 0xff);\n        p.push((bitLenLo >>> 24) & 0xff);\n        p.push((bitLenLo >>> 16) & 0xff);\n        p.push((bitLenLo >>> 8)  & 0xff);\n        p.push((bitLenLo >>> 0)  & 0xff);\n\n        blocks(p);\n\n        return [\n            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,\n            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,\n            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,\n            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,\n            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,\n            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,\n            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,\n            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff\n        ];\n    }\n\n    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n        // compress password if it's longer than hash block length\n        password = (password.length <= 64) ? password : SHA256(password);\n\n        const innerLen = 64 + salt.length + 4;\n        const inner = new Array(innerLen);\n        const outerKey = new Array(64);\n\n        let i;\n        let dk = [];\n\n        // inner = (password ^ ipad) || salt || counter\n        for (i = 0; i < 64; i++) { inner[i] = 0x36; }\n        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }\n        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }\n        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }\n\n        // outerKey = password ^ opad\n        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];\n\n        // increments counter inside inner\n        function incrementCounter() {\n            for (let i = innerLen - 1; i >= innerLen - 4; i--) {\n                inner[i]++;\n                if (inner[i] <= 0xff) return;\n                inner[i] = 0;\n            }\n        }\n\n        // output blocks = SHA256(outerKey || SHA256(inner)) ...\n        while (dkLen >= 32) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n            dkLen -= 32;\n        }\n        if (dkLen > 0) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n        }\n\n        return dk;\n    }\n\n    // The following is an adaptation of scryptsy\n    // See: https://www.npmjs.com/package/scryptsy\n    function blockmix_salsa8(BY, Yi, r, x, _X) {\n        let i;\n\n        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n        for (i = 0; i < 2 * r; i++) {\n            blockxor(BY, i * 16, _X, 16);\n            salsa20_8(_X, x);\n            arraycopy(_X, 0, BY, Yi + (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n        }\n    }\n\n    function R(a, b) {\n        return (a << b) | (a >>> (32 - b));\n    }\n\n    function salsa20_8(B, x) {\n        arraycopy(B, 0, x, 0, 16);\n\n        for (let i = 8; i > 0; i -= 2) {\n            x[ 4] ^= R(x[ 0] + x[12], 7);\n            x[ 8] ^= R(x[ 4] + x[ 0], 9);\n            x[12] ^= R(x[ 8] + x[ 4], 13);\n            x[ 0] ^= R(x[12] + x[ 8], 18);\n            x[ 9] ^= R(x[ 5] + x[ 1], 7);\n            x[13] ^= R(x[ 9] + x[ 5], 9);\n            x[ 1] ^= R(x[13] + x[ 9], 13);\n            x[ 5] ^= R(x[ 1] + x[13], 18);\n            x[14] ^= R(x[10] + x[ 6], 7);\n            x[ 2] ^= R(x[14] + x[10], 9);\n            x[ 6] ^= R(x[ 2] + x[14], 13);\n            x[10] ^= R(x[ 6] + x[ 2], 18);\n            x[ 3] ^= R(x[15] + x[11], 7);\n            x[ 7] ^= R(x[ 3] + x[15], 9);\n            x[11] ^= R(x[ 7] + x[ 3], 13);\n            x[15] ^= R(x[11] + x[ 7], 18);\n            x[ 1] ^= R(x[ 0] + x[ 3], 7);\n            x[ 2] ^= R(x[ 1] + x[ 0], 9);\n            x[ 3] ^= R(x[ 2] + x[ 1], 13);\n            x[ 0] ^= R(x[ 3] + x[ 2], 18);\n            x[ 6] ^= R(x[ 5] + x[ 4], 7);\n            x[ 7] ^= R(x[ 6] + x[ 5], 9);\n            x[ 4] ^= R(x[ 7] + x[ 6], 13);\n            x[ 5] ^= R(x[ 4] + x[ 7], 18);\n            x[11] ^= R(x[10] + x[ 9], 7);\n            x[ 8] ^= R(x[11] + x[10], 9);\n            x[ 9] ^= R(x[ 8] + x[11], 13);\n            x[10] ^= R(x[ 9] + x[ 8], 18);\n            x[12] ^= R(x[15] + x[14], 7);\n            x[13] ^= R(x[12] + x[15], 9);\n            x[14] ^= R(x[13] + x[12], 13);\n            x[15] ^= R(x[14] + x[13], 18);\n        }\n\n        for (let i = 0; i < 16; ++i) {\n            B[i] += x[i];\n        }\n    }\n\n    // naive approach... going back to loop unrolling may yield additional performance\n    function blockxor(S, Si, D, len) {\n        for (let i = 0; i < len; i++) {\n            D[i] ^= S[Si + i]\n        }\n    }\n\n    function arraycopy(src, srcPos, dest, destPos, length) {\n        while (length--) {\n            dest[destPos++] = src[srcPos++];\n        }\n    }\n\n    function checkBufferish(o) {\n        if (!o || typeof(o.length) !== 'number') { return false; }\n\n        for (let i = 0; i < o.length; i++) {\n            const v = o[i];\n            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function ensureInteger(value, name) {\n        if (typeof(value) !== \"number\" || (value % 1)) { throw new Error('invalid ' + name); }\n        return value;\n    }\n\n    // N = Cpu cost, r = Memory cost, p = parallelization cost\n    // callback(error, progress, key)\n    function _scrypt(password, salt, N, r, p, dkLen, callback) {\n\n        N = ensureInteger(N, 'N');\n        r = ensureInteger(r, 'r');\n        p = ensureInteger(p, 'p');\n\n        dkLen = ensureInteger(dkLen, 'dkLen');\n\n        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }\n\n        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }\n        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }\n\n        if (!checkBufferish(password)) {\n            throw new Error('password must be an array or buffer');\n        }\n        password = Array.prototype.slice.call(password);\n\n        if (!checkBufferish(salt)) {\n            throw new Error('salt must be an array or buffer');\n        }\n        salt = Array.prototype.slice.call(salt);\n\n        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n        const B = new Uint32Array(p * 32 * r)\n        for (let i = 0; i < B.length; i++) {\n            const j = i * 4;\n            B[i] = ((b[j + 3] & 0xff) << 24) |\n                   ((b[j + 2] & 0xff) << 16) |\n                   ((b[j + 1] & 0xff) << 8) |\n                   ((b[j + 0] & 0xff) << 0);\n        }\n\n        const XY = new Uint32Array(64 * r);\n        const V = new Uint32Array(32 * r * N);\n\n        const Yi = 32 * r;\n\n        // scratch space\n        const x = new Uint32Array(16);       // salsa20_8\n        const _X = new Uint32Array(16);      // blockmix_salsa8\n\n        const totalOps = p * N * 2;\n        let currentOp = 0;\n        let lastPercent10 = null;\n\n        // Set this to true to abandon the scrypt on the next step\n        let stop = false;\n\n        // State information\n        let state = 0;\n        let i0 = 0, i1;\n        let Bi;\n\n        // How many blockmix_salsa8 can we do per step?\n        const limit = callback ? parseInt(1000 / r): 0xffffffff;\n\n        // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;\n\n        // This is really all I changed; making scryptsy a state machine so we occasionally\n        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n        const incrementalSMix = function() {\n            if (stop) {\n                return callback(new Error('cancelled'), currentOp / totalOps);\n            }\n\n            let steps;\n\n            switch (state) {\n                case 0:\n                    // for (var i = 0; i < p; i++)...\n                    Bi = i0 * 32 * r;\n\n                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1\n\n                    state = 1;                                         // Move to ROMix 2\n                    i1 = 0;\n\n                    // Fall through\n\n                case 1:\n\n                    // Run up to 1000 steps of the first inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                  // ROMix - 2\n                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3\n                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4\n                    }\n\n                    // for (var i = 0; i < N; i++)\n                    i1 += steps;\n                    currentOp += steps;\n\n                    if (callback) {\n                        // Call the callback with the progress (optionally stopping us)\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    i1 = 0;                                          // Move to ROMix 6\n                    state = 2;\n\n                    // Fall through\n\n                case 2:\n\n                    // Run up to 1000 steps of the second inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                // ROMix - 6\n                        const offset = (2 * r - 1) * 16;             // ROMix - 7\n                        const j = XY[offset] & (N - 1);\n                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)\n                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)\n                    }\n\n                    // for (var i = 0; i < N; i++)...\n                    i1 += steps;\n                    currentOp += steps;\n\n                    // Call the callback with the progress (optionally stopping us)\n                    if (callback) {\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10\n\n                    // for (var i = 0; i < p; i++)...\n                    i0++;\n                    if (i0 < p) {\n                        state = 0;\n                        break;\n                    }\n\n                    b = [];\n                    for (let i = 0; i < B.length; i++) {\n                        b.push((B[i] >>  0) & 0xff);\n                        b.push((B[i] >>  8) & 0xff);\n                        b.push((B[i] >> 16) & 0xff);\n                        b.push((B[i] >> 24) & 0xff);\n                    }\n\n                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);\n\n                    // Send the result to the callback\n                    if (callback) { callback(null, 1.0, derivedKey); }\n\n                    // Done; don't break (which would reschedule)\n                    return derivedKey;\n            }\n\n            // Schedule the next steps\n            if (callback) { nextTick(incrementalSMix); }\n        }\n\n        // Run the smix state machine until completion\n        if (!callback) {\n            while (true) {\n                const derivedKey = incrementalSMix();\n                if (derivedKey != undefined) { return derivedKey; }\n            }\n        }\n\n        // Bootstrap the async incremental smix\n        incrementalSMix();\n    }\n\n    const lib = {\n        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {\n            return new Promise(function(resolve, reject) {\n                let lastProgress = 0;\n                if (progressCallback) { progressCallback(0); }\n                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {\n                    if (error) {\n                        reject(error);\n                    } else if (key) {\n                        if (progressCallback && lastProgress !== 1) {\n                            progressCallback(1);\n                        }\n                        resolve(new Uint8Array(key));\n                    } else if (progressCallback && progress !== lastProgress) {\n                        lastProgress = progress;\n                        return progressCallback(progress);\n                    }\n                });\n            });\n        },\n        syncScrypt: function(password, salt, N, r, p, dkLen) {\n            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n        }\n    };\n\n    // node.js\n    if (true) {\n       module.exports = lib;\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n\n})(this);\n\n\n/***/ }),\n\n/***/ 91625:\n/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {\n\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"print\": function() { return /* binding */ print; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\nvar nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\n/* harmony default export */ var jsutils_nodejsCustomInspectSymbol = (nodejsCustomInspectSymbol);\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/inspect.mjs\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-disable flowtype/no-weak-types */\n\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nfunction inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(jsutils_nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/invariant.mjs\nfunction invariant(condition, message) {\n  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/jsutils/defineInspect.mjs\n\n\n/**\n * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`\n */\n\nfunction defineInspect(classObject) {\n  var fn = classObject.prototype.toJSON;\n  typeof fn === 'function' || invariant(0);\n  classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n  if (jsutils_nodejsCustomInspectSymbol) {\n    classObject.prototype[jsutils_nodejsCustomInspectSymbol] = fn;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/ast.mjs\n\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nvar Location = /*#__PURE__*/function () {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  function Location(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  var _proto = Location.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  };\n\n  return Location;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Location);\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nvar Token = /*#__PURE__*/function () {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  function Token(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  var _proto2 = Token.prototype;\n\n  _proto2.toJSON = function toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  };\n\n  return Token;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(Token);\n/**\n * @internal\n */\n\nfunction isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/visitor.mjs\n\n\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nvar QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nvar BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nfunction visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error(\"Invalid AST Node: \".concat(inspect(node), \".\"));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _visitorKeys$node$kin;\n\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nfunction visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nfunction getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/blockString.mjs\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nfunction dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  var startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  var endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (var i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nfunction getBlockStringIndentation(value) {\n  var _commonIndent;\n\n  var isFirstLine = true;\n  var isEmptyLine = true;\n  var indent = 0;\n  var commonIndent = null;\n\n  for (var i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nfunction printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n\n;// CONCATENATED MODULE: ./node_modules/@gelatonetwork/limit-orders-lib/node_modules/graphql/language/printer.mjs\n\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nfunction print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    var prefix = wrap('', alias, ': ') + name;\n    var argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n    if (argsLine.length > MAX_LINE_LENGTH) {\n      argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n    }\n\n    return join([argsLine, join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: addDescription(function (_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  }),\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        interfaces = _ref26.interfaces,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        interfaces = _ref35.interfaces,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray) {\n  var _maybeArray$filter$jo;\n\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {\n    return x;\n  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\n\nfunction wrap(start, maybeString) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction isMultiline(str) {\n  return str.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray != null && maybeArray.some(isMultiline);\n}\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","root","checkInt","value","parseInt","checkInts","arrayish","length","i","coerceArray","arg","copy","buffer","ArrayBuffer","isView","name","slice","Array","prototype","call","isArray","Uint8Array","createArray","copyArray","sourceArray","targetArray","targetStart","sourceStart","sourceEnd","set","Hex","convertHex","toBytes","text","result","substr","fromBytes","bytes","v","join","numberOfRounds","rcon","S","Si","T1","T2","T3","T4","T5","T6","T7","T8","U1","U2","U3","U4","convertToInt32","AES","key","Error","Object","defineProperty","_prepare","rounds","_Ke","_Kd","roundKeyCount","KC","tk","index","tt","rconpointer","t","r","c","encrypt","plaintext","a","decrypt","ciphertext","ModeOfOperationECB","description","_aes","block","ModeOfOperationCBC","iv","_lastCipherblock","j","ModeOfOperationCFB","segmentSize","_shiftRegister","xorSegment","encrypted","ModeOfOperationOFB","_lastPrecipher","_lastPrecipherIndex","Counter","initialValue","_counter","setValue","setBytes","increment","ModeOfOperationCTR","counter","_remainingCounter","_remainingCounterIndex","exports","ModeOfOperation","ecb","cbc","cfb","ofb","ctr","utils","hex","utf8","encodeURI","charCodeAt","String","fromCharCode","padding","pkcs7","pad","data","padder","strip","_arrayTest","__unused_webpack_module","GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS","GENERIC_GAS_LIMIT_ORDER_EXECUTION","NATIVE_WRAPPED_TOKEN_ADDRESS","NATIVE_TOKEN_NAME","NATIVE_WRAPPED_TOKEN_TICKER","NATIVE_TOKEN_TICKER","GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER","GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS","GELATO_LIMIT_ORDERS_MODULE_ADDRESS","GELATO_LIMIT_ORDERS_ADDRESS","SUBGRAPH_URL","OLD_SUBGRAPH_URL","NETWORK_STOP_LIMIT_HANDLERS","NETWORK_HANDLERS","NETWORK_NAME","HANDLERS_ADDRESSES","LIMIT_ORDER_SLIPPAGE","STOP_LIMIT_SLIPPAGE_BPS","BPS_GELATO_FEE","CHAIN_ID","MAX_LIFETIME_IN_SECONDS","SLIPPAGE_BPS","ETH_ADDRESS","MAINNET","ROPSTEN","GOERLI","BSC","MATIC","FANTOM","AVAX","__webpack_require__","ERC20OrderRouter__factory","ethers_1","_abi","inputs","internalType","type","stateMutability","anonymous","indexed","outputs","createInterface","Interface","connect","address","signerOrProvider","Contract","abi","ERC20__factory","constant","payable","GelatoLimitOrders__factory","Multicall__factory","components","ERC20__factory_1","enumerable","get","ERC20OrderRouter__factory_1","GelatoLimitOrders__factory_1","Multicall__factory_1","constants","isEthereumChain","GelatoStopLimitOrders","isValidChainIdAndHandler","GelatoLimitOrders","tslib_1","limit_orders_1","stoplimit_orders_1","utils_1","__exportStar","__importStar","isFlashbotsCompatibleChainId","abstract_provider_1","abstract_signer_1","constants_1","types_1","queries_1","chainId","handler","includes","constructor","isFlashbotsProtected","_a","_chainId","_gelatoFeeBPS","_slippageBPS","_subgraphUrl","_signer","Signer","isSigner","undefined","_provider","Provider","isProvider","provider","_gelatoLimitOrders","_moduleAddress","_handler","_handlerAddress","toLowerCase","_isFlashbotsProtected","_abiEncoder","AbiCoder","_erc20OrderRouter","gelatoFeeBPS","slippageBPS","signer","subgraphUrl","handlerAddress","moduleAddress","contract","erc20OrderRouter","inputToken","outputToken","inputAmount","minReturn","owner","checkAllowance","__awaiter","payload","encodeLimitOrderSubmissionWithSecret","minReturnToBeParsed","randomSecret","hexlify","randomBytes","replace","fullSecret","privateKey","secret","witness","Wallet","getFeeAndSlippageAdjustedMinReturn","_encodeSubmitData","encodedData","encode","order","id","_getKey","toString","adjustedMinReturn","inputData","overrides","getAddress","txData","encodeLimitOrderSubmission","sendTransaction","assign","to","BigNumber","from","checkIsActiveOrder","isActiveOrder","interface","encodeFunctionData","Zero","_order","subgraphOrder","Promise","race","getOrder","setTimeout","resolve","then","status","cancelledTxHash","executedTxHash","error","cancelOrder","gasLimit","amount","approve","existOrder","inputValue","inputDecimals","outputValue","outputDecimals","invert","factor","pow","mul","div","outputAmount","extraSlippageBPS","Number","isInteger","gelatoFee","gte","slippage","sub","fees","add","isInverted","orderId","queryOrder","getAdjustedMinReturn","includeOrdersWithNullHandler","orders","queryOrders","map","filter","queryOpenOrders","queryPastOrders","queryExecutedOrders","queryCancelledOrders","keccak256","isNetworkGasToken","encodedEthOrder","encodeEthOrder","allowance","lt","GelatoBase","isETHOrWETH","tokenAddress","chainID","WETH_ADDRESS","_gelatoCore","abiEncoder","maxReturn","core_1","stoplimit_1","sotplossHandlers","encodeStopLimitOrderSubmission","encodeStopLimitOrderSubmissionWithSecret","maxReturnToBeParsed","queryStopLimitOrders","queryStopLimitExecutedOrders","queryStopLimitCancelledOrders","isTransactionCostDependentChain","queries","token","GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER","GET_ALL_CANCELLED_ORDERS_BY_OWNER","GET_ALL_EXECUTED_ORDERS_BY_OWNER","GET_ALL_PAST_ORDERS_BY_OWNER","GET_ALL_OPEN_ORDERS_BY_OWNER","GET_ALL_ORDERS_BY_OWNER","GET_ORDER_BY_ID","graphql_request_1","gql","constants_2","stopLimitModule","dataFromOldSubgraph","request","dataFromNewSubgraph","allOrders","_getUniqueOrdersWithExpiry","pop","Map","values","sort","b","parseFloat","updatedAt","isExpired","Date","now","createdAt","queryOpenStopLimitOrders","dataStopLimitSubgraph","console","__importDefault","mod","__esModule","extract_files_1","form_data_1","isExtractableFileEnhanced","isExtractableFile","pipe","query","variables","operationName","extractFiles","clone","files","size","JSON","stringify","reduce","accu","currentQuery","form","FormData","default","append","forEach","paths","file","__assign","s","n","arguments","p","hasOwnProperty","apply","__createBinding","create","o","m","k","k2","__setModuleDefault","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","done","adopt","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","op","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","batchRequests","rawRequest","GraphQLClient","ClientError","cross_fetch_1","CrossFetch","printer_1","createRequestBody_1","resolveHeaders","headers","oHeaders","Headers","HeadersInstanceToPlainObject","queryCleanner","str","trim","buildGetQueryParams","search","encodeURIComponent","post","url","fetch","fetchOptions","_b","method","queryParams","options","requestHeaders","_c","makeRequest","document","_d","_e","resolveRequestDocument","documents","setHeaders","setHeader","setEndpoint","fetcher","isBathchingQuery","response","successfullyReceivedData","headers_1","status_1","errorResult","toUpperCase","getResult","some","ok","errors","client","contentType","startsWith","json","operationDefinitions","definitions","definition","kind","print","chunks","_i","accumulator","chunk","extendStatics","__extends","d","setPrototypeOf","__proto__","__","_super","_this","message","extractMessage","captureStackTrace","__webpack_exports__","lib_esm","VZ","bignumber","O$","CH","lV","fixednumber","xs","abstract_signer_lib_esm","VoidSigner","Wordlist","constants_lib_esm_namespaceObject","logger_lib_esm","jK","ethers_namespaceObject","getDefaultProvider","ethers_logger","providers_lib_esm_namespaceObject","lib_esm_utils_namespaceObject","ethers_lib_esm_version_version","wordlists","addresses","EtherSymbol","hashes","R","bignumbers","PS","Bz","$B","tL","fh","Py","Ce","_Y","AlchemyProvider","AlchemyWebSocketProvider","BaseProvider","CloudflareProvider","EtherscanProvider","FallbackProvider","Formatter","InfuraProvider","InfuraWebSocketProvider","IpcProvider","JsonRpcBatchProvider","JsonRpcProvider","JsonRpcSigner","NodesmithProvider","PocketProvider","abstract_provider_lib_esm","Resolver","StaticJsonRpcProvider","UrlJsonRpcProvider","Web3Provider","WebSocketProvider","networks_lib_esm","H","isCommunityResourcable","isCommunityResource","showThrottleMessage","base64_lib_esm_namespaceObject","base64","J","abi_coder","fragments","Xg","IC","QV","pc","HY","YW","HDNode","lib_esm_interface","Hk","vU","CC","Yd","_R","rlp_lib_esm","signing_key_lib_esm","Et","types","vk","transactions_lib_esm","em","Uj","te","Uw","typed_data","E","web_lib_esm","MY","U$","z7","bytes_lib_esm","lE","basex_lib_esm","eU","properties_lib_esm","uj","abstract_coder","BR","units_lib_esm","Fn","db","sha2","Gy","VW","zo","p$","$","defaultPath","zG","entropyToMnemonic","rd","lib_esm_bytes32","dF","bM","getAccountPath","address_lib_esm","Kn","CR","hB","getJsonWalletAddress","tu","hashMessage","E1","p3","Ou","$P","$m","Dv","UJ","_t","Zq","A7","isValidMnemonic","namehash","gV","keccak256_lib_esm","w","mnemonicToEntropy","mnemonicToSeed","V","idna","Ll","F","fi","Qc","vz","$l","RJ","LO","mE","bP","qC","JQ","DC","shuffled","pack","sha256","N","G1","Y0","XL","ZN","verifyMessage","verifyTypedData","Bu","pbkdf2","password","salt","iterations","keylen","hashAlgorithm","hLen","l","DK","block1","T","U","Math","ceil","destPos","len","logger","locale","checkAbstract","mnemonic","split","words","check","wordlist","word","getWord","getWordIndex","register","lang","loadWords","substring","langEn","en","lib_esm_logger","MasterSecret","getUpperMask","bits","getLowerMask","bytes32","base58check","getWordlist","throwArgumentError","_constructorGuard","constructorGuard","publicKey","parentFingerprint","chainCode","depth","mnemonicOrPath","checkNew","signingKey","compressedPublicKey","path","extendedKey","I","sha512","IL","IR","ki","Ki","ek","_addPoint","srcMnemonic","freeze","phrase","fingerprint","shift","component","match","_derive","HardenedBit","_fromSeed","seed","seedArray","fromMnemonic","fromSeed","fromExtendedKey","decode","NFKD","checkNormalize","entropy","offset","normalize","bit","entropyBits","checksumBits","checksumMask","checksum","indices","remainingBits","random_logger","anyGlobal","getGlobal","window","random_crypto","crypto","msCrypto","getRandomValues","warn","throwError","UNSUPPORTED_OPERATION","operation","aes_js","aes_js_default","json_wallets_lib_esm_version_version","looseArrayify","hexString","zpad","getPassword","NFKC","searchPath","object","currentChild","comps","matchingChild","crowdsale_logger","CrowdsaleAccount","dk","isCrowdsaleAccount","_isCrowdsaleAccount","parse","ethaddr","encseed","encryptedSeed","aesCbc","seedHex","seedHexBytes","isCrowdsaleWallet","isKeystoreWallet","version","scrypt","scrypt_default","keystore_logger","hasMnemonic","KeystoreAccount","isKeystoreAccount","_isKeystoreAccount","_getAccount","computedMAC","_decrypt","cipher","aesCtr","mnemonicKey","account","mnemonicCiphertext","mnemonicIv","mnemonicCounter","mnemonicAesCtr","node","derivePath","code","INVALID_ARGUMENT","argument","pbkdf2Sync","passwordBytes","count","dkLen","prfFunc","keystore_pbkdf2","_computeKdfKey","pbkdf2Func","scryptFunc","progressCallback","kdf","prf","lib_esm_awaiter","wallet_lib_esm_logger","lib_esm_hasMnemonic","isSigningKey","curve","_mnemonic","_signingKey","transaction","tx","signature","signDigest","domain","populated","resolveNames","resolveName","hash","uuidRandom","uuid","derivedKey","macPrefix","mac","uuidV4","Crypto","cipherparams","kdfparams","dklen","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","gethFilename","createRandom","extraEntropy","fromEncryptedJson","decryptJsonWallet","keystore_decrypt","fromEncryptedJsonSync","decryptJsonWalletSync","decryptSync","syncScrypt","bech32","bech32_default","providers_lib_esm_version_version","formatter_logger","formats","getDefaultFormats","bind","bigNumber","blockTag","number","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","gasPrice","maxPriorityFeePerGas","maxFeePerGas","nonce","uint256","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","parentHash","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","fromBlock","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","strict","format","author","_difficulty","_block","gas","isZero","input","networkId","byzantium","checkKey","checkValue","nullValue","replaceValue","array","throttleMessage","log","base_provider_awaiter","base_provider_logger","checkTopic","topic","serializeTopics","unique","sorted","keys","getEventTag","eventName","ForkEvent","isForkEvent","getTime","stall","duration","PollableEvents","Event","tag","listener","once","event","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","matcherIpfs","matchers","_parseString","_parseBytes","getIpfsLink","link","resolvedAddress","formatter","selector","parameters","CALL_EXCEPTION","coinType","hexBytes","coinInfo","toWords","unshift","callAddress","_fetchBytes","_getAddress","linkage","content","avatar","getText","scheme","_resolvedAddress","addr","tokenId","tokenOwner","balance","metadataUrl","metadata","imageUrl","image","ipfs","swarm","keyBytes","defaultFormatter","nextPollId","network","_events","_emitted","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","getNetwork","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","getLogs","all","polling","poll","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","getBlockNumber","timeout","_waitForTransaction","replaceable","cancelFuncs","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","getTransactionCount","mined","getTransaction","getBlockWithTransactions","ti","waitForTransaction","reason","eq","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","SERVER_ERROR","addressOrName","params","_getBlockTag","position","expectedHash","returnedHash","wait","confirms","signedTransaction","hexTx","_getTransactionRequest","blockHashOrBlockTag","includeTransactions","blockWithTxs","oncePoll","_getBlock","_getFilter","_getResolver","ensAddress","resolver","getResolver","reverseName","resolverAddress","nameOrAddress","getAvatar","NOT_IMPLEMENTED","pollable","_startEvent","_addEventListener","args","stopped","eventTag","_stopEvent","removeAllListeners","found","json_rpc_provider_awaiter","json_rpc_provider_logger","errorGas","checkError","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","getLowerCase","json_rpc_provider_constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","sender","hexlifyTransaction","sendUncheckedTransaction","getPayload","allowedTransactionKeys","networkOrReady","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","jsonrpc","action","cache","connection","feeData","getFeeData","prepareRequest","_startPending","_pendingFilter","pendingFilter","filterId","seq","listenerCount","allowExtra","allowed","WS","WebSocket","websocket_provider_awaiter","websocket_provider_logger","NextId","_wsReady","_websocket","onopen","_requests","onmessage","messageEvent","callback","_subs","subscription","processFunc","fauxPoll","_detectNetwork","rid","param","subIdPromise","_subIds","subId","_subscribe","emitReceipt","readyState","CONNECTING","onerror","close","url_json_rpc_provider_logger","url_json_rpc_provider_awaiter","apiKey","getApiKey","getUrl","alchemy_provider_logger","defaultApiKey","getWebSocketProvider","host","allowGzip","throttleCallback","attempt","cloudflare_provider_logger","cloudflare_provider_awaiter","etherscan_provider_awaiter","etherscan_provider_logger","getTransactionPostData","maxFeePerGs","storageKeys","etherscan_provider_getResult","throttleRetry","getJsonResult","checkLogTag","etherscan_provider_defaultApiKey","etherscan_provider_checkError","getBaseUrl","accum","baseUrl","apikey","getPostUrl","getPostData","throttleSlotInterval","payloadStr","procFunc","txhash","postData","topic0","blocks","getBlock","ethusd","endBlock","startblock","endblock","item","timeStamp","floor","random","tmp","fallback_provider_awaiter","fallback_provider_logger","checkNetworks","networks","median","maxDelta","middle","serialize","isBigNumber","nextRid","fallback_provider_stall","cancel","promise","getPromise","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","start","waitForSync","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","providers","quorum","providerConfigs","configOrProvider","stallTimeout","priority","total","_highestBlockNumber","results","getProcessFunc","configs","tally","first","t0","inflightWeight","staller","backend","waiting","errorCode","props","infura_provider_logger","defaultProjectId","projectId","projectSecret","apiKeyObj","assertArgument","user","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","nodesmith_provider_logger","pocket_provider_logger","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","applicationId","loadBalancer","applicationSecretKey","web3_provider_logger","buildWeb3LegacyFetcher","sendFunc","jsonRpcFetchFunc","subprovider","isMetaMask","sendAsync","providers_lib_esm_logger","_defaultProvider","regexBytes","regexNumber","regexArray","solidity_lib_esm_logger","_pack","toTwos","byteLength","baseType","tight","_ethers","SHA256","K","Uint32Array","h0","h1","h2","h3","h4","h5","h6","h7","off","h","u","t1","t2","bytesLeft","bitLenHi","bitLenLo","numZeros","PBKDF2_HMAC_SHA256_OneIter","innerLen","inner","outerKey","incrementCounter","concat","blockmix_salsa8","BY","Yi","x","_X","arraycopy","blockxor","salsa20_8","B","D","src","srcPos","dest","checkBufferish","ensureInteger","_scrypt","MAX_VALUE","XY","totalOps","currentOp","lastPercent10","stop","state","i0","i1","Bi","limit","nextTick","setImmediate","incrementalSMix","steps","percent10","lastProgress","progress","__unused_webpack___webpack_module__","jsutils_nodejsCustomInspectSymbol","for","_typeof","obj","inspect","formatValue","seenValues","formatObjectValue","previouslySeenValues","customInspectFn","getCustomFn","customValue","formatArray","formatObject","getObjectTag","properties","min","remaining","items","defineInspect","classObject","fn","toJSON","invariant","condition","Boolean","isNode","maybeNode","Location","startToken","endToken","source","end","_proto","Token","line","column","prev","_proto2","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","BREAK","getVisitFn","visitor","isLeaving","kindVisitor","kindSpecificVisitor","leave","enter","specificVisitor","specificKindVisitor","ast","visit","visitorKeys","stack","inArray","edits","parent","ancestors","newRoot","_visitorKeys$node$kin","isEdited","_i2","_Object$keys2","editOffset","ii","editKey","editValue","splice","visitFn","printDocASTReducer","varDefs","wrap","variableDefinitions","directives","selectionSet","_ref","variable","defaultValue","_ref2","selections","_ref3","alias","argsLine","indent","_ref4","_ref5","_ref6","typeCondition","_ref7","_ref8","_ref9","_ref10","isBlockString","printBlockString","indentation","preferMultipleLines","isSingleLine","hasLeadingSpace","hasTrailingQuote","hasTrailingSlash","printAsMultipleLines","_ref11","_ref12","_ref13","_ref14","fields","_ref15","_ref16","_ref17","_ref18","_ref19","addDescription","_ref20","operationTypes","_ref21","_ref22","_ref23","interfaces","_ref24","hasMultilineItems","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","repeatable","locations","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","cb","maybeArray","_maybeArray$filter$jo","separator","maybeString","isMultiline"],"sourceRoot":""}