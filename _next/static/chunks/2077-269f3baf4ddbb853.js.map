{"version":3,"file":"static/chunks/2077-269f3baf4ddbb853.js","mappings":"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","sources":["webpack://_N_E/./node_modules/numeral/numeral.js","webpack://_N_E/<anon>"],"sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[2077],{\n\n/***/ 92077:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n\n\n/***/ })\n\n}]);"],"names":["self","push","module","exports","__webpack_require__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","factory","undefined","call","decimal","binary","unformatRegex","numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","neg","Math","includes","indexOf","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","allSuffixes","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","hours","floor","minutes","seconds","timeArray"],"sourceRoot":""}