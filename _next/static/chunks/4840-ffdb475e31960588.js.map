{"version":3,"file":"static/chunks/4840-ffdb475e31960588.js","mappings":"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","sources":["webpack://_N_E/./node_modules/swiper/swiper-bundle.min.css","webpack://_N_E/./node_modules/swiper/components-shared/utils.js","webpack://_N_E/./node_modules/swiper/components-shared/params-list.js","webpack://_N_E/./node_modules/swiper/components-shared/get-params.js","webpack://_N_E/./node_modules/swiper/components-shared/mount-swiper.js","webpack://_N_E/./node_modules/swiper/react/loop.js","webpack://_N_E/./node_modules/swiper/components-shared/get-changed-params.js","webpack://_N_E/./node_modules/swiper/react/get-children.js","webpack://_N_E/./node_modules/swiper/components-shared/update-swiper.js","webpack://_N_E/./node_modules/swiper/react/virtual.js","webpack://_N_E/./node_modules/swiper/components-shared/update-on-virtual-data.js","webpack://_N_E/./node_modules/swiper/react/use-isomorphic-layout-effect.js","webpack://_N_E/./node_modules/swiper/react/context.js","webpack://_N_E/./node_modules/swiper/react/swiper.js","webpack://_N_E/./node_modules/swiper/react/swiper-slide.js","webpack://_N_E/./node_modules/swiper/react/swiper-react.js","webpack://_N_E/./node_modules/ssr-window/ssr-window.esm.js","webpack://_N_E/./node_modules/dom7/dom7.esm.js","webpack://_N_E/./node_modules/swiper/shared/dom.js","webpack://_N_E/./node_modules/swiper/shared/utils.js","webpack://_N_E/./node_modules/swiper/shared/get-support.js","webpack://_N_E/./node_modules/swiper/shared/get-device.js","webpack://_N_E/./node_modules/swiper/shared/get-browser.js","webpack://_N_E/./node_modules/swiper/core/modules/resize/resize.js","webpack://_N_E/./node_modules/swiper/core/modules/observer/observer.js","webpack://_N_E/./node_modules/swiper/core/events-emitter.js","webpack://_N_E/./node_modules/swiper/core/update/updateSize.js","webpack://_N_E/./node_modules/swiper/core/update/updateSlides.js","webpack://_N_E/./node_modules/swiper/core/update/updateAutoHeight.js","webpack://_N_E/./node_modules/swiper/core/update/updateSlidesOffset.js","webpack://_N_E/./node_modules/swiper/core/update/updateSlidesProgress.js","webpack://_N_E/./node_modules/swiper/core/update/updateProgress.js","webpack://_N_E/./node_modules/swiper/core/update/updateSlidesClasses.js","webpack://_N_E/./node_modules/swiper/core/update/updateActiveIndex.js","webpack://_N_E/./node_modules/swiper/core/update/updateClickedSlide.js","webpack://_N_E/./node_modules/swiper/core/update/index.js","webpack://_N_E/./node_modules/swiper/core/translate/getTranslate.js","webpack://_N_E/./node_modules/swiper/core/translate/setTranslate.js","webpack://_N_E/./node_modules/swiper/core/translate/minTranslate.js","webpack://_N_E/./node_modules/swiper/core/translate/maxTranslate.js","webpack://_N_E/./node_modules/swiper/core/translate/translateTo.js","webpack://_N_E/./node_modules/swiper/core/translate/index.js","webpack://_N_E/./node_modules/swiper/core/transition/setTransition.js","webpack://_N_E/./node_modules/swiper/core/transition/transitionEmit.js","webpack://_N_E/./node_modules/swiper/core/transition/transitionStart.js","webpack://_N_E/./node_modules/swiper/core/transition/transitionEnd.js","webpack://_N_E/./node_modules/swiper/core/transition/index.js","webpack://_N_E/./node_modules/swiper/core/slide/slideTo.js","webpack://_N_E/./node_modules/swiper/core/slide/slideToLoop.js","webpack://_N_E/./node_modules/swiper/core/slide/slideNext.js","webpack://_N_E/./node_modules/swiper/core/slide/slidePrev.js","webpack://_N_E/./node_modules/swiper/core/slide/slideReset.js","webpack://_N_E/./node_modules/swiper/core/slide/slideToClosest.js","webpack://_N_E/./node_modules/swiper/core/slide/slideToClickedSlide.js","webpack://_N_E/./node_modules/swiper/core/slide/index.js","webpack://_N_E/./node_modules/swiper/core/loop/loopCreate.js","webpack://_N_E/./node_modules/swiper/core/loop/loopFix.js","webpack://_N_E/./node_modules/swiper/core/loop/loopDestroy.js","webpack://_N_E/./node_modules/swiper/core/loop/index.js","webpack://_N_E/./node_modules/swiper/core/grab-cursor/setGrabCursor.js","webpack://_N_E/./node_modules/swiper/core/grab-cursor/unsetGrabCursor.js","webpack://_N_E/./node_modules/swiper/core/grab-cursor/index.js","webpack://_N_E/./node_modules/swiper/core/events/onTouchStart.js","webpack://_N_E/./node_modules/swiper/core/events/onTouchMove.js","webpack://_N_E/./node_modules/swiper/core/events/onTouchEnd.js","webpack://_N_E/./node_modules/swiper/core/events/onResize.js","webpack://_N_E/./node_modules/swiper/core/events/onClick.js","webpack://_N_E/./node_modules/swiper/core/events/onScroll.js","webpack://_N_E/./node_modules/swiper/core/events/index.js","webpack://_N_E/./node_modules/swiper/core/breakpoints/setBreakpoint.js","webpack://_N_E/./node_modules/swiper/core/breakpoints/getBreakpoint.js","webpack://_N_E/./node_modules/swiper/core/breakpoints/index.js","webpack://_N_E/./node_modules/swiper/core/classes/addClasses.js","webpack://_N_E/./node_modules/swiper/core/classes/removeClasses.js","webpack://_N_E/./node_modules/swiper/core/classes/index.js","webpack://_N_E/./node_modules/swiper/core/images/loadImage.js","webpack://_N_E/./node_modules/swiper/core/images/preloadImages.js","webpack://_N_E/./node_modules/swiper/core/images/index.js","webpack://_N_E/./node_modules/swiper/core/check-overflow/index.js","webpack://_N_E/./node_modules/swiper/core/defaults.js","webpack://_N_E/./node_modules/swiper/core/moduleExtendParams.js","webpack://_N_E/./node_modules/swiper/core/core.js","webpack://_N_E/./node_modules/swiper/modules/virtual/virtual.js","webpack://_N_E/./node_modules/swiper/modules/keyboard/keyboard.js","webpack://_N_E/./node_modules/swiper/modules/mousewheel/mousewheel.js","webpack://_N_E/./node_modules/swiper/shared/create-element-if-not-defined.js","webpack://_N_E/./node_modules/swiper/modules/navigation/navigation.js","webpack://_N_E/./node_modules/swiper/modules/pagination/pagination.js","webpack://_N_E/./node_modules/swiper/modules/scrollbar/scrollbar.js","webpack://_N_E/./node_modules/swiper/modules/parallax/parallax.js","webpack://_N_E/./node_modules/swiper/modules/zoom/zoom.js","webpack://_N_E/./node_modules/swiper/modules/lazy/lazy.js","webpack://_N_E/./node_modules/swiper/modules/controller/controller.js","webpack://_N_E/./node_modules/swiper/modules/a11y/a11y.js","webpack://_N_E/./node_modules/swiper/modules/history/history.js","webpack://_N_E/./node_modules/swiper/modules/hash-navigation/hash-navigation.js","webpack://_N_E/./node_modules/swiper/modules/autoplay/autoplay.js","webpack://_N_E/./node_modules/swiper/modules/thumbs/thumbs.js","webpack://_N_E/./node_modules/swiper/modules/free-mode/free-mode.js","webpack://_N_E/./node_modules/swiper/modules/effect-cube/effect-cube.js","webpack://_N_E/./node_modules/swiper/shared/create-shadow.js","webpack://_N_E/./node_modules/swiper/modules/effect-flip/effect-flip.js","webpack://_N_E/./node_modules/swiper/modules/effect-coverflow/effect-coverflow.js","webpack://_N_E/./node_modules/swiper/modules/effect-creative/effect-creative.js","webpack://_N_E/./node_modules/swiper/modules/effect-cards/effect-cards.js","webpack://_N_E/./node_modules/swiper/swiper.esm.js","webpack://_N_E/<anon>"],"sourcesContent":["// extracted by mini-css-extract-plugin","function isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction extend(target, src) {\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n  Object.keys(src).filter(key => noExtend.indexOf(key) < 0).forEach(key => {\n    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      if (src[key].__swiper__) target[key] = src[key];else extend(target[key], src[key]);\n    } else {\n      target[key] = src[key];\n    }\n  });\n}\n\nfunction needsNavigation(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return params.navigation && typeof params.navigation.nextEl === 'undefined' && typeof params.navigation.prevEl === 'undefined';\n}\n\nfunction needsPagination(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return params.pagination && typeof params.pagination.el === 'undefined';\n}\n\nfunction needsScrollbar(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return params.scrollbar && typeof params.scrollbar.el === 'undefined';\n}\n\nfunction uniqueClasses(classNames) {\n  if (classNames === void 0) {\n    classNames = '';\n  }\n\n  const classes = classNames.split(' ').map(c => c.trim()).filter(c => !!c);\n  const unique = [];\n  classes.forEach(c => {\n    if (unique.indexOf(c) < 0) unique.push(c);\n  });\n  return unique.join(' ');\n}\n\nexport { isObject, extend, needsNavigation, needsPagination, needsScrollbar, uniqueClasses };","/* underscore in name -> watch for changes */\nconst paramsList = ['modules', 'init', '_direction', 'touchEventsTarget', 'initialSlide', '_speed', 'cssMode', 'updateOnWindowResize', 'resizeObserver', 'nested', 'focusableElements', '_enabled', '_width', '_height', 'preventInteractionOnTransition', 'userAgent', 'url', '_edgeSwipeDetection', '_edgeSwipeThreshold', '_freeMode', '_autoHeight', 'setWrapperSize', 'virtualTranslate', '_effect', 'breakpoints', '_spaceBetween', '_slidesPerView', 'maxBackfaceHiddenSlides', '_grid', '_slidesPerGroup', '_slidesPerGroupSkip', '_slidesPerGroupAuto', '_centeredSlides', '_centeredSlidesBounds', '_slidesOffsetBefore', '_slidesOffsetAfter', 'normalizeSlideIndex', '_centerInsufficientSlides', '_watchOverflow', 'roundLengths', 'touchRatio', 'touchAngle', 'simulateTouch', '_shortSwipes', '_longSwipes', 'longSwipesRatio', 'longSwipesMs', '_followFinger', 'allowTouchMove', '_threshold', 'touchMoveStopPropagation', 'touchStartPreventDefault', 'touchStartForcePreventDefault', 'touchReleaseOnEdges', 'uniqueNavElements', '_resistance', '_resistanceRatio', '_watchSlidesProgress', '_grabCursor', 'preventClicks', 'preventClicksPropagation', '_slideToClickedSlide', '_preloadImages', 'updateOnImagesReady', '_loop', '_loopAdditionalSlides', '_loopedSlides', '_loopFillGroupWithBlank', 'loopPreventsSlide', '_rewind', '_allowSlidePrev', '_allowSlideNext', '_swipeHandler', '_noSwiping', 'noSwipingClass', 'noSwipingSelector', 'passiveListeners', 'containerModifierClass', 'slideClass', 'slideBlankClass', 'slideActiveClass', 'slideDuplicateActiveClass', 'slideVisibleClass', 'slideDuplicateClass', 'slideNextClass', 'slideDuplicateNextClass', 'slidePrevClass', 'slideDuplicatePrevClass', 'wrapperClass', 'runCallbacksOnInit', 'observer', 'observeParents', 'observeSlideChildren', // modules\n'a11y', '_autoplay', '_controller', 'coverflowEffect', 'cubeEffect', 'fadeEffect', 'flipEffect', 'creativeEffect', 'cardsEffect', 'hashNavigation', 'history', 'keyboard', 'lazy', 'mousewheel', '_navigation', '_pagination', 'parallax', '_scrollbar', '_thumbs', 'virtual', 'zoom'];\nexport { paramsList };","import Swiper from 'swiper';\nimport { isObject, extend } from './utils.js';\nimport { paramsList } from './params-list.js';\n\nfunction getParams(obj, splitEvents) {\n  if (obj === void 0) {\n    obj = {};\n  }\n\n  if (splitEvents === void 0) {\n    splitEvents = true;\n  }\n\n  const params = {\n    on: {}\n  };\n  const events = {};\n  const passedParams = {};\n  extend(params, Swiper.defaults);\n  extend(params, Swiper.extendedDefaults);\n  params._emitClasses = true;\n  params.init = false;\n  const rest = {};\n  const allowedParams = paramsList.map(key => key.replace(/_/, ''));\n  const plainObj = Object.assign({}, obj);\n  Object.keys(plainObj).forEach(key => {\n    if (typeof obj[key] === 'undefined') return;\n\n    if (allowedParams.indexOf(key) >= 0) {\n      if (isObject(obj[key])) {\n        params[key] = {};\n        passedParams[key] = {};\n        extend(params[key], obj[key]);\n        extend(passedParams[key], obj[key]);\n      } else {\n        params[key] = obj[key];\n        passedParams[key] = obj[key];\n      }\n    } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === 'function') {\n      if (splitEvents) {\n        events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      } else {\n        params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      }\n    } else {\n      rest[key] = obj[key];\n    }\n  });\n  ['navigation', 'pagination', 'scrollbar'].forEach(key => {\n    if (params[key] === true) params[key] = {};\n    if (params[key] === false) delete params[key];\n  });\n  return {\n    params,\n    passedParams,\n    rest,\n    events\n  };\n}\n\nexport { getParams };","import { needsNavigation, needsPagination, needsScrollbar } from './utils.js';\n\nfunction mountSwiper(_ref, swiperParams) {\n  let {\n    el,\n    nextEl,\n    prevEl,\n    paginationEl,\n    scrollbarEl,\n    swiper\n  } = _ref;\n\n  if (needsNavigation(swiperParams) && nextEl && prevEl) {\n    swiper.params.navigation.nextEl = nextEl;\n    swiper.originalParams.navigation.nextEl = nextEl;\n    swiper.params.navigation.prevEl = prevEl;\n    swiper.originalParams.navigation.prevEl = prevEl;\n  }\n\n  if (needsPagination(swiperParams) && paginationEl) {\n    swiper.params.pagination.el = paginationEl;\n    swiper.originalParams.pagination.el = paginationEl;\n  }\n\n  if (needsScrollbar(swiperParams) && scrollbarEl) {\n    swiper.params.scrollbar.el = scrollbarEl;\n    swiper.originalParams.scrollbar.el = scrollbarEl;\n  }\n\n  swiper.init(el);\n}\n\nexport { mountSwiper };","import React from 'react';\nimport Swiper from 'swiper';\n\nfunction calcLoopedSlides(slides, swiperParams) {\n  let slidesPerViewParams = swiperParams.slidesPerView;\n\n  if (swiperParams.breakpoints) {\n    const breakpoint = Swiper.prototype.getBreakpoint(swiperParams.breakpoints);\n    const breakpointOnlyParams = breakpoint in swiperParams.breakpoints ? swiperParams.breakpoints[breakpoint] : undefined;\n\n    if (breakpointOnlyParams && breakpointOnlyParams.slidesPerView) {\n      slidesPerViewParams = breakpointOnlyParams.slidesPerView;\n    }\n  }\n\n  let loopedSlides = Math.ceil(parseFloat(swiperParams.loopedSlides || slidesPerViewParams, 10));\n  loopedSlides += swiperParams.loopAdditionalSlides;\n\n  if (loopedSlides > slides.length) {\n    loopedSlides = slides.length;\n  }\n\n  return loopedSlides;\n}\n\nfunction renderLoop(swiper, slides, swiperParams) {\n  const modifiedSlides = slides.map((child, index) => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      swiper,\n      'data-swiper-slide-index': index\n    });\n  });\n\n  function duplicateSlide(child, index, position) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      key: `${child.key}-duplicate-${index}-${position}`,\n      className: `${child.props.className || ''} ${swiperParams.slideDuplicateClass}`\n    });\n  }\n\n  if (swiperParams.loopFillGroupWithBlank) {\n    const blankSlidesNum = swiperParams.slidesPerGroup - modifiedSlides.length % swiperParams.slidesPerGroup;\n\n    if (blankSlidesNum !== swiperParams.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankSlide = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${swiperParams.slideClass} ${swiperParams.slideBlankClass}`\n        });\n        modifiedSlides.push(blankSlide);\n      }\n    }\n  }\n\n  if (swiperParams.slidesPerView === 'auto' && !swiperParams.loopedSlides) {\n    swiperParams.loopedSlides = modifiedSlides.length;\n  }\n\n  const loopedSlides = calcLoopedSlides(modifiedSlides, swiperParams);\n  const prependSlides = [];\n  const appendSlides = [];\n  modifiedSlides.forEach((child, index) => {\n    if (index < loopedSlides) {\n      appendSlides.push(duplicateSlide(child, index, 'prepend'));\n    }\n\n    if (index < modifiedSlides.length && index >= modifiedSlides.length - loopedSlides) {\n      prependSlides.push(duplicateSlide(child, index, 'append'));\n    }\n  });\n\n  if (swiper) {\n    swiper.loopedSlides = loopedSlides;\n  }\n\n  return [...prependSlides, ...modifiedSlides, ...appendSlides];\n}\n\nexport { calcLoopedSlides, renderLoop };","import { paramsList } from './params-list.js';\nimport { isObject } from './utils.js';\n\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\n  const keys = [];\n  if (!oldParams) return keys;\n\n  const addKey = key => {\n    if (keys.indexOf(key) < 0) keys.push(key);\n  };\n\n  if (children && oldChildren) {\n    const oldChildrenKeys = oldChildren.map(getKey);\n    const childrenKeys = children.map(getKey);\n    if (oldChildrenKeys.join('') !== childrenKeys.join('')) addKey('children');\n    if (oldChildren.length !== children.length) addKey('children');\n  }\n\n  const watchParams = paramsList.filter(key => key[0] === '_').map(key => key.replace(/_/, ''));\n  watchParams.forEach(key => {\n    if (key in swiperParams && key in oldParams) {\n      if (isObject(swiperParams[key]) && isObject(oldParams[key])) {\n        const newKeys = Object.keys(swiperParams[key]);\n        const oldKeys = Object.keys(oldParams[key]);\n\n        if (newKeys.length !== oldKeys.length) {\n          addKey(key);\n        } else {\n          newKeys.forEach(newKey => {\n            if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\n              addKey(key);\n            }\n          });\n          oldKeys.forEach(oldKey => {\n            if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);\n          });\n        }\n      } else if (swiperParams[key] !== oldParams[key]) {\n        addKey(key);\n      }\n    }\n  });\n  return keys;\n}\n\nexport { getChangedParams };","import React from 'react';\n\nfunction processChildren(c) {\n  const slides = [];\n  React.Children.toArray(c).forEach(child => {\n    if (child.type && child.type.displayName === 'SwiperSlide') {\n      slides.push(child);\n    } else if (child.props && child.props.children) {\n      processChildren(child.props.children).forEach(slide => slides.push(slide));\n    }\n  });\n  return slides;\n}\n\nfunction getChildren(c) {\n  const slides = [];\n  const slots = {\n    'container-start': [],\n    'container-end': [],\n    'wrapper-start': [],\n    'wrapper-end': []\n  };\n  React.Children.toArray(c).forEach(child => {\n    if (child.type && child.type.displayName === 'SwiperSlide') {\n      slides.push(child);\n    } else if (child.props && child.props.slot && slots[child.props.slot]) {\n      slots[child.props.slot].push(child);\n    } else if (child.props && child.props.children) {\n      const foundSlides = processChildren(child.props.children);\n\n      if (foundSlides.length > 0) {\n        foundSlides.forEach(slide => slides.push(slide));\n      } else {\n        slots['container-end'].push(child);\n      }\n    } else {\n      slots['container-end'].push(child);\n    }\n  });\n  return {\n    slides,\n    slots\n  };\n}\n\nexport { getChildren };","import { isObject, extend } from './utils.js';\n\nfunction updateSwiper(_ref) {\n  let {\n    swiper,\n    slides,\n    passedParams,\n    changedParams,\n    nextEl,\n    prevEl,\n    scrollbarEl,\n    paginationEl\n  } = _ref;\n  const updateParams = changedParams.filter(key => key !== 'children' && key !== 'direction');\n  const {\n    params: currentParams,\n    pagination,\n    navigation,\n    scrollbar,\n    virtual,\n    thumbs\n  } = swiper;\n  let needThumbsInit;\n  let needControllerInit;\n  let needPaginationInit;\n  let needScrollbarInit;\n  let needNavigationInit;\n\n  if (changedParams.includes('thumbs') && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\n    needThumbsInit = true;\n  }\n\n  if (changedParams.includes('controller') && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n    needControllerInit = true;\n  }\n\n  if (changedParams.includes('pagination') && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n    needPaginationInit = true;\n  }\n\n  if (changedParams.includes('scrollbar') && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n    needScrollbarInit = true;\n  }\n\n  if (changedParams.includes('navigation') && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n    needNavigationInit = true;\n  }\n\n  const destroyModule = mod => {\n    if (!swiper[mod]) return;\n    swiper[mod].destroy();\n\n    if (mod === 'navigation') {\n      currentParams[mod].prevEl = undefined;\n      currentParams[mod].nextEl = undefined;\n      swiper[mod].prevEl = undefined;\n      swiper[mod].nextEl = undefined;\n    } else {\n      currentParams[mod].el = undefined;\n      swiper[mod].el = undefined;\n    }\n  };\n\n  updateParams.forEach(key => {\n    if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n      extend(currentParams[key], passedParams[key]);\n    } else {\n      const newValue = passedParams[key];\n\n      if ((newValue === true || newValue === false) && (key === 'navigation' || key === 'pagination' || key === 'scrollbar')) {\n        if (newValue === false) {\n          destroyModule(key);\n        }\n      } else {\n        currentParams[key] = passedParams[key];\n      }\n    }\n  });\n\n  if (updateParams.includes('controller') && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (changedParams.includes('children') && slides && virtual && currentParams.virtual.enabled) {\n    virtual.slides = slides;\n    virtual.update(true);\n  } else if (changedParams.includes('children') && swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n\n  if (needThumbsInit) {\n    const initialized = thumbs.init();\n    if (initialized) thumbs.update(true);\n  }\n\n  if (needControllerInit) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (needPaginationInit) {\n    if (paginationEl) currentParams.pagination.el = paginationEl;\n    pagination.init();\n    pagination.render();\n    pagination.update();\n  }\n\n  if (needScrollbarInit) {\n    if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\n    scrollbar.init();\n    scrollbar.updateSize();\n    scrollbar.setTranslate();\n  }\n\n  if (needNavigationInit) {\n    if (nextEl) currentParams.navigation.nextEl = nextEl;\n    if (prevEl) currentParams.navigation.prevEl = prevEl;\n    navigation.init();\n    navigation.update();\n  }\n\n  if (changedParams.includes('allowSlideNext')) {\n    swiper.allowSlideNext = passedParams.allowSlideNext;\n  }\n\n  if (changedParams.includes('allowSlidePrev')) {\n    swiper.allowSlidePrev = passedParams.allowSlidePrev;\n  }\n\n  if (changedParams.includes('direction')) {\n    swiper.changeDirection(passedParams.direction, false);\n  }\n\n  swiper.update();\n}\n\nexport { updateSwiper };","import React from 'react';\n\nfunction renderVirtual(swiper, slides, virtualData) {\n  if (!virtualData) return null;\n  const style = swiper.isHorizontal() ? {\n    [swiper.rtlTranslate ? 'right' : 'left']: `${virtualData.offset}px`\n  } : {\n    top: `${virtualData.offset}px`\n  };\n  return slides.filter((child, index) => index >= virtualData.from && index <= virtualData.to).map(child => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      swiper,\n      style\n    });\n  });\n}\n\nexport { renderVirtual };","export const updateOnVirtualData = swiper => {\n  if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled) return;\n  swiper.updateSlides();\n  swiper.updateProgress();\n  swiper.updateSlidesClasses();\n\n  if (swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n\n  if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\n    swiper.parallax.setTranslate();\n  }\n};","import { useEffect, useLayoutEffect } from 'react';\n\nfunction useIsomorphicLayoutEffect(callback, deps) {\n  // eslint-disable-next-line\n  if (typeof window === 'undefined') return useEffect(callback, deps);\n  return useLayoutEffect(callback, deps);\n}\n\nexport { useIsomorphicLayoutEffect };","import { createContext, useContext } from 'react';\nexport const SwiperSlideContext = /*#__PURE__*/createContext(null);\nexport const useSwiperSlide = () => {\n  return useContext(SwiperSlideContext);\n};\nexport const SwiperContext = /*#__PURE__*/createContext(null);\nexport const useSwiper = () => {\n  return useContext(SwiperContext);\n};","function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useRef, useState, useEffect, forwardRef } from 'react';\nimport SwiperCore from 'swiper';\nimport { getParams } from '../components-shared/get-params.js';\nimport { mountSwiper } from '../components-shared/mount-swiper.js';\nimport { needsScrollbar, needsNavigation, needsPagination, uniqueClasses, extend } from '../components-shared/utils.js';\nimport { renderLoop, calcLoopedSlides } from './loop.js';\nimport { getChangedParams } from '../components-shared/get-changed-params.js';\nimport { getChildren } from './get-children.js';\nimport { updateSwiper } from '../components-shared/update-swiper.js';\nimport { renderVirtual } from './virtual.js';\nimport { updateOnVirtualData } from '../components-shared/update-on-virtual-data.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\nimport { SwiperContext } from './context.js';\nconst Swiper = /*#__PURE__*/forwardRef(function (_temp, externalElRef) {\n  let {\n    className,\n    tag: Tag = 'div',\n    wrapperTag: WrapperTag = 'div',\n    children,\n    onSwiper,\n    ...rest\n  } = _temp === void 0 ? {} : _temp;\n  let eventsAssigned = false;\n  const [containerClasses, setContainerClasses] = useState('swiper');\n  const [virtualData, setVirtualData] = useState(null);\n  const [breakpointChanged, setBreakpointChanged] = useState(false);\n  const initializedRef = useRef(false);\n  const swiperElRef = useRef(null);\n  const swiperRef = useRef(null);\n  const oldPassedParamsRef = useRef(null);\n  const oldSlides = useRef(null);\n  const nextElRef = useRef(null);\n  const prevElRef = useRef(null);\n  const paginationElRef = useRef(null);\n  const scrollbarElRef = useRef(null);\n  const {\n    params: swiperParams,\n    passedParams,\n    rest: restProps,\n    events\n  } = getParams(rest);\n  const {\n    slides,\n    slots\n  } = getChildren(children);\n\n  const onBeforeBreakpoint = () => {\n    setBreakpointChanged(!breakpointChanged);\n  };\n\n  Object.assign(swiperParams.on, {\n    _containerClasses(swiper, classes) {\n      setContainerClasses(classes);\n    }\n\n  });\n\n  const initSwiper = () => {\n    // init swiper\n    Object.assign(swiperParams.on, events);\n    eventsAssigned = true;\n    swiperRef.current = new SwiperCore(swiperParams);\n\n    swiperRef.current.loopCreate = () => {};\n\n    swiperRef.current.loopDestroy = () => {};\n\n    if (swiperParams.loop) {\n      swiperRef.current.loopedSlides = calcLoopedSlides(slides, swiperParams);\n    }\n\n    if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {\n      swiperRef.current.virtual.slides = slides;\n      const extendWith = {\n        cache: false,\n        slides,\n        renderExternal: setVirtualData,\n        renderExternalUpdate: false\n      };\n      extend(swiperRef.current.params.virtual, extendWith);\n      extend(swiperRef.current.originalParams.virtual, extendWith);\n    }\n  };\n\n  if (!swiperElRef.current) {\n    initSwiper();\n  } // Listen for breakpoints change\n\n\n  if (swiperRef.current) {\n    swiperRef.current.on('_beforeBreakpoint', onBeforeBreakpoint);\n  }\n\n  const attachEvents = () => {\n    if (eventsAssigned || !events || !swiperRef.current) return;\n    Object.keys(events).forEach(eventName => {\n      swiperRef.current.on(eventName, events[eventName]);\n    });\n  };\n\n  const detachEvents = () => {\n    if (!events || !swiperRef.current) return;\n    Object.keys(events).forEach(eventName => {\n      swiperRef.current.off(eventName, events[eventName]);\n    });\n  };\n\n  useEffect(() => {\n    return () => {\n      if (swiperRef.current) swiperRef.current.off('_beforeBreakpoint', onBeforeBreakpoint);\n    };\n  }); // set initialized flag\n\n  useEffect(() => {\n    if (!initializedRef.current && swiperRef.current) {\n      swiperRef.current.emitSlidesClasses();\n      initializedRef.current = true;\n    }\n  }); // mount swiper\n\n  useIsomorphicLayoutEffect(() => {\n    if (externalElRef) {\n      externalElRef.current = swiperElRef.current;\n    }\n\n    if (!swiperElRef.current) return;\n\n    if (swiperRef.current.destroyed) {\n      initSwiper();\n    }\n\n    mountSwiper({\n      el: swiperElRef.current,\n      nextEl: nextElRef.current,\n      prevEl: prevElRef.current,\n      paginationEl: paginationElRef.current,\n      scrollbarEl: scrollbarElRef.current,\n      swiper: swiperRef.current\n    }, swiperParams);\n    if (onSwiper) onSwiper(swiperRef.current); // eslint-disable-next-line\n\n    return () => {\n      if (swiperRef.current && !swiperRef.current.destroyed) {\n        swiperRef.current.destroy(true, false);\n      }\n    };\n  }, []); // watch for params change\n\n  useIsomorphicLayoutEffect(() => {\n    attachEvents();\n    const changedParams = getChangedParams(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, c => c.key);\n    oldPassedParamsRef.current = passedParams;\n    oldSlides.current = slides;\n\n    if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {\n      updateSwiper({\n        swiper: swiperRef.current,\n        slides,\n        passedParams,\n        changedParams,\n        nextEl: nextElRef.current,\n        prevEl: prevElRef.current,\n        scrollbarEl: scrollbarElRef.current,\n        paginationEl: paginationElRef.current\n      });\n    }\n\n    return () => {\n      detachEvents();\n    };\n  }); // update on virtual update\n\n  useIsomorphicLayoutEffect(() => {\n    updateOnVirtualData(swiperRef.current);\n  }, [virtualData]); // bypass swiper instance to slides\n\n  function renderSlides() {\n    if (swiperParams.virtual) {\n      return renderVirtual(swiperRef.current, slides, virtualData);\n    }\n\n    if (!swiperParams.loop || swiperRef.current && swiperRef.current.destroyed) {\n      return slides.map(child => {\n        return /*#__PURE__*/React.cloneElement(child, {\n          swiper: swiperRef.current\n        });\n      });\n    }\n\n    return renderLoop(swiperRef.current, slides, swiperParams);\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    ref: swiperElRef,\n    className: uniqueClasses(`${containerClasses}${className ? ` ${className}` : ''}`)\n  }, restProps), /*#__PURE__*/React.createElement(SwiperContext.Provider, {\n    value: swiperRef.current\n  }, slots['container-start'], /*#__PURE__*/React.createElement(WrapperTag, {\n    className: \"swiper-wrapper\"\n  }, slots['wrapper-start'], renderSlides(), slots['wrapper-end']), needsNavigation(swiperParams) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    ref: prevElRef,\n    className: \"swiper-button-prev\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: nextElRef,\n    className: \"swiper-button-next\"\n  })), needsScrollbar(swiperParams) && /*#__PURE__*/React.createElement(\"div\", {\n    ref: scrollbarElRef,\n    className: \"swiper-scrollbar\"\n  }), needsPagination(swiperParams) && /*#__PURE__*/React.createElement(\"div\", {\n    ref: paginationElRef,\n    className: \"swiper-pagination\"\n  }), slots['container-end']));\n});\nSwiper.displayName = 'Swiper';\nexport { Swiper };","function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useRef, useState, forwardRef } from 'react';\nimport { uniqueClasses } from '../components-shared/utils.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\nimport { SwiperSlideContext } from './context.js';\nconst SwiperSlide = /*#__PURE__*/forwardRef(function (_temp, externalRef) {\n  let {\n    tag: Tag = 'div',\n    children,\n    className = '',\n    swiper,\n    zoom,\n    virtualIndex,\n    ...rest\n  } = _temp === void 0 ? {} : _temp;\n  const slideElRef = useRef(null);\n  const [slideClasses, setSlideClasses] = useState('swiper-slide');\n\n  function updateClasses(_s, el, classNames) {\n    if (el === slideElRef.current) {\n      setSlideClasses(classNames);\n    }\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (externalRef) {\n      externalRef.current = slideElRef.current;\n    }\n\n    if (!slideElRef.current || !swiper) {\n      return;\n    }\n\n    if (swiper.destroyed) {\n      if (slideClasses !== 'swiper-slide') {\n        setSlideClasses('swiper-slide');\n      }\n\n      return;\n    }\n\n    swiper.on('_slideClass', updateClasses); // eslint-disable-next-line\n\n    return () => {\n      if (!swiper) return;\n      swiper.off('_slideClass', updateClasses);\n    };\n  });\n  useIsomorphicLayoutEffect(() => {\n    if (swiper && slideElRef.current && !swiper.destroyed) {\n      setSlideClasses(swiper.getSlideClasses(slideElRef.current));\n    }\n  }, [swiper]);\n  const slideData = {\n    isActive: slideClasses.indexOf('swiper-slide-active') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-active') >= 0,\n    isVisible: slideClasses.indexOf('swiper-slide-visible') >= 0,\n    isDuplicate: slideClasses.indexOf('swiper-slide-duplicate') >= 0,\n    isPrev: slideClasses.indexOf('swiper-slide-prev') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-prev') >= 0,\n    isNext: slideClasses.indexOf('swiper-slide-next') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-next') >= 0\n  };\n\n  const renderChildren = () => {\n    return typeof children === 'function' ? children(slideData) : children;\n  };\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    ref: slideElRef,\n    className: uniqueClasses(`${slideClasses}${className ? ` ${className}` : ''}`),\n    \"data-swiper-slide-index\": virtualIndex\n  }, rest), /*#__PURE__*/React.createElement(SwiperSlideContext.Provider, {\n    value: slideData\n  }, zoom ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"swiper-zoom-container\",\n    \"data-swiper-zoom\": typeof zoom === 'number' ? zoom : undefined\n  }, renderChildren()) : renderChildren()));\n});\nSwiperSlide.displayName = 'SwiperSlide';\nexport { SwiperSlide };","/**\n * Swiper React 8.3.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2022 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: July 13, 2022\n */\n\nimport { Swiper } from './swiper.js';\nimport { SwiperSlide } from './swiper-slide.js';\nexport { useSwiperSlide, useSwiper } from './context.js';\nexport { Swiper, SwiperSlide };","/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        'constructor' in obj &&\n        obj.constructor === Object);\n}\nfunction extend(target = {}, src = {}) {\n    Object.keys(src).forEach((key) => {\n        if (typeof target[key] === 'undefined')\n            target[key] = src[key];\n        else if (isObject(src[key]) &&\n            isObject(target[key]) &&\n            Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\n\nconst ssrDocument = {\n    body: {},\n    addEventListener() { },\n    removeEventListener() { },\n    activeElement: {\n        blur() { },\n        nodeName: '',\n    },\n    querySelector() {\n        return null;\n    },\n    querySelectorAll() {\n        return [];\n    },\n    getElementById() {\n        return null;\n    },\n    createEvent() {\n        return {\n            initEvent() { },\n        };\n    },\n    createElement() {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute() { },\n            getElementsByTagName() {\n                return [];\n            },\n        };\n    },\n    createElementNS() {\n        return {};\n    },\n    importNode() {\n        return null;\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n};\nfunction getDocument() {\n    const doc = typeof document !== 'undefined' ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\n\nconst ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: '',\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n    history: {\n        replaceState() { },\n        pushState() { },\n        go() { },\n        back() { },\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener() { },\n    removeEventListener() { },\n    getComputedStyle() {\n        return {\n            getPropertyValue() {\n                return '';\n            },\n        };\n    },\n    Image() { },\n    Date() { },\n    screen: {},\n    setTimeout() { },\n    clearTimeout() { },\n    matchMedia() {\n        return {};\n    },\n    requestAnimationFrame(callback) {\n        if (typeof setTimeout === 'undefined') {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame(id) {\n        if (typeof setTimeout === 'undefined') {\n            return;\n        }\n        clearTimeout(id);\n    },\n};\nfunction getWindow() {\n    const win = typeof window !== 'undefined' ? window : {};\n    extend(win, ssrWindow);\n    return win;\n}\n\nexport { extend, getDocument, getWindow, ssrDocument, ssrWindow };\n","/**\n * Dom7 4.0.4\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * https://framework7.io/docs/dom7.html\n *\n * Copyright 2022, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: January 11, 2022\n */\nimport { getWindow, getDocument } from 'ssr-window';\n\n/* eslint-disable no-proto */\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, '__proto__', {\n    get() {\n      return proto;\n    },\n\n    set(value) {\n      proto.__proto__ = value;\n    }\n\n  });\n}\n\nclass Dom7 extends Array {\n  constructor(items) {\n    if (typeof items === 'number') {\n      super(items);\n    } else {\n      super(...(items || []));\n      makeReactive(this);\n    }\n  }\n\n}\n\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach(el => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n  }\n\n  return uniqueArray;\n}\nfunction toCamelCase(string) {\n  return string.toLowerCase().replace(/-(.)/g, (match, group) => group.toUpperCase());\n}\n\n// eslint-disable-next-line\n\nfunction qsa(selector, context) {\n  if (typeof selector !== 'string') {\n    return [selector];\n  }\n\n  const a = [];\n  const res = context.querySelectorAll(selector);\n\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n\n  return a;\n}\n\nfunction $(selector, context) {\n  const window = getWindow();\n  const document = getDocument();\n  let arr = [];\n\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n\n  if (!selector) {\n    return new Dom7(arr);\n  }\n\n  if (typeof selector === 'string') {\n    const html = selector.trim();\n\n    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n      let toCreate = 'div';\n      if (html.indexOf('<li') === 0) toCreate = 'ul';\n      if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n      if (html.indexOf('<tbody') === 0) toCreate = 'table';\n      if (html.indexOf('<option') === 0) toCreate = 'select';\n      const tempParent = document.createElement(toCreate);\n      tempParent.innerHTML = html;\n\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document);\n    } // arr = qsa(selector, document);\n\n  } else if (selector.nodeType || selector === window || selector === document) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7) return selector;\n    arr = selector;\n  }\n\n  return new Dom7(arrayUnique(arr));\n}\n\n$.fn = Dom7.prototype;\n\n// eslint-disable-next-line\n\nfunction addClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\n\nfunction removeClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\n\nfunction toggleClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    classNames.forEach(className => {\n      el.classList.toggle(className);\n    });\n  });\n}\n\nfunction hasClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  return arrayFilter(this, el => {\n    return classNames.filter(className => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\n\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === 'string') {\n    // Get attr\n    if (this[0]) return this[0].getAttribute(attrs);\n    return undefined;\n  } // Set attrs\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      // String\n      this[i].setAttribute(attrs, value);\n    } else {\n      // Object\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction removeAttr(attr) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr);\n  }\n\n  return this;\n}\n\nfunction prop(props, value) {\n  if (arguments.length === 1 && typeof props === 'string') {\n    // Get prop\n    if (this[0]) return this[0][props];\n  } else {\n    // Set props\n    for (let i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i][props] = value;\n      } else {\n        // Object\n        for (const propName in props) {\n          this[i][propName] = props[propName];\n        }\n      }\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction data(key, value) {\n  let el;\n\n  if (typeof value === 'undefined') {\n    el = this[0];\n    if (!el) return undefined; // Get value\n\n    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n      return el.dom7ElementDataStorage[key];\n    }\n\n    const dataKey = el.getAttribute(`data-${key}`);\n\n    if (dataKey) {\n      return dataKey;\n    }\n\n    return undefined;\n  } // Set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    el = this[i];\n    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n    el.dom7ElementDataStorage[key] = value;\n  }\n\n  return this;\n}\n\nfunction removeData(key) {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n      el.dom7ElementDataStorage[key] = null;\n      delete el.dom7ElementDataStorage[key];\n    }\n  }\n}\n\nfunction dataset() {\n  const el = this[0];\n  if (!el) return undefined;\n  const dataset = {}; // eslint-disable-line\n\n  if (el.dataset) {\n    for (const dataKey in el.dataset) {\n      dataset[dataKey] = el.dataset[dataKey];\n    }\n  } else {\n    for (let i = 0; i < el.attributes.length; i += 1) {\n      const attr = el.attributes[i];\n\n      if (attr.name.indexOf('data-') >= 0) {\n        dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;\n      }\n    }\n  }\n\n  for (const key in dataset) {\n    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n  }\n\n  return dataset;\n}\n\nfunction val(value) {\n  if (typeof value === 'undefined') {\n    // get value\n    const el = this[0];\n    if (!el) return undefined;\n\n    if (el.multiple && el.nodeName.toLowerCase() === 'select') {\n      const values = [];\n\n      for (let i = 0; i < el.selectedOptions.length; i += 1) {\n        values.push(el.selectedOptions[i].value);\n      }\n\n      return values;\n    }\n\n    return el.value;\n  } // set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {\n      for (let j = 0; j < el.options.length; j += 1) {\n        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;\n      }\n    } else {\n      el.value = value;\n    }\n  }\n\n  return this;\n}\n\nfunction value(value) {\n  return this.val(value);\n}\n\nfunction transform(transform) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform;\n  }\n\n  return this;\n}\n\nfunction transition(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== 'string' ? `${duration}ms` : duration;\n  }\n\n  return this;\n}\n\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target) return;\n    const eventData = e.target.dom7EventData || [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {\n      const parents = $(target).parents(); // eslint-disable-line\n\n      for (let k = 0; k < parents.length; k += 1) {\n        if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);\n      }\n    }\n  }\n\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    listener.apply(this, eventData);\n  }\n\n  const events = eventType.split(' ');\n  let j;\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (!targetSelector) {\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7Listeners) el.dom7Listeners = {};\n        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      // Live events\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];\n        el.dom7LiveListeners[event].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event, handleLiveEvent, capture);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n  const events = eventType.split(' ');\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction once(...args) {\n  const dom = this;\n  let [eventName, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventName, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  function onceHandler(...eventArgs) {\n    listener.apply(this, eventArgs);\n    dom.off(eventName, targetSelector, onceHandler, capture);\n\n    if (onceHandler.dom7proxy) {\n      delete onceHandler.dom7proxy;\n    }\n  }\n\n  onceHandler.dom7proxy = listener;\n  return dom.on(eventName, targetSelector, onceHandler, capture);\n}\n\nfunction trigger(...args) {\n  const window = getWindow();\n  const events = args[0].split(' ');\n  const eventData = args[1];\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n\n      if (window.CustomEvent) {\n        const evt = new window.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction transitionEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('transitionend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('transitionend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction animationEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('animationend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('animationend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction width() {\n  const window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerWidth;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('width'));\n  }\n\n  return null;\n}\n\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n    }\n\n    return this[0].offsetWidth;\n  }\n\n  return null;\n}\n\nfunction height() {\n  const window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerHeight;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('height'));\n  }\n\n  return null;\n}\n\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n    }\n\n    return this[0].offsetHeight;\n  }\n\n  return null;\n}\n\nfunction offset() {\n  if (this.length > 0) {\n    const window = getWindow();\n    const document = getDocument();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window ? window.scrollY : el.scrollTop;\n    const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n\n  return null;\n}\n\nfunction hide() {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.display = 'none';\n  }\n\n  return this;\n}\n\nfunction show() {\n  const window = getWindow();\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.style.display === 'none') {\n      el.style.display = '';\n    }\n\n    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {\n      // Still not visible\n      el.style.display = 'block';\n    }\n  }\n\n  return this;\n}\n\nfunction styles() {\n  const window = getWindow();\n  if (this[0]) return window.getComputedStyle(this[0], null);\n  return {};\n}\n\nfunction css(props, value) {\n  const window = getWindow();\n  let i;\n\n  if (arguments.length === 1) {\n    if (typeof props === 'string') {\n      // .css('width')\n      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      // .css({ width: '100px' })\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n\n      return this;\n    }\n  }\n\n  if (arguments.length === 2 && typeof props === 'string') {\n    // .css('width', '100px')\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction each(callback) {\n  if (!callback) return this;\n  this.forEach((el, index) => {\n    callback.apply(el, [el, index]);\n  });\n  return this;\n}\n\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return $(result);\n}\n\nfunction html(html) {\n  if (typeof html === 'undefined') {\n    return this[0] ? this[0].innerHTML : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html;\n  }\n\n  return this;\n}\n\nfunction text(text) {\n  if (typeof text === 'undefined') {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text;\n  }\n\n  return this;\n}\n\nfunction is(selector) {\n  const window = getWindow();\n  const document = getDocument();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === 'undefined') return false;\n\n  if (typeof selector === 'string') {\n    if (el.matches) return el.matches(selector);\n    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  if (selector === document) {\n    return el === document;\n  }\n\n  if (selector === window) {\n    return el === window;\n  }\n\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nfunction index() {\n  let child = this[0];\n  let i;\n\n  if (child) {\n    i = 0; // eslint-disable-next-line\n\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n\n    return i;\n  }\n\n  return undefined;\n}\n\nfunction eq(index) {\n  if (typeof index === 'undefined') return this;\n  const length = this.length;\n\n  if (index > length - 1) {\n    return $([]);\n  }\n\n  if (index < 0) {\n    const returnIndex = length + index;\n    if (returnIndex < 0) return $([]);\n    return $([this[returnIndex]]);\n  }\n\n  return $([this[index]]);\n}\n\nfunction append(...els) {\n  let newChild;\n  const document = getDocument();\n\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction appendTo(parent) {\n  $(parent).append(this);\n  return this;\n}\n\nfunction prepend(newChild) {\n  const document = getDocument();\n  let i;\n  let j;\n\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === 'string') {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newChild;\n\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n\n  return this;\n}\n\nfunction prependTo(parent) {\n  $(parent).prepend(this);\n  return this;\n}\n\nfunction insertBefore(selector) {\n  const before = $(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (before.length === 1) {\n      before[0].parentNode.insertBefore(this[i], before[0]);\n    } else if (before.length > 1) {\n      for (let j = 0; j < before.length; j += 1) {\n        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n      }\n    }\n  }\n}\n\nfunction insertAfter(selector) {\n  const after = $(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (after.length === 1) {\n      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n    } else if (after.length > 1) {\n      for (let j = 0; j < after.length; j += 1) {\n        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n      }\n    }\n  }\n}\n\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(next).is(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n\n    el = next;\n  }\n\n  return $(nextEls);\n}\n\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (el.previousElementSibling) return $([el.previousElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(prev).is(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n\n    el = prev;\n  }\n\n  return $(prevEls);\n}\n\nfunction siblings(selector) {\n  return this.nextAll(selector).add(this.prevAll(selector));\n}\n\nfunction parent(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n      } else {\n        parents.push(this[i].parentNode);\n      }\n    }\n  }\n\n  return $(parents);\n}\n\nfunction parents(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    let parent = this[i].parentNode; // eslint-disable-line\n\n    while (parent) {\n      if (selector) {\n        if ($(parent).is(selector)) parents.push(parent);\n      } else {\n        parents.push(parent);\n      }\n\n      parent = parent.parentNode;\n    }\n  }\n\n  return $(parents);\n}\n\nfunction closest(selector) {\n  let closest = this; // eslint-disable-line\n\n  if (typeof selector === 'undefined') {\n    return $([]);\n  }\n\n  if (!closest.is(selector)) {\n    closest = closest.parents(selector).eq(0);\n  }\n\n  return closest;\n}\n\nfunction find(selector) {\n  const foundElements = [];\n\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n\n  return $(foundElements);\n}\n\nfunction children(selector) {\n  const children = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children.push(childNodes[j]);\n      }\n    }\n  }\n\n  return $(children);\n}\n\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n  }\n\n  return this;\n}\n\nfunction detach() {\n  return this.remove();\n}\n\nfunction add(...els) {\n  const dom = this;\n  let i;\n  let j;\n\n  for (i = 0; i < els.length; i += 1) {\n    const toAdd = $(els[i]);\n\n    for (j = 0; j < toAdd.length; j += 1) {\n      dom.push(toAdd[j]);\n    }\n  }\n\n  return dom;\n}\n\nfunction empty() {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.nodeType === 1) {\n      for (let j = 0; j < el.childNodes.length; j += 1) {\n        if (el.childNodes[j].parentNode) {\n          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n        }\n      }\n\n      el.textContent = '';\n    }\n  }\n\n  return this;\n}\n\n// eslint-disable-next-line\n\nfunction scrollTo(...args) {\n  const window = getWindow();\n  let [left, top, duration, easing, callback] = args;\n\n  if (args.length === 4 && typeof easing === 'function') {\n    callback = easing;\n    [left, top, duration, callback, easing] = args;\n  }\n\n  if (typeof easing === 'undefined') easing = 'swing';\n  return this.each(function animate() {\n    const el = this;\n    let currentTop;\n    let currentLeft;\n    let maxTop;\n    let maxLeft;\n    let newTop;\n    let newLeft;\n    let scrollTop; // eslint-disable-line\n\n    let scrollLeft; // eslint-disable-line\n\n    let animateTop = top > 0 || top === 0;\n    let animateLeft = left > 0 || left === 0;\n\n    if (typeof easing === 'undefined') {\n      easing = 'swing';\n    }\n\n    if (animateTop) {\n      currentTop = el.scrollTop;\n\n      if (!duration) {\n        el.scrollTop = top;\n      }\n    }\n\n    if (animateLeft) {\n      currentLeft = el.scrollLeft;\n\n      if (!duration) {\n        el.scrollLeft = left;\n      }\n    }\n\n    if (!duration) return;\n\n    if (animateTop) {\n      maxTop = el.scrollHeight - el.offsetHeight;\n      newTop = Math.max(Math.min(top, maxTop), 0);\n    }\n\n    if (animateLeft) {\n      maxLeft = el.scrollWidth - el.offsetWidth;\n      newLeft = Math.max(Math.min(left, maxLeft), 0);\n    }\n\n    let startTime = null;\n    if (animateTop && newTop === currentTop) animateTop = false;\n    if (animateLeft && newLeft === currentLeft) animateLeft = false;\n\n    function render(time = new Date().getTime()) {\n      if (startTime === null) {\n        startTime = time;\n      }\n\n      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n      const easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n      let done;\n      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n\n      if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (done) {\n        if (callback) callback();\n        return;\n      }\n\n      if (animateTop) el.scrollTop = scrollTop;\n      if (animateLeft) el.scrollLeft = scrollLeft;\n      window.requestAnimationFrame(render);\n    }\n\n    window.requestAnimationFrame(render);\n  });\n} // scrollTop(top, duration, easing, callback) {\n\n\nfunction scrollTop(...args) {\n  let [top, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [top, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof top === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollTop;\n    return null;\n  }\n\n  return dom.scrollTo(undefined, top, duration, easing, callback);\n}\n\nfunction scrollLeft(...args) {\n  let [left, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [left, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof left === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollLeft;\n    return null;\n  }\n\n  return dom.scrollTo(left, undefined, duration, easing, callback);\n}\n\n// eslint-disable-next-line\n\nfunction animate(initialProps, initialParams) {\n  const window = getWindow();\n  const els = this;\n  const a = {\n    props: Object.assign({}, initialProps),\n    params: Object.assign({\n      duration: 300,\n      easing: 'swing' // or 'linear'\n\n      /* Callbacks\n      begin(elements)\n      complete(elements)\n      progress(elements, complete, remaining, start, tweenValue)\n      */\n\n    }, initialParams),\n    elements: els,\n    animating: false,\n    que: [],\n\n    easingProgress(easing, progress) {\n      if (easing === 'swing') {\n        return 0.5 - Math.cos(progress * Math.PI) / 2;\n      }\n\n      if (typeof easing === 'function') {\n        return easing(progress);\n      }\n\n      return progress;\n    },\n\n    stop() {\n      if (a.frameId) {\n        window.cancelAnimationFrame(a.frameId);\n      }\n\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      a.que = [];\n    },\n\n    done(complete) {\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      if (complete) complete(els);\n\n      if (a.que.length > 0) {\n        const que = a.que.shift();\n        a.animate(que[0], que[1]);\n      }\n    },\n\n    animate(props, params) {\n      if (a.animating) {\n        a.que.push([props, params]);\n        return a;\n      }\n\n      const elements = []; // Define & Cache Initials & Units\n\n      a.elements.each((el, index) => {\n        let initialFullValue;\n        let initialValue;\n        let unit;\n        let finalValue;\n        let finalFullValue;\n        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n        elements[index] = {\n          container: el\n        };\n        Object.keys(props).forEach(prop => {\n          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');\n          initialValue = parseFloat(initialFullValue);\n          unit = initialFullValue.replace(initialValue, '');\n          finalValue = parseFloat(props[prop]);\n          finalFullValue = props[prop] + unit;\n          elements[index][prop] = {\n            initialFullValue,\n            initialValue,\n            unit,\n            finalValue,\n            finalFullValue,\n            currentValue: initialValue\n          };\n        });\n      });\n      let startTime = null;\n      let time;\n      let elementsDone = 0;\n      let propsDone = 0;\n      let done;\n      let began = false;\n      a.animating = true;\n\n      function render() {\n        time = new Date().getTime();\n        let progress;\n        let easeProgress; // let el;\n\n        if (!began) {\n          began = true;\n          if (params.begin) params.begin(els);\n        }\n\n        if (startTime === null) {\n          startTime = time;\n        }\n\n        if (params.progress) {\n          // eslint-disable-next-line\n          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n        }\n\n        elements.forEach(element => {\n          const el = element;\n          if (done || el.done) return;\n          Object.keys(props).forEach(prop => {\n            if (done || el.done) return;\n            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n            easeProgress = a.easingProgress(params.easing, progress);\n            const {\n              initialValue,\n              finalValue,\n              unit\n            } = el[prop];\n            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n            const currentValue = el[prop].currentValue;\n\n            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n              el.container.style[prop] = finalValue + unit;\n              propsDone += 1;\n\n              if (propsDone === Object.keys(props).length) {\n                el.done = true;\n                elementsDone += 1;\n              }\n\n              if (elementsDone === elements.length) {\n                done = true;\n              }\n            }\n\n            if (done) {\n              a.done(params.complete);\n              return;\n            }\n\n            el.container.style[prop] = currentValue + unit;\n          });\n        });\n        if (done) return; // Then call\n\n        a.frameId = window.requestAnimationFrame(render);\n      }\n\n      a.frameId = window.requestAnimationFrame(render);\n      return a;\n    }\n\n  };\n\n  if (a.elements.length === 0) {\n    return els;\n  }\n\n  let animateInstance;\n\n  for (let i = 0; i < a.elements.length; i += 1) {\n    if (a.elements[i].dom7AnimateInstance) {\n      animateInstance = a.elements[i].dom7AnimateInstance;\n    } else a.elements[i].dom7AnimateInstance = a;\n  }\n\n  if (!animateInstance) {\n    animateInstance = a;\n  }\n\n  if (initialProps === 'stop') {\n    animateInstance.stop();\n  } else {\n    animateInstance.animate(a.props, a.params);\n  }\n\n  return els;\n}\n\nfunction stop() {\n  const els = this;\n\n  for (let i = 0; i < els.length; i += 1) {\n    if (els[i].dom7AnimateInstance) {\n      els[i].dom7AnimateInstance.stop();\n    }\n  }\n}\n\nconst noTrigger = 'resize scroll'.split(' ');\n\nfunction shortcut(name) {\n  function eventHandler(...args) {\n    if (typeof args[0] === 'undefined') {\n      for (let i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i]) this[i][name]();else {\n            $(this[i]).trigger(name);\n          }\n        }\n      }\n\n      return this;\n    }\n\n    return this.on(name, ...args);\n  }\n\n  return eventHandler;\n}\n\nconst click = shortcut('click');\nconst blur = shortcut('blur');\nconst focus = shortcut('focus');\nconst focusin = shortcut('focusin');\nconst focusout = shortcut('focusout');\nconst keyup = shortcut('keyup');\nconst keydown = shortcut('keydown');\nconst keypress = shortcut('keypress');\nconst submit = shortcut('submit');\nconst change = shortcut('change');\nconst mousedown = shortcut('mousedown');\nconst mousemove = shortcut('mousemove');\nconst mouseup = shortcut('mouseup');\nconst mouseenter = shortcut('mouseenter');\nconst mouseleave = shortcut('mouseleave');\nconst mouseout = shortcut('mouseout');\nconst mouseover = shortcut('mouseover');\nconst touchstart = shortcut('touchstart');\nconst touchend = shortcut('touchend');\nconst touchmove = shortcut('touchmove');\nconst resize = shortcut('resize');\nconst scroll = shortcut('scroll');\n\nexport default $;\nexport { $, add, addClass, animate, animationEnd, append, appendTo, attr, blur, change, children, click, closest, css, data, dataset, detach, each, empty, eq, filter, find, focus, focusin, focusout, hasClass, height, hide, html, index, insertAfter, insertBefore, is, keydown, keypress, keyup, mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup, next, nextAll, off, offset, on, once, outerHeight, outerWidth, parent, parents, prepend, prependTo, prev, prevAll, prop, remove, removeAttr, removeClass, removeData, resize, scroll, scrollLeft, scrollTo, scrollTop, show, siblings, stop, styles, submit, text, toggleClass, touchend, touchmove, touchstart, transform, transition, transitionEnd, trigger, val, value, width };\n","import { $, addClass, removeClass, hasClass, toggleClass, attr, removeAttr, transform, transition, on, off, trigger, transitionEnd, outerWidth, outerHeight, styles, offset, css, each, html, text, is, index, eq, append, prepend, next, nextAll, prev, prevAll, parent, parents, closest, find, children, filter, remove } from 'dom7';\nconst Methods = {\n  addClass,\n  removeClass,\n  hasClass,\n  toggleClass,\n  attr,\n  removeAttr,\n  transform,\n  transition,\n  on,\n  off,\n  trigger,\n  transitionEnd,\n  outerWidth,\n  outerHeight,\n  styles,\n  offset,\n  css,\n  each,\n  html,\n  text,\n  is,\n  index,\n  eq,\n  append,\n  prepend,\n  next,\n  nextAll,\n  prev,\n  prevAll,\n  parent,\n  parents,\n  closest,\n  find,\n  children,\n  filter,\n  remove\n};\nObject.keys(Methods).forEach(methodName => {\n  Object.defineProperty($.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\nexport default $;","import { getWindow } from 'ssr-window';\n\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach(key => {\n    try {\n      object[key] = null;\n    } catch (e) {// no getter for object\n    }\n\n    try {\n      delete object[key];\n    } catch (e) {// something got wrong\n    }\n  });\n}\n\nfunction nextTick(callback, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return setTimeout(callback, delay);\n}\n\nfunction now() {\n  return Date.now();\n}\n\nfunction getComputedStyle(el) {\n  const window = getWindow();\n  let style;\n\n  if (window.getComputedStyle) {\n    style = window.getComputedStyle(el, null);\n  }\n\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n\n  if (!style) {\n    style = el.style;\n  }\n\n  return style;\n}\n\nfunction getTranslate(el, axis) {\n  if (axis === void 0) {\n    axis = 'x';\n  }\n\n  const window = getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle(el, null);\n\n  if (window.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n\n    if (curTransform.split(',').length > 6) {\n      curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\n    } // Some old versions of Webkit choke when 'none' is passed; pass\n    // empty string instead in this case\n\n\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n    matrix = transformMatrix.toString().split(',');\n  }\n\n  if (axis === 'x') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers\n    else curTransform = parseFloat(matrix[4]);\n  }\n\n  if (axis === 'y') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers\n    else curTransform = parseFloat(matrix[5]);\n  }\n\n  return curTransform || 0;\n}\n\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction isNode(node) {\n  // eslint-disable-next-line\n  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\n    return node instanceof HTMLElement;\n  }\n\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\n\nfunction extend() {\n  const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n\n  for (let i = 1; i < arguments.length; i += 1) {\n    const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\n\n    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\n\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n        if (desc !== undefined && desc.enumerable) {\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\n\nfunction animateCSSModeScroll(_ref) {\n  let {\n    swiper,\n    targetPosition,\n    side\n  } = _ref;\n  const window = getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = 'none';\n  window.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? 'next' : 'prev';\n\n  const isOutOfBound = (current, target) => {\n    return dir === 'next' && current >= target || dir === 'prev' && current <= target;\n  };\n\n  const animate = () => {\n    time = new Date().getTime();\n\n    if (startTime === null) {\n      startTime = time;\n    }\n\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.scrollSnapType = '';\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = '';\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n\n    swiper.cssModeFrameID = window.requestAnimationFrame(animate);\n  };\n\n  animate();\n}\n\nexport { animateCSSModeScroll, deleteProps, nextTick, now, getTranslate, isObject, extend, getComputedStyle, setCSSProperty };","import { getWindow, getDocument } from 'ssr-window';\nlet support;\n\nfunction calcSupport() {\n  const window = getWindow();\n  const document = getDocument();\n  return {\n    smoothScroll: document.documentElement && 'scrollBehavior' in document.documentElement.style,\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),\n    passiveListener: function checkPassiveListener() {\n      let supportsPassive = false;\n\n      try {\n        const opts = Object.defineProperty({}, 'passive', {\n          // eslint-disable-next-line\n          get() {\n            supportsPassive = true;\n          }\n\n        });\n        window.addEventListener('testPassiveListener', null, opts);\n      } catch (e) {// No support\n      }\n\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return 'ongesturestart' in window;\n    }()\n  };\n}\n\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n\n  return support;\n}\n\nexport { getSupport };","import { getWindow } from 'ssr-window';\nimport { getSupport } from './get-support.js';\nlet deviceCached;\n\nfunction calcDevice(_temp) {\n  let {\n    userAgent\n  } = _temp === void 0 ? {} : _temp;\n  const support = getSupport();\n  const window = getWindow();\n  const platform = window.navigator.platform;\n  const ua = userAgent || window.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window.screen.width;\n  const screenHeight = window.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === 'Win32';\n  let macos = platform === 'MacIntel'; // iPadOs 13 fix\n\n  const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad) ipad = [0, 1, '13_0_0'];\n    macos = false;\n  } // Android\n\n\n  if (android && !windows) {\n    device.os = 'android';\n    device.android = true;\n  }\n\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  } // Export object\n\n\n  return device;\n}\n\nfunction getDevice(overrides) {\n  if (overrides === void 0) {\n    overrides = {};\n  }\n\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n\n  return deviceCached;\n}\n\nexport { getDevice };","import { getWindow } from 'ssr-window';\nlet browser;\n\nfunction calcBrowser() {\n  const window = getWindow();\n\n  function isSafari() {\n    const ua = window.navigator.userAgent.toLowerCase();\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n  }\n\n  return {\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)\n  };\n}\n\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n\n  return browser;\n}\n\nexport { getBrowser };","import { getWindow } from 'ssr-window';\nexport default function Resize(_ref) {\n  let {\n    swiper,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  let observer = null;\n  let animationFrame = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      animationFrame = window.requestAnimationFrame(() => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach(_ref2 => {\n          let {\n            contentBoxSize,\n            contentRect,\n            target\n          } = _ref2;\n          if (target && target !== swiper.el) return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (animationFrame) {\n      window.cancelAnimationFrame(animationFrame);\n    }\n\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}","import { getWindow } from 'ssr-window';\nexport default function Observer(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const observers = [];\n  const window = getWindow();\n\n  const attach = function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n    const observer = new ObserverFunc(mutations => {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (mutations.length === 1) {\n        emit('observerUpdate', mutations[0]);\n        return;\n      }\n\n      const observerUpdate = function observerUpdate() {\n        emit('observerUpdate', mutations[0]);\n      };\n\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(observerUpdate);\n      } else {\n        window.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n\n  const init = () => {\n    if (!swiper.params.observer) return;\n\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    } // Observe container\n\n\n    attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    }); // Observe wrapper\n\n    attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  };\n\n  const destroy = () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on('init', init);\n  on('destroy', destroy);\n}","/* eslint-disable no-underscore-dangle */\nexport default {\n  on(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(event => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n\n  once(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n\n    function onceHandler() {\n      self.off(events, onceHandler);\n\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      handler.apply(self, args);\n    }\n\n    onceHandler.__emitterProxy = handler;\n    return self.on(events, onceHandler, priority);\n  },\n\n  onAny(handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n\n    return self;\n  },\n\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsAnyListeners) return self;\n    const index = self.eventsAnyListeners.indexOf(handler);\n\n    if (index >= 0) {\n      self.eventsAnyListeners.splice(index, 1);\n    }\n\n    return self;\n  },\n\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(event => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n\n  emit() {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n\n    data.unshift(context);\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach(event => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach(eventHandler => {\n          eventHandler.apply(context, [event, ...data]);\n        });\n      }\n\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(eventHandler => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n\n};","export default function updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  } // Subtract paddings\n\n\n  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);\n  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);\n  if (Number.isNaN(width)) width = 0;\n  if (Number.isNaN(height)) height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}","import { setCSSProperty } from '../../shared/utils.js';\nexport default function updateSlides() {\n  const swiper = this;\n\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel('width')] = ``;\n      }\n\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n\n  if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded) swiper.$el.addClass(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.$el.removeClass(backFaceHiddenClass);\n    }\n  }\n}","import $ from '../../shared/dom.js';\nexport default function updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n\n  const getSlideByIndex = index => {\n    if (isVirtual) {\n      return swiper.slides.filter(el => parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index)[0];\n    }\n\n    return swiper.slides.eq(index)[0];\n  }; // Find slides currently in view\n\n\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || $([])).each(slide => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  } // Find new height from highest slide in view\n\n\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  } // Update Height\n\n\n  if (newHeight || newHeight === 0) swiper.$wrapperEl.css('height', `${newHeight}px`);\n}","export default function updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}","import $ from '../../shared/dom.js';\nexport default function updateSlidesProgress(translate) {\n  if (translate === void 0) {\n    translate = this && this.translate || 0;\n  }\n\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl) offsetCenter = translate; // Visible Slides\n\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides.eq(i).addClass(params.slideVisibleClass);\n    }\n\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n\n  swiper.visibleSlides = $(swiper.visibleSlides);\n}","export default function updateProgress(translate) {\n  const swiper = this;\n\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line\n\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n\n  swiper.emit('progress', progress);\n}","export default function updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    $wrapperEl,\n    activeIndex,\n    realIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n  let activeSlide;\n\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  } // Active classes\n\n\n  activeSlide.addClass(params.slideActiveClass);\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    }\n  } // Next Slide\n\n\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  } // Prev Slide\n\n\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    }\n\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    }\n  }\n\n  swiper.emitSlidesClasses();\n}","export default function updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid,\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n\n  if (typeof activeIndex === 'undefined') {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    } // Normalize slideIndex\n\n\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n    }\n  }\n\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n\n    return;\n  } // Get real index\n\n\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n  Object.assign(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n\n  if (previousRealIndex !== realIndex) {\n    swiper.emit('realIndexChange');\n  }\n\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit('slideChange');\n  }\n}","import $ from '../../shared/dom.js';\nexport default function updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = $(e).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  let slideIndex;\n\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}","import updateSize from './updateSize.js';\nimport updateSlides from './updateSlides.js';\nimport updateAutoHeight from './updateAutoHeight.js';\nimport updateSlidesOffset from './updateSlidesOffset.js';\nimport updateSlidesProgress from './updateSlidesProgress.js';\nimport updateProgress from './updateProgress.js';\nimport updateSlidesClasses from './updateSlidesClasses.js';\nimport updateActiveIndex from './updateActiveIndex.js';\nimport updateClickedSlide from './updateClickedSlide.js';\nexport default {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide\n};","import { getTranslate } from '../../shared/utils.js';\nexport default function getSwiperTranslate(axis) {\n  if (axis === void 0) {\n    axis = this.isHorizontal() ? 'x' : 'y';\n  }\n\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    $wrapperEl\n  } = swiper;\n\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n\n  if (params.cssMode) {\n    return translate;\n  }\n\n  let currentTranslate = getTranslate($wrapperEl[0], axis);\n  if (rtl) currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}","export default function setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    $wrapperEl,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress\n\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, byController);\n}","export default function minTranslate() {\n  return -this.snapGrid[0];\n}","export default function maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}","import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (translateBounds === void 0) {\n    translateBounds = true;\n  }\n\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress\n\n  swiper.updateProgress(newTranslate);\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n\n    if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}","import getTranslate from './getTranslate.js';\nimport setTranslate from './setTranslate.js';\nimport minTranslate from './minTranslate.js';\nimport maxTranslate from './maxTranslate.js';\nimport translateTo from './translateTo.js';\nexport default {\n  getTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo\n};","export default function setTransition(duration, byController) {\n  const swiper = this;\n\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n\n  swiper.emit('setTransition', duration, byController);\n}","export default function transitionEmit(_ref) {\n  let {\n    swiper,\n    runCallbacks,\n    direction,\n    step\n  } = _ref;\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n\n  swiper.emit(`transition${step}`);\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n\n    swiper.emit(`slideChangeTransition${step}`);\n\n    if (dir === 'next') {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}","import transitionEmit from './transitionEmit.js';\nexport default function transitionStart(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode) return;\n\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'Start'\n  });\n}","import transitionEmit from './transitionEmit.js';\nexport default function transitionEnd(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'End'\n  });\n}","import setTransition from './setTransition.js';\nimport transitionStart from './transitionStart.js';\nimport transitionEnd from './transitionEnd.js';\nexport default {\n  setTransition,\n  transitionStart,\n  transitionEnd\n};","import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function slideTo(index, speed, runCallbacks, internal, initial) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index !== 'number' && typeof index !== 'string') {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);\n  }\n\n  if (typeof index === 'string') {\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  const translate = -snapGrid[snapIndex]; // Update progress\n\n  swiper.updateProgress(translate); // Normalize slideIndex\n\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  } // Directions locks\n\n\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex); // Update Height\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    swiper.updateSlidesClasses();\n\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n\n    return false;\n  }\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n\n    swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n  }\n\n  return true;\n}","export default function slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index === 'string') {\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideNext(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    animating,\n    enabled,\n    params\n  } = swiper;\n  if (!enabled) return swiper;\n  let perGroup = params.slidesPerGroup;\n\n  if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\n  }\n\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slidePrev(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    params,\n    animating,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return swiper;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map(val => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        // prevSnap = snap;\n        prevSnapIndex = snapIndex;\n      }\n    });\n\n    if (typeof prevSnapIndex !== 'undefined') {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n\n  let prevIndex = 0;\n\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n\n  if (params.rewind && swiper.isBeginning) {\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n  }\n\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideReset(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideToClosest(speed, runCallbacks, internal, threshold) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (threshold === void 0) {\n    threshold = 0.5;\n  }\n\n  const swiper = this;\n  let index = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}","import $ from '../../shared/dom.js';\nimport { nextTick } from '../../shared/utils.js';\nexport default function slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n      nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}","import slideTo from './slideTo.js';\nimport slideToLoop from './slideToLoop.js';\nimport slideNext from './slideNext.js';\nimport slidePrev from './slidePrev.js';\nimport slideReset from './slideReset.js';\nimport slideToClosest from './slideToClosest.js';\nimport slideToClickedSlide from './slideToClickedSlide.js';\nexport default {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide\n};","import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nexport default function loopCreate() {\n  const swiper = this;\n  const document = getDocument();\n  const {\n    params,\n    $wrapperEl\n  } = swiper; // Remove duplicated slides\n\n  const $selector = $wrapperEl.children().length > 0 ? $($wrapperEl.children()[0].parentNode) : $wrapperEl;\n  $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n  let slides = $selector.children(`.${params.slideClass}`);\n\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = $(document.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $selector.append(blankNode);\n      }\n\n      slides = $selector.children(`.${params.slideClass}`);\n    }\n  }\n\n  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n\n  if (swiper.loopedSlides > slides.length) {\n    swiper.loopedSlides = slides.length;\n  }\n\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((el, index) => {\n    const slide = $(el);\n\n    if (index < swiper.loopedSlides) {\n      appendSlides.push(el);\n    }\n\n    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {\n      prependSlides.push(el);\n    }\n\n    slide.attr('data-swiper-slide-index', index);\n  });\n\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $selector.append($(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $selector.prepend($(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}","export default function loopFix() {\n  const swiper = this;\n  swiper.emit('beforeLoopFix');\n  const {\n    activeIndex,\n    slides,\n    loopedSlides,\n    allowSlidePrev,\n    allowSlideNext,\n    snapGrid,\n    rtlTranslate: rtl\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding\n\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    // Fix For Positive Oversliding\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit('loopFix');\n}","export default function loopDestroy() {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    slides\n  } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr('data-swiper-slide-index');\n}","import loopCreate from './loopCreate.js';\nimport loopFix from './loopFix.js';\nimport loopDestroy from './loopDestroy.js';\nexport default {\n  loopCreate,\n  loopFix,\n  loopDestroy\n};","export default function setGrabCursor(moving) {\n  const swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n  const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n}","export default function unsetGrabCursor() {\n  const swiper = this;\n\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n\n  swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\n}","import setGrabCursor from './setGrabCursor.js';\nimport unsetGrabCursor from './unsetGrabCursor.js';\nexport default {\n  setGrabCursor,\n  unsetGrabCursor\n};","import { getWindow, getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { now } from '../../shared/utils.js'; // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\n\nfunction closestElement(selector, base) {\n  if (base === void 0) {\n    base = this;\n  }\n\n  function __closestFrom(el) {\n    if (!el || el === getDocument() || el === getWindow()) return null;\n    if (el.assignedSlot) el = el.assignedSlot;\n    const found = el.closest(selector);\n\n    if (!found && !el.getRootNode) {\n      return null;\n    }\n\n    return found || __closestFrom(el.getRootNode().host);\n  }\n\n  return __closestFrom(base);\n}\n\nexport default function onTouchStart(event) {\n  const swiper = this;\n  const document = getDocument();\n  const window = getWindow();\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  let $targetEl = $(e.target);\n\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!$targetEl.closest(swiper.wrapperEl).length) return;\n  }\n\n  data.isTouchEvent = e.type === 'touchstart';\n  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;\n  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return; // change target el for shadow root component\n\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {\n    $targetEl = $(event.path[0]);\n  }\n\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot); // use closestElement for shadow root element to get the actual closest for nested shadow root element\n\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, $targetEl[0]) : $targetEl.closest(noSwipingSelector)[0])) {\n    swiper.allowClick = true;\n    return;\n  }\n\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0]) return;\n  }\n\n  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === 'prevent') {\n      event.preventDefault();\n    } else {\n      return;\n    }\n  }\n\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n\n  if (e.type !== 'touchstart') {\n    let preventDefault = true;\n\n    if ($targetEl.is(data.focusableElements)) {\n      preventDefault = false;\n\n      if ($targetEl[0].nodeName === 'SELECT') {\n        data.isTouched = false;\n      }\n    }\n\n    if (document.activeElement && $(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) {\n      document.activeElement.blur();\n    }\n\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n\n  if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n    swiper.freeMode.onTouchStart();\n  }\n\n  swiper.emit('touchStart', e);\n}","import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { now } from '../../shared/utils.js';\nexport default function onTouchMove(event) {\n  const document = getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && e.type !== 'touchmove') return;\n  const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n\n  if (!swiper.allowTouchMove) {\n    if (!$(e.target).is(data.focusableElements)) {\n      swiper.allowClick = false;\n    }\n\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n\n  if (data.isTouchEvent && document.activeElement) {\n    if (e.target === document.activeElement && $(e.target).is(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n\n  if (e.targetTouches && e.targetTouches.length > 1) return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n\n  if (typeof data.isScrolling === 'undefined') {\n    let touchAngle;\n\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n\n  if (!data.startMoving) {\n    return;\n  }\n\n  swiper.allowClick = false;\n\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n\n  if (!data.isMoved) {\n    if (params.loop && !params.cssMode) {\n      swiper.loopFix();\n    }\n\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n    }\n\n    data.allowMomentumBounce = false; // Grab Cursor\n\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n\n    swiper.emit('sliderFirstMove', e);\n  }\n\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl) diff = -diff;\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n  }\n\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  } // Directions locks\n\n\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  } // Threshold\n\n\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n\n  if (!params.followFinger || params.cssMode) return; // Update active index in free mode\n\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  } // Update progress\n\n\n  swiper.updateProgress(data.currentTranslate); // Update translate\n\n  swiper.setTranslate(data.currentTranslate);\n}","import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}","export default function onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0) return; // Breakpoints\n\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  } // Save locks\n\n\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper; // Disable locks on resize\n\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  } // Return locks after resize\n\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}","export default function onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled) return;\n\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}","export default function onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  swiper.previousTranslate = swiper.translate;\n\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  } // eslint-disable-next-line\n\n\n  if (swiper.translate === 0) swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, false);\n}","import { getDocument } from 'ssr-window';\nimport onTouchStart from './onTouchStart.js';\nimport onTouchMove from './onTouchMove.js';\nimport onTouchEnd from './onTouchEnd.js';\nimport onResize from './onResize.js';\nimport onClick from './onClick.js';\nimport onScroll from './onScroll.js';\nlet dummyEventAttached = false;\n\nfunction dummyEventListener() {}\n\nconst events = (swiper, method) => {\n  const document = getDocument();\n  const {\n    params,\n    touchEvents,\n    el,\n    wrapperEl,\n    device,\n    support\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n  const swiperMethod = method; // Touch Events\n\n  if (!support.touch) {\n    el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n    document[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n    document[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    const passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n    el[domMethod](touchEvents.move, swiper.onTouchMove, support.passiveListener ? {\n      passive: false,\n      capture\n    } : capture);\n    el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n\n    if (touchEvents.cancel) {\n      el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n    }\n  } // Prevent Links Clicks\n\n\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod]('click', swiper.onClick, true);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[domMethod]('scroll', swiper.onScroll);\n  } // Resize handler\n\n\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n  } else {\n    swiper[swiperMethod]('observerUpdate', onResize, true);\n  }\n};\n\nfunction attachEvents() {\n  const swiper = this;\n  const document = getDocument();\n  const {\n    params,\n    support\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n\n  swiper.onClick = onClick.bind(swiper);\n\n  if (support.touch && !dummyEventAttached) {\n    document.addEventListener('touchstart', dummyEventListener);\n    dummyEventAttached = true;\n  }\n\n  events(swiper, 'on');\n}\n\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, 'off');\n}\n\nexport default {\n  attachEvents,\n  detachEvents\n};","import { extend } from '../../shared/utils.js';\n\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\n\nexport default function setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n\n    swiper.emitContainerClasses();\n  } // Toggle navigation, pagination, scrollbar\n\n\n  ['navigation', 'pagination', 'scrollbar'].forEach(prop => {\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n\n  extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n\n  swiper.emit('breakpoint', breakpointParams);\n}","import { getWindow } from 'ssr-window';\nexport default function getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = 'window';\n  }\n\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = getWindow();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n\n  return breakpoint || 'max';\n}","import setBreakpoint from './setBreakpoint.js';\nimport getBreakpoint from './getBreakpoint.js';\nexport default {\n  setBreakpoint,\n  getBreakpoint\n};","function prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach(item => {\n    if (typeof item === 'object') {\n      Object.keys(item).forEach(classNames => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === 'string') {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\n\nexport default function addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    $el,\n    device,\n    support\n  } = swiper; // prettier-ignore\n\n  const suffixes = prepareClasses(['initialized', params.direction, {\n    'pointer-events': !support.touch\n  }, {\n    'free-mode': swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    'autoheight': params.autoHeight\n  }, {\n    'rtl': rtl\n  }, {\n    'grid': params.grid && params.grid.rows > 1\n  }, {\n    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\n  }, {\n    'android': device.android\n  }, {\n    'ios': device.ios\n  }, {\n    'css-mode': params.cssMode\n  }, {\n    'centered': params.cssMode && params.centeredSlides\n  }, {\n    'watch-progress': params.watchSlidesProgress\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  $el.addClass([...classNames].join(' '));\n  swiper.emitContainerClasses();\n}","export default function removeClasses() {\n  const swiper = this;\n  const {\n    $el,\n    classNames\n  } = swiper;\n  $el.removeClass(classNames.join(' '));\n  swiper.emitContainerClasses();\n}","import addClasses from './addClasses.js';\nimport removeClasses from './removeClasses.js';\nexport default {\n  addClasses,\n  removeClasses\n};","import { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nexport default function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  const window = getWindow();\n  let image;\n\n  function onReady() {\n    if (callback) callback();\n  }\n\n  const isPicture = $(imageEl).parent('picture')[0];\n\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n\n      if (sizes) {\n        image.sizes = sizes;\n      }\n\n      if (srcset) {\n        image.srcset = srcset;\n      }\n\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    // image already loaded...\n    onReady();\n  }\n}","export default function preloadImages() {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find('img');\n\n  function onReady() {\n    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;\n    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;\n\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady) swiper.update();\n      swiper.emit('imagesReady');\n    }\n  }\n\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);\n  }\n}","import loadImage from './loadImage.js';\nimport preloadImages from './preloadImages.js';\nexport default {\n  loadImage,\n  preloadImages\n};","function checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n  }\n}\n\nexport default {\n  checkOverflow\n};","export default {\n  init: true,\n  direction: 'horizontal',\n  touchEventsTarget: 'wrapper',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: 'input, select, option, textarea, button, video, label',\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: 'slide',\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n  // Breakpoints\n  breakpoints: undefined,\n  breakpointsBase: 'window',\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: true,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // Images\n  preloadImages: true,\n  updateOnImagesReady: true,\n  // loop\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  // rewind\n  rewind: false,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  maxBackfaceHiddenSlides: 10,\n  // NS\n  containerModifierClass: 'swiper-',\n  // NEW\n  slideClass: 'swiper-slide',\n  slideBlankClass: 'swiper-slide-invisible-blank',\n  slideActiveClass: 'swiper-slide-active',\n  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideDuplicateClass: 'swiper-slide-duplicate',\n  slideNextClass: 'swiper-slide-next',\n  slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n  slidePrevClass: 'swiper-slide-prev',\n  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n  wrapperClass: 'swiper-wrapper',\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n};","import { extend } from '../shared/utils.js';\nexport default function moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n\n    if (typeof moduleParams !== 'object' || moduleParams === null) {\n      extend(allModulesParams, obj);\n      return;\n    }\n\n    if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n\n    if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n      extend(allModulesParams, obj);\n      return;\n    }\n\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n\n    if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n\n    if (!params[moduleParamName]) params[moduleParamName] = {\n      enabled: false\n    };\n    extend(allModulesParams, obj);\n  };\n}","/* eslint no-param-reassign: \"off\" */\nimport { getDocument } from 'ssr-window';\nimport $ from '../shared/dom.js';\nimport { extend, now, deleteProps } from '../shared/utils.js';\nimport { getSupport } from '../shared/get-support.js';\nimport { getDevice } from '../shared/get-device.js';\nimport { getBrowser } from '../shared/get-browser.js';\nimport Resize from './modules/resize/resize.js';\nimport Observer from './modules/observer/observer.js';\nimport eventsEmitter from './events-emitter.js';\nimport update from './update/index.js';\nimport translate from './translate/index.js';\nimport transition from './transition/index.js';\nimport slide from './slide/index.js';\nimport loop from './loop/index.js';\nimport grabCursor from './grab-cursor/index.js';\nimport events from './events/index.js';\nimport breakpoints from './breakpoints/index.js';\nimport classes from './classes/index.js';\nimport images from './images/index.js';\nimport checkOverflow from './check-overflow/index.js';\nimport defaults from './defaults.js';\nimport moduleExtendParams from './moduleExtendParams.js';\nconst prototypes = {\n  eventsEmitter,\n  update,\n  translate,\n  transition,\n  slide,\n  loop,\n  grabCursor,\n  events,\n  breakpoints,\n  checkOverflow,\n  classes,\n  images\n};\nconst extendedDefaults = {};\n\nclass Swiper {\n  constructor() {\n    let el;\n    let params;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n\n    if (!params) params = {};\n    params = extend({}, params);\n    if (el && !params.el) params.el = el;\n\n    if (params.el && $(params.el).length > 1) {\n      const swipers = [];\n      $(params.el).each(containerEl => {\n        const newParams = extend({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    } // Swiper Instance\n\n\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n\n    const allModulesParams = {};\n    swiper.modules.forEach(mod => {\n      mod({\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    }); // Extend defaults with modules params\n\n    const swiperParams = extend({}, defaults, allModulesParams); // Extend defaults with passed params\n\n    swiper.params = extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend({}, swiper.params);\n    swiper.passedParams = extend({}, params); // add event listeners\n\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach(eventName => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    } // Save Dom lib\n\n\n    swiper.$ = $; // Extend Swiper\n\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: $(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n\n      isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEvents: function touchEvents() {\n        const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n        const desktop = ['pointerdown', 'pointermove', 'pointerup'];\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        focusableElements: swiper.params.focusableElements,\n        // Last click time\n        lastClickTime: now(),\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        isTouchEvent: undefined,\n        startMoving: undefined\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit('_swiper'); // Init\n\n    if (swiper.params.init) {\n      swiper.init();\n    } // Return app instance\n\n\n    return swiper;\n  }\n\n  enable() {\n    const swiper = this;\n    if (swiper.enabled) return;\n    swiper.enabled = true;\n\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n\n    swiper.emit('enable');\n  }\n\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    swiper.enabled = false;\n\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n\n    swiper.emit('disable');\n  }\n\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const cls = swiper.el.className.split(' ').filter(className => {\n      return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit('_containerClasses', cls.join(' '));\n  }\n\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    if (swiper.destroyed) return '';\n    return slideEl.className.split(' ').filter(className => {\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(' ');\n  }\n\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const updates = [];\n    swiper.slides.each(slideEl => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit('_slideClass', slideEl, classNames);\n    });\n    swiper.emit('_slideClasses', updates);\n  }\n\n  slidesPerViewDynamic(view, exact) {\n    if (view === void 0) {\n      view = 'current';\n    }\n\n    if (exact === void 0) {\n      exact = false;\n    }\n\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      // eslint-disable-next-line\n      if (view === 'current') {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        // previous\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n\n    return spv;\n  }\n\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    const {\n      snapGrid,\n      params\n    } = swiper; // Breakpoints\n\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n\n    function setTranslate() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    let translated;\n\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate();\n\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n\n      if (!translated) {\n        setTranslate();\n      }\n    }\n\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n\n    swiper.emit('update');\n  }\n\n  changeDirection(newDirection, needUpdate) {\n    if (needUpdate === void 0) {\n      needUpdate = true;\n    }\n\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n      return swiper;\n    }\n\n    swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each(slideEl => {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n    return swiper;\n  }\n\n  changeLanguageDirection(direction) {\n    const swiper = this;\n    if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;\n    swiper.rtl = direction === 'rtl';\n    swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;\n\n    if (swiper.rtl) {\n      swiper.$el.addClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'rtl';\n    } else {\n      swiper.$el.removeClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'ltr';\n    }\n\n    swiper.update();\n  }\n\n  mount(el) {\n    const swiper = this;\n    if (swiper.mounted) return true; // Find el\n\n    const $el = $(el || swiper.params.el);\n    el = $el[0];\n\n    if (!el) {\n      return false;\n    }\n\n    el.swiper = swiper;\n\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\n    };\n\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = $(el.shadowRoot.querySelector(getWrapperSelector())); // Children needs to return slot items\n\n        res.children = options => $el.children(options);\n\n        return res;\n      }\n\n      if (!$el.children) {\n        return $($el).children(getWrapperSelector());\n      }\n\n      return $el.children(getWrapperSelector());\n    }; // Find Wrapper\n\n\n    let $wrapperEl = getWrapper();\n\n    if ($wrapperEl.length === 0 && swiper.params.createElements) {\n      const document = getDocument();\n      const wrapper = document.createElement('div');\n      $wrapperEl = $(wrapper);\n      wrapper.className = swiper.params.wrapperClass;\n      $el.append(wrapper);\n      $el.children(`.${swiper.params.slideClass}`).each(slideEl => {\n        $wrapperEl.append(slideEl);\n      });\n    }\n\n    Object.assign(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n      wrongRTL: $wrapperEl.css('display') === '-webkit-box'\n    });\n    return true;\n  }\n\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized) return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false) return swiper;\n    swiper.emit('beforeInit'); // Set breakpoint\n\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    } // Add Classes\n\n\n    swiper.addClasses(); // Create loop\n\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    } // Update size\n\n\n    swiper.updateSize(); // Update slides\n\n    swiper.updateSlides();\n\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    } // Set Grab Cursor\n\n\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    } // Slide To Initial Slide\n\n\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    } // Attach events\n\n\n    swiper.attachEvents(); // Init Flag\n\n    swiper.initialized = true; // Emit\n\n    swiper.emit('init');\n    swiper.emit('afterInit');\n    return swiper;\n  }\n\n  destroy(deleteInstance, cleanStyles) {\n    if (deleteInstance === void 0) {\n      deleteInstance = true;\n    }\n\n    if (cleanStyles === void 0) {\n      cleanStyles = true;\n    }\n\n    const swiper = this;\n    const {\n      params,\n      $el,\n      $wrapperEl,\n      slides\n    } = swiper;\n\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n\n    swiper.emit('beforeDestroy'); // Init Flag\n\n    swiper.initialized = false; // Detach events\n\n    swiper.detachEvents(); // Destroy loop\n\n    if (params.loop) {\n      swiper.loopDestroy();\n    } // Cleanup styles\n\n\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr('style');\n      $wrapperEl.removeAttr('style');\n\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');\n      }\n    }\n\n    swiper.emit('destroy'); // Detach emitter events\n\n    Object.keys(swiper.eventsListeners).forEach(eventName => {\n      swiper.off(eventName);\n    });\n\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      deleteProps(swiper);\n    }\n\n    swiper.destroyed = true;\n    return null;\n  }\n\n  static extendDefaults(newDefaults) {\n    extend(extendedDefaults, newDefaults);\n  }\n\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n\n  static get defaults() {\n    return defaults;\n  }\n\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n\n    if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach(m => Swiper.installModule(m));\n      return Swiper;\n    }\n\n    Swiper.installModule(module);\n    return Swiper;\n  }\n\n}\n\nObject.keys(prototypes).forEach(prototypeGroup => {\n  Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\nexport default Swiper;","import $ from '../../shared/dom.js';\nimport { setCSSProperty } from '../../shared/utils.js';\nexport default function Virtual(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  extendParams({\n    virtual: {\n      enabled: false,\n      slides: [],\n      cache: true,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: true,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  let cssModeTimeout;\n  swiper.virtual = {\n    cache: {},\n    from: undefined,\n    to: undefined,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n\n  function renderSlide(slide, index) {\n    const params = swiper.params.virtual;\n\n    if (params.cache && swiper.virtual.cache[index]) {\n      return swiper.virtual.cache[index];\n    }\n\n    const $slideEl = params.renderSlide ? $(params.renderSlide.call(swiper, slide, index)) : $(`<div class=\"${swiper.params.slideClass}\" data-swiper-slide-index=\"${index}\">${slide}</div>`);\n    if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);\n    if (params.cache) swiper.virtual.cache[index] = $slideEl;\n    return $slideEl;\n  }\n\n  function update(force) {\n    const {\n      slidesPerView,\n      slidesPerGroup,\n      centeredSlides\n    } = swiper.params;\n    const {\n      addSlidesBefore,\n      addSlidesAfter\n    } = swiper.params.virtual;\n    const {\n      from: previousFrom,\n      to: previousTo,\n      slides,\n      slidesGrid: previousSlidesGrid,\n      offset: previousOffset\n    } = swiper.virtual;\n\n    if (!swiper.params.cssMode) {\n      swiper.updateActiveIndex();\n    }\n\n    const activeIndex = swiper.activeIndex || 0;\n    let offsetProp;\n    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\n    let slidesAfter;\n    let slidesBefore;\n\n    if (centeredSlides) {\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n    } else {\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n      slidesBefore = slidesPerGroup + addSlidesBefore;\n    }\n\n    const from = Math.max((activeIndex || 0) - slidesBefore, 0);\n    const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);\n    const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n    Object.assign(swiper.virtual, {\n      from,\n      to,\n      offset,\n      slidesGrid: swiper.slidesGrid\n    });\n\n    function onRendered() {\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n\n      if (swiper.lazy && swiper.params.lazy.enabled) {\n        swiper.lazy.load();\n      }\n\n      emit('virtualUpdate');\n    }\n\n    if (previousFrom === from && previousTo === to && !force) {\n      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n        swiper.slides.css(offsetProp, `${offset}px`);\n      }\n\n      swiper.updateProgress();\n      emit('virtualUpdate');\n      return;\n    }\n\n    if (swiper.params.virtual.renderExternal) {\n      swiper.params.virtual.renderExternal.call(swiper, {\n        offset,\n        from,\n        to,\n        slides: function getSlides() {\n          const slidesToRender = [];\n\n          for (let i = from; i <= to; i += 1) {\n            slidesToRender.push(slides[i]);\n          }\n\n          return slidesToRender;\n        }()\n      });\n\n      if (swiper.params.virtual.renderExternalUpdate) {\n        onRendered();\n      } else {\n        emit('virtualUpdate');\n      }\n\n      return;\n    }\n\n    const prependIndexes = [];\n    const appendIndexes = [];\n\n    if (force) {\n      swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();\n    } else {\n      for (let i = previousFrom; i <= previousTo; i += 1) {\n        if (i < from || i > to) {\n          swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${i}\"]`).remove();\n        }\n      }\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      if (i >= from && i <= to) {\n        if (typeof previousTo === 'undefined' || force) {\n          appendIndexes.push(i);\n        } else {\n          if (i > previousTo) appendIndexes.push(i);\n          if (i < previousFrom) prependIndexes.push(i);\n        }\n      }\n    }\n\n    appendIndexes.forEach(index => {\n      swiper.$wrapperEl.append(renderSlide(slides[index], index));\n    });\n    prependIndexes.sort((a, b) => b - a).forEach(index => {\n      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));\n    });\n    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, `${offset}px`);\n    onRendered();\n  }\n\n  function appendSlide(slides) {\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.push(slides[i]);\n      }\n    } else {\n      swiper.virtual.slides.push(slides);\n    }\n\n    update(true);\n  }\n\n  function prependSlide(slides) {\n    const activeIndex = swiper.activeIndex;\n    let newActiveIndex = activeIndex + 1;\n    let numberOfNewSlides = 1;\n\n    if (Array.isArray(slides)) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n      }\n\n      newActiveIndex = activeIndex + slides.length;\n      numberOfNewSlides = slides.length;\n    } else {\n      swiper.virtual.slides.unshift(slides);\n    }\n\n    if (swiper.params.virtual.cache) {\n      const cache = swiper.virtual.cache;\n      const newCache = {};\n      Object.keys(cache).forEach(cachedIndex => {\n        const $cachedEl = cache[cachedIndex];\n        const cachedElIndex = $cachedEl.attr('data-swiper-slide-index');\n\n        if (cachedElIndex) {\n          $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\n        }\n\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;\n      });\n      swiper.virtual.cache = newCache;\n    }\n\n    update(true);\n    swiper.slideTo(newActiveIndex, 0);\n  }\n\n  function removeSlide(slidesIndexes) {\n    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\n    let activeIndex = swiper.activeIndex;\n\n    if (Array.isArray(slidesIndexes)) {\n      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\n\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes[i]];\n        }\n\n        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n    } else {\n      swiper.virtual.slides.splice(slidesIndexes, 1);\n\n      if (swiper.params.virtual.cache) {\n        delete swiper.virtual.cache[slidesIndexes];\n      }\n\n      if (slidesIndexes < activeIndex) activeIndex -= 1;\n      activeIndex = Math.max(activeIndex, 0);\n    }\n\n    update(true);\n    swiper.slideTo(activeIndex, 0);\n  }\n\n  function removeAllSlides() {\n    swiper.virtual.slides = [];\n\n    if (swiper.params.virtual.cache) {\n      swiper.virtual.cache = {};\n    }\n\n    update(true);\n    swiper.slideTo(0, 0);\n  }\n\n  on('beforeInit', () => {\n    if (!swiper.params.virtual.enabled) return;\n    swiper.virtual.slides = swiper.params.virtual.slides;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n\n    if (!swiper.params.initialSlide) {\n      update();\n    }\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.virtual.enabled) return;\n\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\n      clearTimeout(cssModeTimeout);\n      cssModeTimeout = setTimeout(() => {\n        update();\n      }, 100);\n    } else {\n      update();\n    }\n  });\n  on('init update resize', () => {\n    if (!swiper.params.virtual.enabled) return;\n\n    if (swiper.params.cssMode) {\n      setCSSProperty(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);\n    }\n  });\n  Object.assign(swiper.virtual, {\n    appendSlide,\n    prependSlide,\n    removeSlide,\n    removeAllSlides,\n    update\n  });\n}","/* eslint-disable consistent-return */\nimport { getWindow, getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nexport default function Keyboard(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const document = getDocument();\n  const window = getWindow();\n  swiper.keyboard = {\n    enabled: false\n  };\n  extendParams({\n    keyboard: {\n      enabled: false,\n      onlyInViewport: true,\n      pageUpDown: true\n    }\n  });\n\n  function handle(event) {\n    if (!swiper.enabled) return;\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    const kc = e.keyCode || e.charCode;\n    const pageUpDown = swiper.params.keyboard.pageUpDown;\n    const isPageUp = pageUpDown && kc === 33;\n    const isPageDown = pageUpDown && kc === 34;\n    const isArrowLeft = kc === 37;\n    const isArrowRight = kc === 39;\n    const isArrowUp = kc === 38;\n    const isArrowDown = kc === 40; // Directions locks\n\n    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n      return false;\n    }\n\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n      return undefined;\n    }\n\n    if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\n      return undefined;\n    }\n\n    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n      let inView = false; // Check that swiper should be inside of visible area of window\n\n      if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {\n        return undefined;\n      }\n\n      const $el = swiper.$el;\n      const swiperWidth = $el[0].clientWidth;\n      const swiperHeight = $el[0].clientHeight;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n      const swiperOffset = swiper.$el.offset();\n      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\n\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n\n        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n          inView = true;\n        }\n      }\n\n      if (!inView) return undefined;\n    }\n\n    if (swiper.isHorizontal()) {\n      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n\n      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n    } else {\n      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n\n      if (isPageDown || isArrowDown) swiper.slideNext();\n      if (isPageUp || isArrowUp) swiper.slidePrev();\n    }\n\n    emit('keyPress', kc);\n    return undefined;\n  }\n\n  function enable() {\n    if (swiper.keyboard.enabled) return;\n    $(document).on('keydown', handle);\n    swiper.keyboard.enabled = true;\n  }\n\n  function disable() {\n    if (!swiper.keyboard.enabled) return;\n    $(document).off('keydown', handle);\n    swiper.keyboard.enabled = false;\n  }\n\n  on('init', () => {\n    if (swiper.params.keyboard.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.keyboard.enabled) {\n      disable();\n    }\n  });\n  Object.assign(swiper.keyboard, {\n    enable,\n    disable\n  });\n}","/* eslint-disable consistent-return */\nimport { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { now, nextTick } from '../../shared/utils.js';\nexport default function Mousewheel(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: 'container',\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = now();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n\n  function normalize(e) {\n    // Reasonable defaults\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0; // spinX, spinY\n\n    let pX = 0;\n    let pY = 0; // pixelX, pixelY\n    // Legacy\n\n    if ('detail' in e) {\n      sY = e.detail;\n    }\n\n    if ('wheelDelta' in e) {\n      sY = -e.wheelDelta / 120;\n    }\n\n    if ('wheelDeltaY' in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n\n    if ('wheelDeltaX' in e) {\n      sX = -e.wheelDeltaX / 120;\n    } // side scrolling on FF with DOMMouseScroll\n\n\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in e) {\n      pY = e.deltaY;\n    }\n\n    if ('deltaX' in e) {\n      pX = e.deltaX;\n    }\n\n    if (e.shiftKey && !pX) {\n      // if user scrolls with shift he wants horizontal scroll\n      pX = pY;\n      pY = 0;\n    }\n\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    } // Fall-back if spin cannot be determined\n\n\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n\n  function handleMouseEnter() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = true;\n  }\n\n  function handleMouseLeave() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = false;\n  }\n\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      // Prevent if delta of wheel scroll delta is below configured threshold\n      return false;\n    }\n\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      // Prevent if time between scrolls is below configured threshold\n      return false;\n    } // If the movement is NOT big enough and\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n    //   Don't go any further (avoid insignificant scroll movement).\n\n\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n      // Return false as a default\n      return true;\n    } // If user is scrolling towards the end:\n    //   If the slider hasn't hit the latest slide or\n    //   if the slider is a loop and\n    //   if the slider isn't moving right now:\n    //     Go to next slide and\n    //     emit a scroll event.\n    // Else (the user is scrolling towards the beginning) and\n    // if the slider hasn't hit the first slide or\n    // if the slider is a loop and\n    // if the slider isn't moving right now:\n    //   Go to prev slide and\n    //   emit a scroll event.\n\n\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit('scroll', newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit('scroll', newEvent.raw);\n    } // If you got here is because an animation has been triggered so store the current time\n\n\n    lastScrollTime = new window.Date().getTime(); // Return false as a default\n\n    return false;\n  }\n\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      // Return true to animate scroll on edges\n      return true;\n    }\n\n    return false;\n  }\n\n  function handle(event) {\n    let e = event;\n    let disableParentSwiper = true;\n    if (!swiper.enabled) return;\n    const params = swiper.params.mousewheel;\n\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarget);\n    }\n\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n\n    if (delta === 0) return true;\n    if (params.invert) delta = -delta; // Get the scroll positions\n\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:\n    //     the disableParentSwiper will be true.\n    // When loop is false:\n    //     if the scroll positions is not on edge,\n    //     then the disableParentSwiper will be true.\n    //     if the scroll on edge positions,\n    //     then the disableParentSwiper will be false.\n\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      // Register the new event in a variable which stores the relevant data\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event\n      }; // Keep the most recent events\n\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift(); // only store the last N events\n      }\n\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:\n      //   If direction has changed or\n      //   if the scroll is quicker than the previous one:\n      //     Animate the slider.\n      // Else (this is the first time the wheel is moved):\n      //     Animate the slider.\n\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      } // If it's time to release the scroll:\n      //   Return now so you don't hit the preventDefault.\n\n\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      // Freemode or scrollContainer:\n      // If we recently snapped after a momentum scroll, then ignore wheel events\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n      // or if it's a new scroll (larger delta or inverse sign as last event before\n      // an end-of-momentum snap).\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = undefined;\n\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n\n        if (swiper.params.freeMode.sticky) {\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\n          // 1. do all N events have decreasing or same (absolute value) delta?\n          // 2. did all N events arrive in the last M (M=500?) msecs?\n          // 3. does the earliest event have an (absolute value) delta that's\n          //    at least P (P=1?) larger than the most recent event's delta?\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n          // Snap immediately and ignore remaining wheel events in this scroll.\n          // See comment above for \"remaining wheel events in this scroll\" determination.\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n          clearTimeout(timeout);\n          timeout = undefined;\n\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\n            // to wait for more events. Snap ASAP on the next tick.\n            // Also, because there's some remaining momentum we'll bias the snap in the\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\n            // if it's already scrolled more than 20% in the current direction, keep going.\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 0); // no delay; move on next tick\n          }\n\n          if (!timeout) {\n            // if we get here, then we haven't detected the end of a momentum scroll, so\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\n            // for 500ms.\n            timeout = nextTick(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 500);\n          }\n        } // Emit event\n\n\n        if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay\n\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions\n\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n      }\n    }\n\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    return false;\n  }\n\n  function events(method) {\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarget);\n    }\n\n    target[method]('mouseenter', handleMouseEnter);\n    target[method]('mouseleave', handleMouseLeave);\n    target[method]('wheel', handle);\n  }\n\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener('wheel', handle);\n      return true;\n    }\n\n    if (swiper.mousewheel.enabled) return false;\n    events('on');\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n\n    if (!swiper.mousewheel.enabled) return false;\n    events('off');\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n\n  on('init', () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n\n    if (swiper.params.mousewheel.enabled) enable();\n  });\n  on('destroy', () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n\n    if (swiper.mousewheel.enabled) disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}","import { getDocument } from 'ssr-window';\nexport default function createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  const document = getDocument();\n\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach(key => {\n      if (!params[key] && params.auto === true) {\n        let element = swiper.$el.children(`.${checkProps[key]}`)[0];\n\n        if (!element) {\n          element = document.createElement('div');\n          element.className = checkProps[key];\n          swiper.$el.append(element);\n        }\n\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n\n  return params;\n}","import createElementIfNotDefined from '../../shared/create-element-if-not-defined.js';\nimport $ from '../../shared/dom.js';\nexport default function Navigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  extendParams({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: 'swiper-button-disabled',\n      hiddenClass: 'swiper-button-hidden',\n      lockClass: 'swiper-button-lock',\n      navigationDisabledClass: 'swiper-navigation-disabled'\n    }\n  });\n  swiper.navigation = {\n    nextEl: null,\n    $nextEl: null,\n    prevEl: null,\n    $prevEl: null\n  };\n\n  function getEl(el) {\n    let $el;\n\n    if (el) {\n      $el = $(el);\n\n      if (swiper.params.uniqueNavElements && typeof el === 'string' && $el.length > 1 && swiper.$el.find(el).length === 1) {\n        $el = swiper.$el.find(el);\n      }\n    }\n\n    return $el;\n  }\n\n  function toggleEl($el, disabled) {\n    const params = swiper.params.navigation;\n\n    if ($el && $el.length > 0) {\n      $el[disabled ? 'addClass' : 'removeClass'](params.disabledClass);\n      if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;\n\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n      }\n    }\n  }\n\n  function update() {\n    // Update Navigation Buttons\n    if (swiper.params.loop) return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    toggleEl($prevEl, swiper.isBeginning && !swiper.params.rewind);\n    toggleEl($nextEl, swiper.isEnd && !swiper.params.rewind);\n  }\n\n  function onPrevClick(e) {\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slidePrev();\n    emit('navigationPrev');\n  }\n\n  function onNextClick(e) {\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slideNext();\n    emit('navigationNext');\n  }\n\n  function init() {\n    const params = swiper.params.navigation;\n    swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n      nextEl: 'swiper-button-next',\n      prevEl: 'swiper-button-prev'\n    });\n    if (!(params.nextEl || params.prevEl)) return;\n    const $nextEl = getEl(params.nextEl);\n    const $prevEl = getEl(params.prevEl);\n\n    if ($nextEl && $nextEl.length > 0) {\n      $nextEl.on('click', onNextClick);\n    }\n\n    if ($prevEl && $prevEl.length > 0) {\n      $prevEl.on('click', onPrevClick);\n    }\n\n    Object.assign(swiper.navigation, {\n      $nextEl,\n      nextEl: $nextEl && $nextEl[0],\n      $prevEl,\n      prevEl: $prevEl && $prevEl[0]\n    });\n\n    if (!swiper.enabled) {\n      if ($nextEl) $nextEl.addClass(params.lockClass);\n      if ($prevEl) $prevEl.addClass(params.lockClass);\n    }\n  }\n\n  function destroy() {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($nextEl && $nextEl.length) {\n      $nextEl.off('click', onNextClick);\n      $nextEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n\n    if ($prevEl && $prevEl.length) {\n      $prevEl.off('click', onPrevClick);\n      $prevEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n  }\n\n  on('init', () => {\n    if (swiper.params.navigation.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      update();\n    }\n  });\n  on('toEdge fromEdge lock unlock', () => {\n    update();\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($nextEl) {\n      $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n    }\n\n    if ($prevEl) {\n      $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n    }\n  });\n  on('click', (_s, e) => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    const targetEl = e.target;\n\n    if (swiper.params.navigation.hideOnClick && !$(targetEl).is($prevEl) && !$(targetEl).is($nextEl)) {\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n      let isHidden;\n\n      if ($nextEl) {\n        isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n      } else if ($prevEl) {\n        isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n      }\n\n      if (isHidden === true) {\n        emit('navigationShow');\n      } else {\n        emit('navigationHide');\n      }\n\n      if ($nextEl) {\n        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n\n      if ($prevEl) {\n        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n    }\n  });\n\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.navigation.navigationDisabledClass);\n    init();\n    update();\n  };\n\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.navigation.navigationDisabledClass);\n    destroy();\n  };\n\n  Object.assign(swiper.navigation, {\n    enable,\n    disable,\n    update,\n    init,\n    destroy\n  });\n}","import $ from '../../shared/dom.js';\nimport classesToSelector from '../../shared/classes-to-selector.js';\nimport createElementIfNotDefined from '../../shared/create-element-if-not-defined.js';\nexport default function Pagination(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const pfx = 'swiper-pagination';\n  extendParams({\n    pagination: {\n      el: null,\n      bulletElement: 'span',\n      clickable: false,\n      hideOnClick: false,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: false,\n      type: 'bullets',\n      // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n      dynamicBullets: false,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: number => number,\n      formatFractionTotal: number => number,\n      bulletClass: `${pfx}-bullet`,\n      bulletActiveClass: `${pfx}-bullet-active`,\n      modifierClass: `${pfx}-`,\n      currentClass: `${pfx}-current`,\n      totalClass: `${pfx}-total`,\n      hiddenClass: `${pfx}-hidden`,\n      progressbarFillClass: `${pfx}-progressbar-fill`,\n      progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n      clickableClass: `${pfx}-clickable`,\n      lockClass: `${pfx}-lock`,\n      horizontalClass: `${pfx}-horizontal`,\n      verticalClass: `${pfx}-vertical`,\n      paginationDisabledClass: `${pfx}-disabled`\n    }\n  });\n  swiper.pagination = {\n    el: null,\n    $el: null,\n    bullets: []\n  };\n  let bulletSize;\n  let dynamicBulletIndex = 0;\n\n  function isPaginationDisabled() {\n    return !swiper.params.pagination.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0;\n  }\n\n  function setSideBullets($bulletEl, position) {\n    const {\n      bulletActiveClass\n    } = swiper.params.pagination;\n    $bulletEl[position]().addClass(`${bulletActiveClass}-${position}`)[position]().addClass(`${bulletActiveClass}-${position}-${position}`);\n  }\n\n  function update() {\n    // Render || Update Pagination bullets/items\n    const rtl = swiper.rtl;\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el; // Current/Total\n\n    let current;\n    const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n    if (swiper.params.loop) {\n      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n\n      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {\n        current -= slidesLength - swiper.loopedSlides * 2;\n      }\n\n      if (current > total - 1) current -= total;\n      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;\n    } else if (typeof swiper.snapIndex !== 'undefined') {\n      current = swiper.snapIndex;\n    } else {\n      current = swiper.activeIndex || 0;\n    } // Types\n\n\n    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n      const bullets = swiper.pagination.bullets;\n      let firstIndex;\n      let lastIndex;\n      let midIndex;\n\n      if (params.dynamicBullets) {\n        bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);\n        $el.css(swiper.isHorizontal() ? 'width' : 'height', `${bulletSize * (params.dynamicMainBullets + 4)}px`);\n\n        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {\n          dynamicBulletIndex += current - (swiper.previousIndex - swiper.loopedSlides || 0);\n\n          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n            dynamicBulletIndex = params.dynamicMainBullets - 1;\n          } else if (dynamicBulletIndex < 0) {\n            dynamicBulletIndex = 0;\n          }\n        }\n\n        firstIndex = Math.max(current - dynamicBulletIndex, 0);\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n        midIndex = (lastIndex + firstIndex) / 2;\n      }\n\n      bullets.removeClass(['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`).join(' '));\n\n      if ($el.length > 1) {\n        bullets.each(bullet => {\n          const $bullet = $(bullet);\n          const bulletIndex = $bullet.index();\n\n          if (bulletIndex === current) {\n            $bullet.addClass(params.bulletActiveClass);\n          }\n\n          if (params.dynamicBullets) {\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n              $bullet.addClass(`${params.bulletActiveClass}-main`);\n            }\n\n            if (bulletIndex === firstIndex) {\n              setSideBullets($bullet, 'prev');\n            }\n\n            if (bulletIndex === lastIndex) {\n              setSideBullets($bullet, 'next');\n            }\n          }\n        });\n      } else {\n        const $bullet = bullets.eq(current);\n        const bulletIndex = $bullet.index();\n        $bullet.addClass(params.bulletActiveClass);\n\n        if (params.dynamicBullets) {\n          const $firstDisplayedBullet = bullets.eq(firstIndex);\n          const $lastDisplayedBullet = bullets.eq(lastIndex);\n\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\n            bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);\n          }\n\n          if (swiper.params.loop) {\n            if (bulletIndex >= bullets.length) {\n              for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {\n                bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);\n              }\n\n              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);\n            } else {\n              setSideBullets($firstDisplayedBullet, 'prev');\n              setSideBullets($lastDisplayedBullet, 'next');\n            }\n          } else {\n            setSideBullets($firstDisplayedBullet, 'prev');\n            setSideBullets($lastDisplayedBullet, 'next');\n          }\n        }\n      }\n\n      if (params.dynamicBullets) {\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n        const offsetProp = rtl ? 'right' : 'left';\n        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);\n      }\n    }\n\n    if (params.type === 'fraction') {\n      $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));\n      $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));\n    }\n\n    if (params.type === 'progressbar') {\n      let progressbarDirection;\n\n      if (params.progressbarOpposite) {\n        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\n      } else {\n        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\n      }\n\n      const scale = (current + 1) / total;\n      let scaleX = 1;\n      let scaleY = 1;\n\n      if (progressbarDirection === 'horizontal') {\n        scaleX = scale;\n      } else {\n        scaleY = scale;\n      }\n\n      $el.find(classesToSelector(params.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);\n    }\n\n    if (params.type === 'custom' && params.renderCustom) {\n      $el.html(params.renderCustom(swiper, current + 1, total));\n      emit('paginationRender', $el[0]);\n    } else {\n      emit('paginationUpdate', $el[0]);\n    }\n\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n    }\n  }\n\n  function render() {\n    // Render Container\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    let paginationHTML = '';\n\n    if (params.type === 'bullets') {\n      let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.loop && numberOfBullets > slidesLength) {\n        numberOfBullets = slidesLength;\n      }\n\n      for (let i = 0; i < numberOfBullets; i += 1) {\n        if (params.renderBullet) {\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n        } else {\n          paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n        }\n      }\n\n      $el.html(paginationHTML);\n      swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));\n    }\n\n    if (params.type === 'fraction') {\n      if (params.renderFraction) {\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n      } else {\n        paginationHTML = `<span class=\"${params.currentClass}\"></span>` + ' / ' + `<span class=\"${params.totalClass}\"></span>`;\n      }\n\n      $el.html(paginationHTML);\n    }\n\n    if (params.type === 'progressbar') {\n      if (params.renderProgressbar) {\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n      } else {\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n      }\n\n      $el.html(paginationHTML);\n    }\n\n    if (params.type !== 'custom') {\n      emit('paginationRender', swiper.pagination.$el[0]);\n    }\n  }\n\n  function init() {\n    swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n      el: 'swiper-pagination'\n    });\n    const params = swiper.params.pagination;\n    if (!params.el) return;\n    let $el = $(params.el);\n    if ($el.length === 0) return;\n\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {\n      $el = swiper.$el.find(params.el); // check if it belongs to another nested Swiper\n\n      if ($el.length > 1) {\n        $el = $el.filter(el => {\n          if ($(el).parents('.swiper')[0] !== swiper.el) return false;\n          return true;\n        });\n      }\n    }\n\n    if (params.type === 'bullets' && params.clickable) {\n      $el.addClass(params.clickableClass);\n    }\n\n    $el.addClass(params.modifierClass + params.type);\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n\n    if (params.type === 'bullets' && params.dynamicBullets) {\n      $el.addClass(`${params.modifierClass}${params.type}-dynamic`);\n      dynamicBulletIndex = 0;\n\n      if (params.dynamicMainBullets < 1) {\n        params.dynamicMainBullets = 1;\n      }\n    }\n\n    if (params.type === 'progressbar' && params.progressbarOpposite) {\n      $el.addClass(params.progressbarOppositeClass);\n    }\n\n    if (params.clickable) {\n      $el.on('click', classesToSelector(params.bulletClass), function onClick(e) {\n        e.preventDefault();\n        let index = $(this).index() * swiper.params.slidesPerGroup;\n        if (swiper.params.loop) index += swiper.loopedSlides;\n        swiper.slideTo(index);\n      });\n    }\n\n    Object.assign(swiper.pagination, {\n      $el,\n      el: $el[0]\n    });\n\n    if (!swiper.enabled) {\n      $el.addClass(params.lockClass);\n    }\n  }\n\n  function destroy() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const $el = swiper.pagination.$el;\n    $el.removeClass(params.hiddenClass);\n    $el.removeClass(params.modifierClass + params.type);\n    $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    if (swiper.pagination.bullets && swiper.pagination.bullets.removeClass) swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n\n    if (params.clickable) {\n      $el.off('click', classesToSelector(params.bulletClass));\n    }\n  }\n\n  on('init', () => {\n    if (swiper.params.pagination.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      render();\n      update();\n    }\n  });\n  on('activeIndexChange', () => {\n    if (swiper.params.loop) {\n      update();\n    } else if (typeof swiper.snapIndex === 'undefined') {\n      update();\n    }\n  });\n  on('snapIndexChange', () => {\n    if (!swiper.params.loop) {\n      update();\n    }\n  });\n  on('slidesLengthChange', () => {\n    if (swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on('snapGridLengthChange', () => {\n    if (!swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    const {\n      $el\n    } = swiper.pagination;\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);\n    }\n  });\n  on('lock unlock', () => {\n    update();\n  });\n  on('click', (_s, e) => {\n    const targetEl = e.target;\n    const {\n      $el\n    } = swiper.pagination;\n\n    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && $el && $el.length > 0 && !$(targetEl).hasClass(swiper.params.pagination.bulletClass)) {\n      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n      const isHidden = $el.hasClass(swiper.params.pagination.hiddenClass);\n\n      if (isHidden === true) {\n        emit('paginationShow');\n      } else {\n        emit('paginationHide');\n      }\n\n      $el.toggleClass(swiper.params.pagination.hiddenClass);\n    }\n  });\n\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n    }\n\n    init();\n    render();\n    update();\n  };\n\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n    }\n\n    destroy();\n  };\n\n  Object.assign(swiper.pagination, {\n    enable,\n    disable,\n    render,\n    update,\n    init,\n    destroy\n  });\n}","import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { nextTick } from '../../shared/utils.js';\nimport createElementIfNotDefined from '../../shared/create-element-if-not-defined.js';\nexport default function Scrollbar(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const document = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: 'auto',\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: 'swiper-scrollbar-lock',\n      dragClass: 'swiper-scrollbar-drag',\n      scrollbarDisabledClass: 'swiper-scrollbar-disabled',\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null,\n    $el: null,\n    $dragEl: null\n  };\n\n  function setTranslate() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl,\n      progress\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n\n    if (rtl) {\n      newPos = -newPos;\n\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n\n    if (swiper.isHorizontal()) {\n      $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);\n      $dragEl[0].style.width = `${newSize}px`;\n    } else {\n      $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);\n      $dragEl[0].style.height = `${newSize}px`;\n    }\n\n    if (params.hide) {\n      clearTimeout(timeout);\n      $el[0].style.opacity = 1;\n      timeout = setTimeout(() => {\n        $el[0].style.opacity = 0;\n        $el.transition(400);\n      }, 1000);\n    }\n  }\n\n  function setTransition(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    swiper.scrollbar.$dragEl.transition(duration);\n  }\n\n  function updateSize() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    $dragEl[0].style.width = '';\n    $dragEl[0].style.height = '';\n    trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n\n    if (swiper.params.scrollbar.dragSize === 'auto') {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n\n    if (swiper.isHorizontal()) {\n      $dragEl[0].style.width = `${dragSize}px`;\n    } else {\n      $dragEl[0].style.height = `${dragSize}px`;\n    }\n\n    if (divider >= 1) {\n      $el[0].style.display = 'none';\n    } else {\n      $el[0].style.display = '';\n    }\n\n    if (swiper.params.scrollbar.hide) {\n      $el[0].style.opacity = 0;\n    }\n\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.$el[swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);\n    }\n  }\n\n  function getPointerPosition(e) {\n    if (swiper.isHorizontal()) {\n      return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;\n    }\n\n    return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;\n  }\n\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    $wrapperEl.transition(100);\n    $dragEl.transition(100);\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    $el.transition(0);\n\n    if (params.hide) {\n      $el.css('opacity', 1);\n    }\n\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', 'none');\n    }\n\n    emit('scrollbarDragStart', e);\n  }\n\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    if (!isTouched) return;\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    setDragPosition(e);\n    $wrapperEl.transition(0);\n    $el.transition(0);\n    $dragEl.transition(0);\n    emit('scrollbarDragMove', e);\n  }\n\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    if (!isTouched) return;\n    isTouched = false;\n\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', '');\n      $wrapperEl.transition('');\n    }\n\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        $el.css('opacity', 0);\n        $el.transition(400);\n      }, 1000);\n    }\n\n    emit('scrollbarDragEnd', e);\n\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n\n  function events(method) {\n    const {\n      scrollbar,\n      touchEventsTouch,\n      touchEventsDesktop,\n      params,\n      support\n    } = swiper;\n    const $el = scrollbar.$el;\n    if (!$el) return;\n    const target = $el[0];\n    const activeListener = support.passiveListener && params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = support.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target) return;\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n\n    if (!support.touch) {\n      target[eventMethod](touchEventsDesktop.start, onDragStart, activeListener);\n      document[eventMethod](touchEventsDesktop.move, onDragMove, activeListener);\n      document[eventMethod](touchEventsDesktop.end, onDragEnd, passiveListener);\n    } else {\n      target[eventMethod](touchEventsTouch.start, onDragStart, activeListener);\n      target[eventMethod](touchEventsTouch.move, onDragMove, activeListener);\n      target[eventMethod](touchEventsTouch.end, onDragEnd, passiveListener);\n    }\n  }\n\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('on');\n  }\n\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('off');\n  }\n\n  function init() {\n    const {\n      scrollbar,\n      $el: $swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: 'swiper-scrollbar'\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el) return;\n    let $el = $(params.el);\n\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n      $el = $swiperEl.find(params.el);\n    }\n\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);\n\n    if ($dragEl.length === 0) {\n      $dragEl = $(`<div class=\"${swiper.params.scrollbar.dragClass}\"></div>`);\n      $el.append($dragEl);\n    }\n\n    Object.assign(scrollbar, {\n      $el,\n      el: $el[0],\n      $dragEl,\n      dragEl: $dragEl[0]\n    });\n\n    if (params.draggable) {\n      enableDraggable();\n    }\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n    }\n  }\n\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const $el = swiper.scrollbar.$el;\n\n    if ($el) {\n      $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    }\n\n    disableDraggable();\n  }\n\n  on('init', () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      updateSize();\n      setTranslate();\n    }\n  });\n  on('update resize observerUpdate lock unlock', () => {\n    updateSize();\n  });\n  on('setTranslate', () => {\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    setTransition(duration);\n  });\n  on('enable disable', () => {\n    const {\n      $el\n    } = swiper.scrollbar;\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n\n    init();\n    updateSize();\n    setTranslate();\n  };\n\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n\n    destroy();\n  };\n\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize,\n    setTranslate,\n    init,\n    destroy\n  });\n}","import $ from '../../shared/dom.js';\nexport default function Parallax(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    parallax: {\n      enabled: false\n    }\n  });\n\n  const setTransform = (el, progress) => {\n    const {\n      rtl\n    } = swiper;\n    const $el = $(el);\n    const rtlFactor = rtl ? -1 : 1;\n    const p = $el.attr('data-swiper-parallax') || '0';\n    let x = $el.attr('data-swiper-parallax-x');\n    let y = $el.attr('data-swiper-parallax-y');\n    const scale = $el.attr('data-swiper-parallax-scale');\n    const opacity = $el.attr('data-swiper-parallax-opacity');\n\n    if (x || y) {\n      x = x || '0';\n      y = y || '0';\n    } else if (swiper.isHorizontal()) {\n      x = p;\n      y = '0';\n    } else {\n      y = p;\n      x = '0';\n    }\n\n    if (x.indexOf('%') >= 0) {\n      x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n    } else {\n      x = `${x * progress * rtlFactor}px`;\n    }\n\n    if (y.indexOf('%') >= 0) {\n      y = `${parseInt(y, 10) * progress}%`;\n    } else {\n      y = `${y * progress}px`;\n    }\n\n    if (typeof opacity !== 'undefined' && opacity !== null) {\n      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n      $el[0].style.opacity = currentOpacity;\n    }\n\n    if (typeof scale === 'undefined' || scale === null) {\n      $el.transform(`translate3d(${x}, ${y}, 0px)`);\n    } else {\n      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n      $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);\n    }\n  };\n\n  const setTranslate = () => {\n    const {\n      $el,\n      slides,\n      progress,\n      snapGrid\n    } = swiper;\n    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n      setTransform(el, progress);\n    });\n    slides.each((slideEl, slideIndex) => {\n      let slideProgress = slideEl.progress;\n\n      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\n        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n      }\n\n      slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n      $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n        setTransform(el, slideProgress);\n      });\n    });\n  };\n\n  const setTransition = function (duration) {\n    if (duration === void 0) {\n      duration = swiper.params.speed;\n    }\n\n    const {\n      $el\n    } = swiper;\n    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(parallaxEl => {\n      const $parallaxEl = $(parallaxEl);\n      let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;\n      if (duration === 0) parallaxDuration = 0;\n      $parallaxEl.transition(parallaxDuration);\n    });\n  };\n\n  on('beforeInit', () => {\n    if (!swiper.params.parallax.enabled) return;\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n  });\n  on('init', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTransition', (_swiper, duration) => {\n    if (!swiper.params.parallax.enabled) return;\n    setTransition(duration);\n  });\n}","import { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { getTranslate } from '../../shared/utils.js';\nexport default function Zoom(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  extendParams({\n    zoom: {\n      enabled: false,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: true,\n      containerClass: 'swiper-zoom-container',\n      zoomedSlideClass: 'swiper-slide-zoomed'\n    }\n  });\n  swiper.zoom = {\n    enabled: false\n  };\n  let currentScale = 1;\n  let isScaling = false;\n  let gesturesEnabled;\n  let fakeGestureTouched;\n  let fakeGestureMoved;\n  const gesture = {\n    $slideEl: undefined,\n    slideWidth: undefined,\n    slideHeight: undefined,\n    $imageEl: undefined,\n    $imageWrapEl: undefined,\n    maxRatio: 3\n  };\n  const image = {\n    isTouched: undefined,\n    isMoved: undefined,\n    currentX: undefined,\n    currentY: undefined,\n    minX: undefined,\n    minY: undefined,\n    maxX: undefined,\n    maxY: undefined,\n    width: undefined,\n    height: undefined,\n    startX: undefined,\n    startY: undefined,\n    touchesStart: {},\n    touchesCurrent: {}\n  };\n  const velocity = {\n    x: undefined,\n    y: undefined,\n    prevPositionX: undefined,\n    prevPositionY: undefined,\n    prevTime: undefined\n  };\n  let scale = 1;\n  Object.defineProperty(swiper.zoom, 'scale', {\n    get() {\n      return scale;\n    },\n\n    set(value) {\n      if (scale !== value) {\n        const imageEl = gesture.$imageEl ? gesture.$imageEl[0] : undefined;\n        const slideEl = gesture.$slideEl ? gesture.$slideEl[0] : undefined;\n        emit('zoomChange', value, imageEl, slideEl);\n      }\n\n      scale = value;\n    }\n\n  });\n\n  function getDistanceBetweenTouches(e) {\n    if (e.targetTouches.length < 2) return 1;\n    const x1 = e.targetTouches[0].pageX;\n    const y1 = e.targetTouches[0].pageY;\n    const x2 = e.targetTouches[1].pageX;\n    const y2 = e.targetTouches[1].pageY;\n    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n    return distance;\n  } // Events\n\n\n  function onGestureStart(e) {\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    fakeGestureTouched = false;\n    fakeGestureMoved = false;\n\n    if (!support.gestures) {\n      if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {\n        return;\n      }\n\n      fakeGestureTouched = true;\n      gesture.scaleStart = getDistanceBetweenTouches(e);\n    }\n\n    if (!gesture.$slideEl || !gesture.$slideEl.length) {\n      gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);\n      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n      if (gesture.$imageWrapEl.length === 0) {\n        gesture.$imageEl = undefined;\n        return;\n      }\n    }\n\n    if (gesture.$imageEl) {\n      gesture.$imageEl.transition(0);\n    }\n\n    isScaling = true;\n  }\n\n  function onGestureChange(e) {\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n\n    if (!support.gestures) {\n      if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {\n        return;\n      }\n\n      fakeGestureMoved = true;\n      gesture.scaleMove = getDistanceBetweenTouches(e);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n      if (e.type === 'gesturechange') onGestureStart(e);\n      return;\n    }\n\n    if (support.gestures) {\n      zoom.scale = e.scale * currentScale;\n    } else {\n      zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n    }\n\n    if (zoom.scale > gesture.maxRatio) {\n      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n    }\n\n    if (zoom.scale < params.minRatio) {\n      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n    }\n\n    gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n\n  function onGestureEnd(e) {\n    const device = swiper.device;\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n\n    if (!support.gestures) {\n      if (!fakeGestureTouched || !fakeGestureMoved) {\n        return;\n      }\n\n      if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {\n        return;\n      }\n\n      fakeGestureTouched = false;\n      fakeGestureMoved = false;\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n    gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    currentScale = zoom.scale;\n    isScaling = false;\n    if (zoom.scale === 1) gesture.$slideEl = undefined;\n  }\n\n  function onTouchStart(e) {\n    const device = swiper.device;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    if (image.isTouched) return;\n    if (device.android && e.cancelable) e.preventDefault();\n    image.isTouched = true;\n    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  }\n\n  function onTouchMove(e) {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    swiper.allowClick = false;\n    if (!image.isTouched || !gesture.$slideEl) return;\n\n    if (!image.isMoved) {\n      image.width = gesture.$imageEl[0].offsetWidth;\n      image.height = gesture.$imageEl[0].offsetHeight;\n      image.startX = getTranslate(gesture.$imageWrapEl[0], 'x') || 0;\n      image.startY = getTranslate(gesture.$imageWrapEl[0], 'y') || 0;\n      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n      gesture.$imageWrapEl.transition(0);\n    } // Define if we need image drag\n\n\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n    if (!image.isMoved && !isScaling) {\n      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n        image.isTouched = false;\n        return;\n      }\n\n      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n        image.isTouched = false;\n        return;\n      }\n    }\n\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n\n    e.stopPropagation();\n    image.isMoved = true;\n    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;\n    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;\n\n    if (image.currentX < image.minX) {\n      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n    }\n\n    if (image.currentX > image.maxX) {\n      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n    }\n\n    if (image.currentY < image.minY) {\n      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n    }\n\n    if (image.currentY > image.maxY) {\n      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n    } // Velocity\n\n\n    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n    if (!velocity.prevTime) velocity.prevTime = Date.now();\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n    velocity.prevPositionX = image.touchesCurrent.x;\n    velocity.prevPositionY = image.touchesCurrent.y;\n    velocity.prevTime = Date.now();\n    gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n\n  function onTouchEnd() {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n\n    if (!image.isTouched || !image.isMoved) {\n      image.isTouched = false;\n      image.isMoved = false;\n      return;\n    }\n\n    image.isTouched = false;\n    image.isMoved = false;\n    let momentumDurationX = 300;\n    let momentumDurationY = 300;\n    const momentumDistanceX = velocity.x * momentumDurationX;\n    const newPositionX = image.currentX + momentumDistanceX;\n    const momentumDistanceY = velocity.y * momentumDurationY;\n    const newPositionY = image.currentY + momentumDistanceY; // Fix duration\n\n    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n    image.currentX = newPositionX;\n    image.currentY = newPositionY; // Define if we need image drag\n\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n    gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n\n  function onTransitionEnd() {\n    const zoom = swiper.zoom;\n\n    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n      if (gesture.$imageEl) {\n        gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');\n      }\n\n      if (gesture.$imageWrapEl) {\n        gesture.$imageWrapEl.transform('translate3d(0,0,0)');\n      }\n\n      zoom.scale = 1;\n      currentScale = 1;\n      gesture.$slideEl = undefined;\n      gesture.$imageEl = undefined;\n      gesture.$imageWrapEl = undefined;\n    }\n  }\n\n  function zoomIn(e) {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n\n    if (!gesture.$slideEl) {\n      if (e && e.target) {\n        gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);\n      }\n\n      if (!gesture.$slideEl) {\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n        } else {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n        }\n      }\n\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.touchAction = 'none';\n    }\n\n    gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);\n    let touchX;\n    let touchY;\n    let offsetX;\n    let offsetY;\n    let diffX;\n    let diffY;\n    let translateX;\n    let translateY;\n    let imageWidth;\n    let imageHeight;\n    let scaledWidth;\n    let scaledHeight;\n    let translateMinX;\n    let translateMinY;\n    let translateMaxX;\n    let translateMaxY;\n    let slideWidth;\n    let slideHeight;\n\n    if (typeof image.touchesStart.x === 'undefined' && e) {\n      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;\n      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;\n    } else {\n      touchX = image.touchesStart.x;\n      touchY = image.touchesStart.y;\n    }\n\n    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n    currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n    if (e) {\n      slideWidth = gesture.$slideEl[0].offsetWidth;\n      slideHeight = gesture.$slideEl[0].offsetHeight;\n      offsetX = gesture.$slideEl.offset().left + window.scrollX;\n      offsetY = gesture.$slideEl.offset().top + window.scrollY;\n      diffX = offsetX + slideWidth / 2 - touchX;\n      diffY = offsetY + slideHeight / 2 - touchY;\n      imageWidth = gesture.$imageEl[0].offsetWidth;\n      imageHeight = gesture.$imageEl[0].offsetHeight;\n      scaledWidth = imageWidth * zoom.scale;\n      scaledHeight = imageHeight * zoom.scale;\n      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n      translateMaxX = -translateMinX;\n      translateMaxY = -translateMinY;\n      translateX = diffX * zoom.scale;\n      translateY = diffY * zoom.scale;\n\n      if (translateX < translateMinX) {\n        translateX = translateMinX;\n      }\n\n      if (translateX > translateMaxX) {\n        translateX = translateMaxX;\n      }\n\n      if (translateY < translateMinY) {\n        translateY = translateMinY;\n      }\n\n      if (translateY > translateMaxY) {\n        translateY = translateMaxY;\n      }\n    } else {\n      translateX = 0;\n      translateY = 0;\n    }\n\n    gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);\n    gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n\n  function zoomOut() {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n\n    if (!gesture.$slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n      } else {\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      }\n\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = '';\n      swiper.wrapperEl.style.touchAction = '';\n    }\n\n    zoom.scale = 1;\n    currentScale = 1;\n    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');\n    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');\n    gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);\n    gesture.$slideEl = undefined;\n  } // Toggle Zoom\n\n\n  function zoomToggle(e) {\n    const zoom = swiper.zoom;\n\n    if (zoom.scale && zoom.scale !== 1) {\n      // Zoom Out\n      zoomOut();\n    } else {\n      // Zoom In\n      zoomIn(e);\n    }\n  }\n\n  function getListeners() {\n    const support = swiper.support;\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    const activeListenerWithCapture = support.passiveListener ? {\n      passive: false,\n      capture: true\n    } : true;\n    return {\n      passiveListener,\n      activeListenerWithCapture\n    };\n  }\n\n  function getSlideSelector() {\n    return `.${swiper.params.slideClass}`;\n  }\n\n  function toggleGestures(method) {\n    const {\n      passiveListener\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    swiper.$wrapperEl[method]('gesturestart', slideSelector, onGestureStart, passiveListener);\n    swiper.$wrapperEl[method]('gesturechange', slideSelector, onGestureChange, passiveListener);\n    swiper.$wrapperEl[method]('gestureend', slideSelector, onGestureEnd, passiveListener);\n  }\n\n  function enableGestures() {\n    if (gesturesEnabled) return;\n    gesturesEnabled = true;\n    toggleGestures('on');\n  }\n\n  function disableGestures() {\n    if (!gesturesEnabled) return;\n    gesturesEnabled = false;\n    toggleGestures('off');\n  } // Attach/Detach Events\n\n\n  function enable() {\n    const zoom = swiper.zoom;\n    if (zoom.enabled) return;\n    zoom.enabled = true;\n    const support = swiper.support;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector(); // Scale image\n\n    if (support.gestures) {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    } // Move image\n\n\n    swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n  }\n\n  function disable() {\n    const zoom = swiper.zoom;\n    if (!zoom.enabled) return;\n    const support = swiper.support;\n    zoom.enabled = false;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector(); // Scale image\n\n    if (support.gestures) {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    } // Move image\n\n\n    swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n  }\n\n  on('init', () => {\n    if (swiper.params.zoom.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    disable();\n  });\n  on('touchStart', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchStart(e);\n  });\n  on('touchEnd', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchEnd(e);\n  });\n  on('doubleTap', (_s, e) => {\n    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n      zoomToggle(e);\n    }\n  });\n  on('transitionEnd', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n      onTransitionEnd();\n    }\n  });\n  on('slideChange', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n      onTransitionEnd();\n    }\n  });\n  Object.assign(swiper.zoom, {\n    enable,\n    disable,\n    in: zoomIn,\n    out: zoomOut,\n    toggle: zoomToggle\n  });\n}","import { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nexport default function Lazy(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  extendParams({\n    lazy: {\n      checkInView: false,\n      enabled: false,\n      loadPrevNext: false,\n      loadPrevNextAmount: 1,\n      loadOnTransitionStart: false,\n      scrollingElement: '',\n      elementClass: 'swiper-lazy',\n      loadingClass: 'swiper-lazy-loading',\n      loadedClass: 'swiper-lazy-loaded',\n      preloaderClass: 'swiper-lazy-preloader'\n    }\n  });\n  swiper.lazy = {};\n  let scrollHandlerAttached = false;\n  let initialImageLoaded = false;\n\n  function loadInSlide(index, loadInDuplicate) {\n    if (loadInDuplicate === void 0) {\n      loadInDuplicate = true;\n    }\n\n    const params = swiper.params.lazy;\n    if (typeof index === 'undefined') return;\n    if (swiper.slides.length === 0) return;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    const $slideEl = isVirtual ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${index}\"]`) : swiper.slides.eq(index);\n    const $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);\n\n    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {\n      $images.push($slideEl[0]);\n    }\n\n    if ($images.length === 0) return;\n    $images.each(imageEl => {\n      const $imageEl = $(imageEl);\n      $imageEl.addClass(params.loadingClass);\n      const background = $imageEl.attr('data-background');\n      const src = $imageEl.attr('data-src');\n      const srcset = $imageEl.attr('data-srcset');\n      const sizes = $imageEl.attr('data-sizes');\n      const $pictureEl = $imageEl.parent('picture');\n      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, () => {\n        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;\n\n        if (background) {\n          $imageEl.css('background-image', `url(\"${background}\")`);\n          $imageEl.removeAttr('data-background');\n        } else {\n          if (srcset) {\n            $imageEl.attr('srcset', srcset);\n            $imageEl.removeAttr('data-srcset');\n          }\n\n          if (sizes) {\n            $imageEl.attr('sizes', sizes);\n            $imageEl.removeAttr('data-sizes');\n          }\n\n          if ($pictureEl.length) {\n            $pictureEl.children('source').each(sourceEl => {\n              const $source = $(sourceEl);\n\n              if ($source.attr('data-srcset')) {\n                $source.attr('srcset', $source.attr('data-srcset'));\n                $source.removeAttr('data-srcset');\n              }\n            });\n          }\n\n          if (src) {\n            $imageEl.attr('src', src);\n            $imageEl.removeAttr('data-src');\n          }\n        }\n\n        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);\n        $slideEl.find(`.${params.preloaderClass}`).remove();\n\n        if (swiper.params.loop && loadInDuplicate) {\n          const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');\n\n          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {\n            const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index=\"${slideOriginalIndex}\"]:not(.${swiper.params.slideDuplicateClass})`);\n            loadInSlide(originalSlide.index(), false);\n          } else {\n            const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index=\"${slideOriginalIndex}\"]`);\n            loadInSlide(duplicatedSlide.index(), false);\n          }\n        }\n\n        emit('lazyImageReady', $slideEl[0], $imageEl[0]);\n\n        if (swiper.params.autoHeight) {\n          swiper.updateAutoHeight();\n        }\n      });\n      emit('lazyImageLoad', $slideEl[0], $imageEl[0]);\n    });\n  }\n\n  function load() {\n    const {\n      $wrapperEl,\n      params: swiperParams,\n      slides,\n      activeIndex\n    } = swiper;\n    const isVirtual = swiper.virtual && swiperParams.virtual.enabled;\n    const params = swiperParams.lazy;\n    let slidesPerView = swiperParams.slidesPerView;\n\n    if (slidesPerView === 'auto') {\n      slidesPerView = 0;\n    }\n\n    function slideExist(index) {\n      if (isVirtual) {\n        if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index=\"${index}\"]`).length) {\n          return true;\n        }\n      } else if (slides[index]) return true;\n\n      return false;\n    }\n\n    function slideIndex(slideEl) {\n      if (isVirtual) {\n        return $(slideEl).attr('data-swiper-slide-index');\n      }\n\n      return $(slideEl).index();\n    }\n\n    if (!initialImageLoaded) initialImageLoaded = true;\n\n    if (swiper.params.watchSlidesProgress) {\n      $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each(slideEl => {\n        const index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();\n        loadInSlide(index);\n      });\n    } else if (slidesPerView > 1) {\n      for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {\n        if (slideExist(i)) loadInSlide(i);\n      }\n    } else {\n      loadInSlide(activeIndex);\n    }\n\n    if (params.loadPrevNext) {\n      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {\n        const amount = params.loadPrevNextAmount;\n        const spv = Math.ceil(slidesPerView);\n        const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);\n        const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides\n\n        for (let i = activeIndex + spv; i < maxIndex; i += 1) {\n          if (slideExist(i)) loadInSlide(i);\n        } // Prev Slides\n\n\n        for (let i = minIndex; i < activeIndex; i += 1) {\n          if (slideExist(i)) loadInSlide(i);\n        }\n      } else {\n        const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);\n        if (nextSlide.length > 0) loadInSlide(slideIndex(nextSlide));\n        const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);\n        if (prevSlide.length > 0) loadInSlide(slideIndex(prevSlide));\n      }\n    }\n  }\n\n  function checkInViewOnLoad() {\n    const window = getWindow();\n    if (!swiper || swiper.destroyed) return;\n    const $scrollElement = swiper.params.lazy.scrollingElement ? $(swiper.params.lazy.scrollingElement) : $(window);\n    const isWindow = $scrollElement[0] === window;\n    const scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;\n    const scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;\n    const swiperOffset = swiper.$el.offset();\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let inView = false;\n    if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n    const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];\n\n    for (let i = 0; i < swiperCoord.length; i += 1) {\n      const point = swiperCoord[i];\n\n      if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {\n        if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n        inView = true;\n      }\n    }\n\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n\n    if (inView) {\n      load();\n      $scrollElement.off('scroll', checkInViewOnLoad, passiveListener);\n    } else if (!scrollHandlerAttached) {\n      scrollHandlerAttached = true;\n      $scrollElement.on('scroll', checkInViewOnLoad, passiveListener);\n    }\n  }\n\n  on('beforeInit', () => {\n    if (swiper.params.lazy.enabled && swiper.params.preloadImages) {\n      swiper.params.preloadImages = false;\n    }\n  });\n  on('init', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('scroll', () => {\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.freeMode.sticky) {\n      load();\n    }\n  });\n  on('scrollbarDragMove resize _freeModeNoMomentumRelease', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('transitionStart', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !initialImageLoaded) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    }\n  });\n  on('transitionEnd', () => {\n    if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('slideChange', () => {\n    const {\n      lazy,\n      cssMode,\n      watchSlidesProgress,\n      touchReleaseOnEdges,\n      resistanceRatio\n    } = swiper.params;\n\n    if (lazy.enabled && (cssMode || watchSlidesProgress && (touchReleaseOnEdges || resistanceRatio === 0))) {\n      load();\n    }\n  });\n  on('destroy', () => {\n    if (!swiper.$el) return;\n    swiper.$el.find(`.${swiper.params.lazy.loadingClass}`).removeClass(swiper.params.lazy.loadingClass);\n  });\n  Object.assign(swiper.lazy, {\n    load,\n    loadInSlide\n  });\n}","/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\nimport { nextTick } from '../../shared/utils.js';\nexport default function Controller(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    controller: {\n      control: undefined,\n      inverse: false,\n      by: 'slide' // or 'container'\n\n    }\n  });\n  swiper.controller = {\n    control: undefined\n  };\n\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n\n        return maxIndex;\n      };\n    }();\n\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:\n    // (x1,y1) is the known point before given value,\n    // (x3,y3) is the known point after given value.\n\n    let i1;\n    let i3;\n\n    this.interpolate = function interpolate(x2) {\n      if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n\n    return this;\n  } // xxx: for now i will just save one spline function to to\n\n\n  function getInterpolateFunction(c) {\n    if (!swiper.controller.spline) {\n      swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n  }\n\n  function setTranslate(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper = swiper.constructor;\n\n    function setControlledTranslate(c) {\n      // this will create an Interpolate function based on the snapGrids\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\n      // it makes sense to create this only once and recall it for the interpolation\n      // the function does a lot of value caching for performance\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n\n      if (swiper.params.controller.by === 'slide') {\n        getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n        // but it did not work out\n\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n\n  function setTransition(duration, byController) {\n    const Swiper = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n\n    function setControlledTransition(c) {\n      c.setTransition(duration, swiper);\n\n      if (duration !== 0) {\n        c.transitionStart();\n\n        if (c.params.autoHeight) {\n          nextTick(() => {\n            c.updateAutoHeight();\n          });\n        }\n\n        c.$wrapperEl.transitionEnd(() => {\n          if (!controlled) return;\n\n          if (c.params.loop && swiper.params.controller.by === 'slide') {\n            c.loopFix();\n          }\n\n          c.transitionEnd();\n        });\n      }\n    }\n\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n\n  function removeSpline() {\n    if (!swiper.controller.control) return;\n\n    if (swiper.controller.spline) {\n      swiper.controller.spline = undefined;\n      delete swiper.controller.spline;\n    }\n  }\n\n  on('beforeInit', () => {\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on('update', () => {\n    removeSpline();\n  });\n  on('resize', () => {\n    removeSpline();\n  });\n  on('observerUpdate', () => {\n    removeSpline();\n  });\n  on('setTranslate', (_s, translate, byController) => {\n    if (!swiper.controller.control) return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on('setTransition', (_s, duration, byController) => {\n    if (!swiper.controller.control) return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate,\n    setTransition\n  });\n}","import classesToSelector from '../../shared/classes-to-selector.js';\nimport $ from '../../shared/dom.js';\nexport default function A11y(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    a11y: {\n      enabled: true,\n      notificationClass: 'swiper-notification',\n      prevSlideMessage: 'Previous slide',\n      nextSlideMessage: 'Next slide',\n      firstSlideMessage: 'This is the first slide',\n      lastSlideMessage: 'This is the last slide',\n      paginationBulletMessage: 'Go to slide {{index}}',\n      slideLabelMessage: '{{index}} / {{slidesLength}}',\n      containerMessage: null,\n      containerRoleDescriptionMessage: null,\n      itemRoleDescriptionMessage: null,\n      slideRole: 'group',\n      id: null\n    }\n  });\n  let liveRegion = null;\n\n  function notify(message) {\n    const notification = liveRegion;\n    if (notification.length === 0) return;\n    notification.html('');\n    notification.html(message);\n  }\n\n  function getRandomNumber(size) {\n    if (size === void 0) {\n      size = 16;\n    }\n\n    const randomChar = () => Math.round(16 * Math.random()).toString(16);\n\n    return 'x'.repeat(size).replace(/x/g, randomChar);\n  }\n\n  function makeElFocusable($el) {\n    $el.attr('tabIndex', '0');\n  }\n\n  function makeElNotFocusable($el) {\n    $el.attr('tabIndex', '-1');\n  }\n\n  function addElRole($el, role) {\n    $el.attr('role', role);\n  }\n\n  function addElRoleDescription($el, description) {\n    $el.attr('aria-roledescription', description);\n  }\n\n  function addElControls($el, controls) {\n    $el.attr('aria-controls', controls);\n  }\n\n  function addElLabel($el, label) {\n    $el.attr('aria-label', label);\n  }\n\n  function addElId($el, id) {\n    $el.attr('id', id);\n  }\n\n  function addElLive($el, live) {\n    $el.attr('aria-live', live);\n  }\n\n  function disableEl($el) {\n    $el.attr('aria-disabled', true);\n  }\n\n  function enableEl($el) {\n    $el.attr('aria-disabled', false);\n  }\n\n  function onEnterOrSpaceKey(e) {\n    if (e.keyCode !== 13 && e.keyCode !== 32) return;\n    const params = swiper.params.a11y;\n    const $targetEl = $(e.target);\n\n    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {\n      if (!(swiper.isEnd && !swiper.params.loop)) {\n        swiper.slideNext();\n      }\n\n      if (swiper.isEnd) {\n        notify(params.lastSlideMessage);\n      } else {\n        notify(params.nextSlideMessage);\n      }\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {\n      if (!(swiper.isBeginning && !swiper.params.loop)) {\n        swiper.slidePrev();\n      }\n\n      if (swiper.isBeginning) {\n        notify(params.firstSlideMessage);\n      } else {\n        notify(params.prevSlideMessage);\n      }\n    }\n\n    if (swiper.pagination && $targetEl.is(classesToSelector(swiper.params.pagination.bulletClass))) {\n      $targetEl[0].click();\n    }\n  }\n\n  function updateNavigation() {\n    if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($prevEl && $prevEl.length > 0) {\n      if (swiper.isBeginning) {\n        disableEl($prevEl);\n        makeElNotFocusable($prevEl);\n      } else {\n        enableEl($prevEl);\n        makeElFocusable($prevEl);\n      }\n    }\n\n    if ($nextEl && $nextEl.length > 0) {\n      if (swiper.isEnd) {\n        disableEl($nextEl);\n        makeElNotFocusable($nextEl);\n      } else {\n        enableEl($nextEl);\n        makeElFocusable($nextEl);\n      }\n    }\n  }\n\n  function hasPagination() {\n    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n  }\n\n  function hasClickablePagination() {\n    return hasPagination() && swiper.params.pagination.clickable;\n  }\n\n  function updatePagination() {\n    const params = swiper.params.a11y;\n    if (!hasPagination()) return;\n    swiper.pagination.bullets.each(bulletEl => {\n      const $bulletEl = $(bulletEl);\n\n      if (swiper.params.pagination.clickable) {\n        makeElFocusable($bulletEl);\n\n        if (!swiper.params.pagination.renderBullet) {\n          addElRole($bulletEl, 'button');\n          addElLabel($bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, $bulletEl.index() + 1));\n        }\n      }\n\n      if ($bulletEl.is(`.${swiper.params.pagination.bulletActiveClass}`)) {\n        $bulletEl.attr('aria-current', 'true');\n      } else {\n        $bulletEl.removeAttr('aria-current');\n      }\n    });\n  }\n\n  const initNavEl = ($el, wrapperId, message) => {\n    makeElFocusable($el);\n\n    if ($el[0].tagName !== 'BUTTON') {\n      addElRole($el, 'button');\n      $el.on('keydown', onEnterOrSpaceKey);\n    }\n\n    addElLabel($el, message);\n    addElControls($el, wrapperId);\n  };\n\n  const handleFocus = e => {\n    const slideEl = e.target.closest(`.${swiper.params.slideClass}`);\n    if (!slideEl || !swiper.slides.includes(slideEl)) return;\n    const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n    const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n    if (isActive || isVisible) return;\n    swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n  };\n\n  const initSlides = () => {\n    const params = swiper.params.a11y;\n\n    if (params.itemRoleDescriptionMessage) {\n      addElRoleDescription($(swiper.slides), params.itemRoleDescriptionMessage);\n    }\n\n    if (params.slideRole) {\n      addElRole($(swiper.slides), params.slideRole);\n    }\n\n    const slidesLength = swiper.params.loop ? swiper.slides.filter(el => !el.classList.contains(swiper.params.slideDuplicateClass)).length : swiper.slides.length;\n\n    if (params.slideLabelMessage) {\n      swiper.slides.each((slideEl, index) => {\n        const $slideEl = $(slideEl);\n        const slideIndex = swiper.params.loop ? parseInt($slideEl.attr('data-swiper-slide-index'), 10) : index;\n        const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n        addElLabel($slideEl, ariaLabelMessage);\n      });\n    }\n  };\n\n  const init = () => {\n    const params = swiper.params.a11y;\n    swiper.$el.append(liveRegion); // Container\n\n    const $containerEl = swiper.$el;\n\n    if (params.containerRoleDescriptionMessage) {\n      addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);\n    }\n\n    if (params.containerMessage) {\n      addElLabel($containerEl, params.containerMessage);\n    } // Wrapper\n\n\n    const $wrapperEl = swiper.$wrapperEl;\n    const wrapperId = params.id || $wrapperEl.attr('id') || `swiper-wrapper-${getRandomNumber(16)}`;\n    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';\n    addElId($wrapperEl, wrapperId);\n    addElLive($wrapperEl, live); // Slide\n\n    initSlides(); // Navigation\n\n    let $nextEl;\n    let $prevEl;\n\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n\n    if ($nextEl && $nextEl.length) {\n      initNavEl($nextEl, wrapperId, params.nextSlideMessage);\n    }\n\n    if ($prevEl && $prevEl.length) {\n      initNavEl($prevEl, wrapperId, params.prevSlideMessage);\n    } // Pagination\n\n\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.on('keydown', classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    } // Tab focus\n\n\n    swiper.$el.on('focus', handleFocus, true);\n  };\n\n  function destroy() {\n    if (liveRegion && liveRegion.length > 0) liveRegion.remove();\n    let $nextEl;\n    let $prevEl;\n\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n\n    if ($nextEl) {\n      $nextEl.off('keydown', onEnterOrSpaceKey);\n    }\n\n    if ($prevEl) {\n      $prevEl.off('keydown', onEnterOrSpaceKey);\n    } // Pagination\n\n\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.off('keydown', classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    } // Tab focus\n\n\n    swiper.$el.off('focus', handleFocus, true);\n  }\n\n  on('beforeInit', () => {\n    liveRegion = $(`<span class=\"${swiper.params.a11y.notificationClass}\" aria-live=\"assertive\" aria-atomic=\"true\"></span>`);\n  });\n  on('afterInit', () => {\n    if (!swiper.params.a11y.enabled) return;\n    init();\n  });\n  on('slidesLengthChange snapGridLengthChange slidesGridLengthChange', () => {\n    if (!swiper.params.a11y.enabled) return;\n    initSlides();\n  });\n  on('fromEdge toEdge afterInit lock unlock', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updateNavigation();\n  });\n  on('paginationUpdate', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updatePagination();\n  });\n  on('destroy', () => {\n    if (!swiper.params.a11y.enabled) return;\n    destroy();\n  });\n}","import { getWindow } from 'ssr-window';\nexport default function History(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    history: {\n      enabled: false,\n      root: '',\n      replaceState: false,\n      key: 'slides',\n      keepQuery: false\n    }\n  });\n  let initialized = false;\n  let paths = {};\n\n  const slugify = text => {\n    return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n  };\n\n  const getPathValues = urlOverride => {\n    const window = getWindow();\n    let location;\n\n    if (urlOverride) {\n      location = new URL(urlOverride);\n    } else {\n      location = window.location;\n    }\n\n    const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\n    const total = pathArray.length;\n    const key = pathArray[total - 2];\n    const value = pathArray[total - 1];\n    return {\n      key,\n      value\n    };\n  };\n\n  const setHistory = (key, index) => {\n    const window = getWindow();\n    if (!initialized || !swiper.params.history.enabled) return;\n    let location;\n\n    if (swiper.params.url) {\n      location = new URL(swiper.params.url);\n    } else {\n      location = window.location;\n    }\n\n    const slide = swiper.slides.eq(index);\n    let value = slugify(slide.attr('data-history'));\n\n    if (swiper.params.history.root.length > 0) {\n      let root = swiper.params.history.root;\n      if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\n      value = `${root}/${key}/${value}`;\n    } else if (!location.pathname.includes(key)) {\n      value = `${key}/${value}`;\n    }\n\n    if (swiper.params.history.keepQuery) {\n      value += location.search;\n    }\n\n    const currentState = window.history.state;\n\n    if (currentState && currentState.value === value) {\n      return;\n    }\n\n    if (swiper.params.history.replaceState) {\n      window.history.replaceState({\n        value\n      }, null, value);\n    } else {\n      window.history.pushState({\n        value\n      }, null, value);\n    }\n  };\n\n  const scrollToSlide = (speed, value, runCallbacks) => {\n    if (value) {\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHistory = slugify(slide.attr('data-history'));\n\n        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index = slide.index();\n          swiper.slideTo(index, speed, runCallbacks);\n        }\n      }\n    } else {\n      swiper.slideTo(0, speed, runCallbacks);\n    }\n  };\n\n  const setHistoryPopState = () => {\n    paths = getPathValues(swiper.params.url);\n    scrollToSlide(swiper.params.speed, paths.value, false);\n  };\n\n  const init = () => {\n    const window = getWindow();\n    if (!swiper.params.history) return;\n\n    if (!window.history || !window.history.pushState) {\n      swiper.params.history.enabled = false;\n      swiper.params.hashNavigation.enabled = true;\n      return;\n    }\n\n    initialized = true;\n    paths = getPathValues(swiper.params.url);\n    if (!paths.key && !paths.value) return;\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n\n    if (!swiper.params.history.replaceState) {\n      window.addEventListener('popstate', setHistoryPopState);\n    }\n  };\n\n  const destroy = () => {\n    const window = getWindow();\n\n    if (!swiper.params.history.replaceState) {\n      window.removeEventListener('popstate', setHistoryPopState);\n    }\n  };\n\n  on('init', () => {\n    if (swiper.params.history.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.history.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n}","import { getWindow, getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nexport default function HashNavigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    on\n  } = _ref;\n  let initialized = false;\n  const document = getDocument();\n  const window = getWindow();\n  extendParams({\n    hashNavigation: {\n      enabled: false,\n      replaceState: false,\n      watchState: false\n    }\n  });\n\n  const onHashChange = () => {\n    emit('hashChange');\n    const newHash = document.location.hash.replace('#', '');\n    const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');\n\n    if (newHash !== activeSlideHash) {\n      const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash=\"${newHash}\"]`).index();\n      if (typeof newIndex === 'undefined') return;\n      swiper.slideTo(newIndex);\n    }\n  };\n\n  const setHash = () => {\n    if (!initialized || !swiper.params.hashNavigation.enabled) return;\n\n    if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n      window.history.replaceState(null, null, `#${swiper.slides.eq(swiper.activeIndex).attr('data-hash')}` || '');\n      emit('hashSet');\n    } else {\n      const slide = swiper.slides.eq(swiper.activeIndex);\n      const hash = slide.attr('data-hash') || slide.attr('data-history');\n      document.location.hash = hash || '';\n      emit('hashSet');\n    }\n  };\n\n  const init = () => {\n    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n    initialized = true;\n    const hash = document.location.hash.replace('#', '');\n\n    if (hash) {\n      const speed = 0;\n\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHash = slide.attr('data-hash') || slide.attr('data-history');\n\n        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index = slide.index();\n          swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);\n        }\n      }\n    }\n\n    if (swiper.params.hashNavigation.watchState) {\n      $(window).on('hashchange', onHashChange);\n    }\n  };\n\n  const destroy = () => {\n    if (swiper.params.hashNavigation.watchState) {\n      $(window).off('hashchange', onHashChange);\n    }\n  };\n\n  on('init', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHash();\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHash();\n    }\n  });\n}","/* eslint no-underscore-dangle: \"off\" */\n\n/* eslint no-use-before-define: \"off\" */\nimport { getDocument } from 'ssr-window';\nimport { nextTick } from '../../shared/utils.js';\nexport default function Autoplay(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  let timeout;\n  swiper.autoplay = {\n    running: false,\n    paused: false\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3000,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n\n  function run() {\n    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n    let delay = swiper.params.autoplay.delay;\n\n    if ($activeSlideEl.attr('data-swiper-autoplay')) {\n      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;\n    }\n\n    clearTimeout(timeout);\n    timeout = nextTick(() => {\n      let autoplayResult;\n\n      if (swiper.params.autoplay.reverseDirection) {\n        if (swiper.params.loop) {\n          swiper.loopFix();\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.isBeginning) {\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n          emit('autoplay');\n        } else {\n          stop();\n        }\n      } else if (swiper.params.loop) {\n        swiper.loopFix();\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit('autoplay');\n      } else if (!swiper.isEnd) {\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit('autoplay');\n      } else if (!swiper.params.autoplay.stopOnLastSlide) {\n        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);\n        emit('autoplay');\n      } else {\n        stop();\n      }\n\n      if (swiper.params.cssMode && swiper.autoplay.running) run();else if (autoplayResult === false) {\n        run();\n      }\n    }, delay);\n  }\n\n  function start() {\n    if (typeof timeout !== 'undefined') return false;\n    if (swiper.autoplay.running) return false;\n    swiper.autoplay.running = true;\n    emit('autoplayStart');\n    run();\n    return true;\n  }\n\n  function stop() {\n    if (!swiper.autoplay.running) return false;\n    if (typeof timeout === 'undefined') return false;\n\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = undefined;\n    }\n\n    swiper.autoplay.running = false;\n    emit('autoplayStop');\n    return true;\n  }\n\n  function pause(speed) {\n    if (!swiper.autoplay.running) return;\n    if (swiper.autoplay.paused) return;\n    if (timeout) clearTimeout(timeout);\n    swiper.autoplay.paused = true;\n\n    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n      swiper.autoplay.paused = false;\n      run();\n    } else {\n      ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n        swiper.$wrapperEl[0].addEventListener(event, onTransitionEnd);\n      });\n    }\n  }\n\n  function onVisibilityChange() {\n    const document = getDocument();\n\n    if (document.visibilityState === 'hidden' && swiper.autoplay.running) {\n      pause();\n    }\n\n    if (document.visibilityState === 'visible' && swiper.autoplay.paused) {\n      run();\n      swiper.autoplay.paused = false;\n    }\n  }\n\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;\n    if (e.target !== swiper.$wrapperEl[0]) return;\n    ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n    swiper.autoplay.paused = false;\n\n    if (!swiper.autoplay.running) {\n      stop();\n    } else {\n      run();\n    }\n  }\n\n  function onMouseEnter() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n    } else {\n      emit('autoplayPause');\n      pause();\n    }\n\n    ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n  }\n\n  function onMouseLeave() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      return;\n    }\n\n    swiper.autoplay.paused = false;\n    emit('autoplayResume');\n    run();\n  }\n\n  function attachMouseEvents() {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.$el.on('mouseenter', onMouseEnter);\n      swiper.$el.on('mouseleave', onMouseLeave);\n    }\n  }\n\n  function detachMouseEvents() {\n    swiper.$el.off('mouseenter', onMouseEnter);\n    swiper.$el.off('mouseleave', onMouseLeave);\n  }\n\n  on('init', () => {\n    if (swiper.params.autoplay.enabled) {\n      start();\n      const document = getDocument();\n      document.addEventListener('visibilitychange', onVisibilityChange);\n      attachMouseEvents();\n    }\n  });\n  on('beforeTransitionStart', (_s, speed, internal) => {\n    if (swiper.autoplay.running) {\n      if (internal || !swiper.params.autoplay.disableOnInteraction) {\n        swiper.autoplay.pause(speed);\n      } else {\n        stop();\n      }\n    }\n  });\n  on('sliderFirstMove', () => {\n    if (swiper.autoplay.running) {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        stop();\n      } else {\n        pause();\n      }\n    }\n  });\n  on('touchEnd', () => {\n    if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n      run();\n    }\n  });\n  on('destroy', () => {\n    detachMouseEvents();\n\n    if (swiper.autoplay.running) {\n      stop();\n    }\n\n    const document = getDocument();\n    document.removeEventListener('visibilitychange', onVisibilityChange);\n  });\n  Object.assign(swiper.autoplay, {\n    pause,\n    run,\n    start,\n    stop\n  });\n}","import { isObject } from '../../shared/utils.js';\nimport $ from '../../shared/dom.js';\nexport default function Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix(); // eslint-disable-next-line\n\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n    }\n\n    swiper.slideTo(slideToIndex);\n  }\n\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView; // Activate thumbs\n\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        } // Find actual thumbs index to slide to\n\n\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n        if (typeof prevThumbsIndex === 'undefined') {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === 'undefined') {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    }\n  }\n\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    init();\n    update(true);\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}","import { now } from '../../shared/utils.js';\nexport default function freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchStart() {\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}","import $ from '../../shared/dom.js';\nimport effectInit from '../../shared/effect-init.js';\nexport default function EffectCube(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    cubeEffect: {\n      slideShadows: true,\n      shadow: true,\n      shadowOffset: 20,\n      shadowScale: 0.94\n    }\n  });\n\n  const createSlideShadows = ($slideEl, progress, isHorizontal) => {\n    let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n    let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n    if (shadowBefore.length === 0) {\n      shadowBefore = $(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}\"></div>`);\n      $slideEl.append(shadowBefore);\n    }\n\n    if (shadowAfter.length === 0) {\n      shadowAfter = $(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}\"></div>`);\n      $slideEl.append(shadowAfter);\n    }\n\n    if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n\n  const recreateShadows = () => {\n    // create new ones\n    const isHorizontal = swiper.isHorizontal();\n    swiper.slides.each(slideEl => {\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      createSlideShadows($(slideEl), progress, isHorizontal);\n    });\n  };\n\n  const setTranslate = () => {\n    const {\n      $el,\n      $wrapperEl,\n      slides,\n      width: swiperWidth,\n      height: swiperHeight,\n      rtlTranslate: rtl,\n      size: swiperSize,\n      browser\n    } = swiper;\n    const params = swiper.params.cubeEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let wrapperRotate = 0;\n    let $cubeShadowEl;\n\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');\n\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n          $wrapperEl.append($cubeShadowEl);\n        }\n\n        $cubeShadowEl.css({\n          height: `${swiperWidth}px`\n        });\n      } else {\n        $cubeShadowEl = $el.find('.swiper-cube-shadow');\n\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n          $el.append($cubeShadowEl);\n        }\n      }\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let slideIndex = i;\n\n      if (isVirtual) {\n        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);\n      }\n\n      let slideAngle = slideIndex * 90;\n      let round = Math.floor(slideAngle / 360);\n\n      if (rtl) {\n        slideAngle = -slideAngle;\n        round = Math.floor(-slideAngle / 360);\n      }\n\n      const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n\n      if (slideIndex % 4 === 0) {\n        tx = -round * 4 * swiperSize;\n        tz = 0;\n      } else if ((slideIndex - 1) % 4 === 0) {\n        tx = 0;\n        tz = -round * 4 * swiperSize;\n      } else if ((slideIndex - 2) % 4 === 0) {\n        tx = swiperSize + round * 4 * swiperSize;\n        tz = swiperSize;\n      } else if ((slideIndex - 3) % 4 === 0) {\n        tx = -swiperSize;\n        tz = 3 * swiperSize + swiperSize * 4 * round;\n      }\n\n      if (rtl) {\n        tx = -tx;\n      }\n\n      if (!isHorizontal) {\n        ty = tx;\n        tx = 0;\n      }\n\n      const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n\n      if (progress <= 1 && progress > -1) {\n        wrapperRotate = slideIndex * 90 + progress * 90;\n        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n      }\n\n      $slideEl.transform(transform);\n\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, isHorizontal);\n      }\n    }\n\n    $wrapperEl.css({\n      '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,\n      'transform-origin': `50% 50% -${swiperSize / 2}px`\n    });\n\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl.transform(`translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);\n      } else {\n        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n        const scale1 = params.shadowScale;\n        const scale2 = params.shadowScale / multiplier;\n        const offset = params.shadowOffset;\n        $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);\n      }\n    }\n\n    const zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;\n    $wrapperEl.transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);\n    $wrapperEl[0].style.setProperty('--swiper-cube-translate-z', `${zFactor}px`);\n  };\n\n  const setTransition = duration => {\n    const {\n      $el,\n      slides\n    } = swiper;\n    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n\n    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n      $el.find('.swiper-cube-shadow').transition(duration);\n    }\n  };\n\n  effectInit({\n    effect: 'cube',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.cubeEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      resistanceRatio: 0,\n      spaceBetween: 0,\n      centeredSlides: false,\n      virtualTranslate: true\n    })\n  });\n}","import $ from './dom.js';\nexport default function createShadow(params, $slideEl, side) {\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}`;\n  const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;\n  let $shadowEl = $shadowContainer.children(`.${shadowClass}`);\n\n  if (!$shadowEl.length) {\n    $shadowEl = $(`<div class=\"swiper-slide-shadow${side ? `-${side}` : ''}\"></div>`);\n    $shadowContainer.append($shadowEl);\n  }\n\n  return $shadowEl;\n}","import $ from '../../shared/dom.js';\nimport createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nexport default function EffectFlip(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true,\n      transformEl: null\n    }\n  });\n\n  const createSlideShadows = ($slideEl, progress, params) => {\n    let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n    let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n    if (shadowBefore.length === 0) {\n      shadowBefore = createShadow(params, $slideEl, swiper.isHorizontal() ? 'left' : 'top');\n    }\n\n    if (shadowAfter.length === 0) {\n      shadowAfter = createShadow(params, $slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n    }\n\n    if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n\n  const recreateShadows = () => {\n    // Set shadows\n    const params = swiper.params.flipEffect;\n    swiper.slides.each(slideEl => {\n      const $slideEl = $(slideEl);\n      let progress = $slideEl[0].progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n\n      createSlideShadows($slideEl, progress, params);\n    });\n  };\n\n  const setTranslate = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let progress = $slideEl[0].progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      }\n\n      const offset = $slideEl[0].swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let ty = 0;\n\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, params);\n      }\n\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.flipEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  effectInit({\n    effect: 'flip',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nexport default function EffectCoverflow(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true,\n      transformEl: null\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform = swiper.translate;\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth; // Each slide offset from center\n\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = $slideEl[0].swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders\n\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values\n\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(slideTransform);\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n        let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n        if ($shadowBeforeEl.length === 0) {\n          $shadowBeforeEl = createShadow(params, $slideEl, isHorizontal ? 'left' : 'top');\n        }\n\n        if ($shadowAfterEl.length === 0) {\n          $shadowAfterEl = createShadow(params, $slideEl, isHorizontal ? 'right' : 'bottom');\n        }\n\n        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.coverflowEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n  };\n\n  effectInit({\n    effect: 'coverflow',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}","import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nexport default function EffectCreative(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    creativeEffect: {\n      transformEl: null,\n      limitProgress: 1,\n      shadowPerProgress: false,\n      progressMultiplier: 1,\n      perspective: true,\n      prev: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      },\n      next: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      }\n    }\n  });\n\n  const getTranslateValue = value => {\n    if (typeof value === 'string') return value;\n    return `${value}px`;\n  };\n\n  const setTranslate = () => {\n    const {\n      slides,\n      $wrapperEl,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.creativeEffect;\n    const {\n      progressMultiplier: multiplier\n    } = params;\n    const isCenteredSlides = swiper.params.centeredSlides;\n\n    if (isCenteredSlides) {\n      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n      $wrapperEl.transform(`translateX(calc(50% - ${margin}px))`);\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max($slideEl[0].progress, -params.limitProgress), params.limitProgress);\n      let originalProgress = progress;\n\n      if (!isCenteredSlides) {\n        originalProgress = Math.min(Math.max($slideEl[0].originalProgress, -params.limitProgress), params.limitProgress);\n      }\n\n      const offset = $slideEl[0].swiperSlideOffset;\n      const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];\n      const r = [0, 0, 0];\n      let custom = false;\n\n      if (!swiper.isHorizontal()) {\n        t[1] = t[0];\n        t[0] = 0;\n      }\n\n      let data = {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        scale: 1,\n        opacity: 1\n      };\n\n      if (progress < 0) {\n        data = params.next;\n        custom = true;\n      } else if (progress > 0) {\n        data = params.prev;\n        custom = true;\n      } // set translate\n\n\n      t.forEach((value, index) => {\n        t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\n      }); // set rotates\n\n      r.forEach((value, index) => {\n        r[index] = data.rotate[index] * Math.abs(progress * multiplier);\n      });\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const translateString = t.join(', ');\n      const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n      const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`; // Set shadows\n\n      if (custom && data.shadow || !custom) {\n        let $shadowEl = $slideEl.children('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0 && data.shadow) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n\n        if ($shadowEl.length) {\n          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n          $shadowEl[0].style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n        }\n      }\n\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform).css({\n        opacity: opacityString\n      });\n\n      if (data.origin) {\n        $targetEl.css('transform-origin', data.origin);\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.creativeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n\n  effectInit({\n    effect: 'creative',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => swiper.params.creativeEffect.perspective,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nexport default function EffectCards(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null,\n      rotate: true\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset = $slideEl[0].swiperSlideOffset;\n\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n      }\n\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset -= slides[0].swiperSlideOffset;\n      }\n\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -2 * progress;\n      let tXAdd = 8 - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n\n      if (progress < 0) {\n        // next\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        // prev\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rotate : 0}deg)\n        scale(${scaleString})\n      `;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowEl = $slideEl.find('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n\n        if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  effectInit({\n    effect: 'cards',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","/**\n * Swiper 8.3.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2022 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: July 13, 2022\n */\n\nexport { default as Swiper, default } from './core/core.js';\nexport { default as Virtual } from './modules/virtual/virtual.js';\nexport { default as Keyboard } from './modules/keyboard/keyboard.js';\nexport { default as Mousewheel } from './modules/mousewheel/mousewheel.js';\nexport { default as Navigation } from './modules/navigation/navigation.js';\nexport { default as Pagination } from './modules/pagination/pagination.js';\nexport { default as Scrollbar } from './modules/scrollbar/scrollbar.js';\nexport { default as Parallax } from './modules/parallax/parallax.js';\nexport { default as Zoom } from './modules/zoom/zoom.js';\nexport { default as Lazy } from './modules/lazy/lazy.js';\nexport { default as Controller } from './modules/controller/controller.js';\nexport { default as A11y } from './modules/a11y/a11y.js';\nexport { default as History } from './modules/history/history.js';\nexport { default as HashNavigation } from './modules/hash-navigation/hash-navigation.js';\nexport { default as Autoplay } from './modules/autoplay/autoplay.js';\nexport { default as Thumbs } from './modules/thumbs/thumbs.js';\nexport { default as FreeMode } from './modules/free-mode/free-mode.js';\nexport { default as Grid } from './modules/grid/grid.js';\nexport { default as Manipulation } from './modules/manipulation/manipulation.js';\nexport { default as EffectFade } from './modules/effect-fade/effect-fade.js';\nexport { default as EffectCube } from './modules/effect-cube/effect-cube.js';\nexport { default as EffectFlip } from './modules/effect-flip/effect-flip.js';\nexport { default as EffectCoverflow } from './modules/effect-coverflow/effect-coverflow.js';\nexport { default as EffectCreative } from './modules/effect-creative/effect-creative.js';\nexport { default as EffectCards } from './modules/effect-cards/effect-cards.js';","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[4840],{\n\n/***/ 72821:\n/***/ (function() {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ 88494:\n/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"tq\": function() { return /* reexport */ Swiper; },\n  \"o5\": function() { return /* reexport */ SwiperSlide; }\n});\n\n// UNUSED EXPORTS: useSwiper, useSwiperSlide\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/swiper/swiper.esm.js + 89 modules\nvar swiper_esm = __webpack_require__(965);\n;// CONCATENATED MODULE: ./node_modules/swiper/components-shared/utils.js\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction extend(target, src) {\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n  Object.keys(src).filter(key => noExtend.indexOf(key) < 0).forEach(key => {\n    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      if (src[key].__swiper__) target[key] = src[key];else extend(target[key], src[key]);\n    } else {\n      target[key] = src[key];\n    }\n  });\n}\n\nfunction needsNavigation(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return params.navigation && typeof params.navigation.nextEl === 'undefined' && typeof params.navigation.prevEl === 'undefined';\n}\n\nfunction needsPagination(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return params.pagination && typeof params.pagination.el === 'undefined';\n}\n\nfunction needsScrollbar(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return params.scrollbar && typeof params.scrollbar.el === 'undefined';\n}\n\nfunction uniqueClasses(classNames) {\n  if (classNames === void 0) {\n    classNames = '';\n  }\n\n  const classes = classNames.split(' ').map(c => c.trim()).filter(c => !!c);\n  const unique = [];\n  classes.forEach(c => {\n    if (unique.indexOf(c) < 0) unique.push(c);\n  });\n  return unique.join(' ');\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/components-shared/params-list.js\n/* underscore in name -> watch for changes */\nconst paramsList = ['modules', 'init', '_direction', 'touchEventsTarget', 'initialSlide', '_speed', 'cssMode', 'updateOnWindowResize', 'resizeObserver', 'nested', 'focusableElements', '_enabled', '_width', '_height', 'preventInteractionOnTransition', 'userAgent', 'url', '_edgeSwipeDetection', '_edgeSwipeThreshold', '_freeMode', '_autoHeight', 'setWrapperSize', 'virtualTranslate', '_effect', 'breakpoints', '_spaceBetween', '_slidesPerView', 'maxBackfaceHiddenSlides', '_grid', '_slidesPerGroup', '_slidesPerGroupSkip', '_slidesPerGroupAuto', '_centeredSlides', '_centeredSlidesBounds', '_slidesOffsetBefore', '_slidesOffsetAfter', 'normalizeSlideIndex', '_centerInsufficientSlides', '_watchOverflow', 'roundLengths', 'touchRatio', 'touchAngle', 'simulateTouch', '_shortSwipes', '_longSwipes', 'longSwipesRatio', 'longSwipesMs', '_followFinger', 'allowTouchMove', '_threshold', 'touchMoveStopPropagation', 'touchStartPreventDefault', 'touchStartForcePreventDefault', 'touchReleaseOnEdges', 'uniqueNavElements', '_resistance', '_resistanceRatio', '_watchSlidesProgress', '_grabCursor', 'preventClicks', 'preventClicksPropagation', '_slideToClickedSlide', '_preloadImages', 'updateOnImagesReady', '_loop', '_loopAdditionalSlides', '_loopedSlides', '_loopFillGroupWithBlank', 'loopPreventsSlide', '_rewind', '_allowSlidePrev', '_allowSlideNext', '_swipeHandler', '_noSwiping', 'noSwipingClass', 'noSwipingSelector', 'passiveListeners', 'containerModifierClass', 'slideClass', 'slideBlankClass', 'slideActiveClass', 'slideDuplicateActiveClass', 'slideVisibleClass', 'slideDuplicateClass', 'slideNextClass', 'slideDuplicateNextClass', 'slidePrevClass', 'slideDuplicatePrevClass', 'wrapperClass', 'runCallbacksOnInit', 'observer', 'observeParents', 'observeSlideChildren', // modules\n'a11y', '_autoplay', '_controller', 'coverflowEffect', 'cubeEffect', 'fadeEffect', 'flipEffect', 'creativeEffect', 'cardsEffect', 'hashNavigation', 'history', 'keyboard', 'lazy', 'mousewheel', '_navigation', '_pagination', 'parallax', '_scrollbar', '_thumbs', 'virtual', 'zoom'];\n\n;// CONCATENATED MODULE: ./node_modules/swiper/components-shared/get-params.js\n\n\n\n\nfunction getParams(obj, splitEvents) {\n  if (obj === void 0) {\n    obj = {};\n  }\n\n  if (splitEvents === void 0) {\n    splitEvents = true;\n  }\n\n  const params = {\n    on: {}\n  };\n  const events = {};\n  const passedParams = {};\n  extend(params, swiper_esm/* default.defaults */.ZP.defaults);\n  extend(params, swiper_esm/* default.extendedDefaults */.ZP.extendedDefaults);\n  params._emitClasses = true;\n  params.init = false;\n  const rest = {};\n  const allowedParams = paramsList.map(key => key.replace(/_/, ''));\n  const plainObj = Object.assign({}, obj);\n  Object.keys(plainObj).forEach(key => {\n    if (typeof obj[key] === 'undefined') return;\n\n    if (allowedParams.indexOf(key) >= 0) {\n      if (isObject(obj[key])) {\n        params[key] = {};\n        passedParams[key] = {};\n        extend(params[key], obj[key]);\n        extend(passedParams[key], obj[key]);\n      } else {\n        params[key] = obj[key];\n        passedParams[key] = obj[key];\n      }\n    } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === 'function') {\n      if (splitEvents) {\n        events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      } else {\n        params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      }\n    } else {\n      rest[key] = obj[key];\n    }\n  });\n  ['navigation', 'pagination', 'scrollbar'].forEach(key => {\n    if (params[key] === true) params[key] = {};\n    if (params[key] === false) delete params[key];\n  });\n  return {\n    params,\n    passedParams,\n    rest,\n    events\n  };\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/components-shared/mount-swiper.js\n\n\nfunction mountSwiper(_ref, swiperParams) {\n  let {\n    el,\n    nextEl,\n    prevEl,\n    paginationEl,\n    scrollbarEl,\n    swiper\n  } = _ref;\n\n  if (needsNavigation(swiperParams) && nextEl && prevEl) {\n    swiper.params.navigation.nextEl = nextEl;\n    swiper.originalParams.navigation.nextEl = nextEl;\n    swiper.params.navigation.prevEl = prevEl;\n    swiper.originalParams.navigation.prevEl = prevEl;\n  }\n\n  if (needsPagination(swiperParams) && paginationEl) {\n    swiper.params.pagination.el = paginationEl;\n    swiper.originalParams.pagination.el = paginationEl;\n  }\n\n  if (needsScrollbar(swiperParams) && scrollbarEl) {\n    swiper.params.scrollbar.el = scrollbarEl;\n    swiper.originalParams.scrollbar.el = scrollbarEl;\n  }\n\n  swiper.init(el);\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/react/loop.js\n\n\n\nfunction calcLoopedSlides(slides, swiperParams) {\n  let slidesPerViewParams = swiperParams.slidesPerView;\n\n  if (swiperParams.breakpoints) {\n    const breakpoint = swiper_esm/* default.prototype.getBreakpoint */.ZP.prototype.getBreakpoint(swiperParams.breakpoints);\n    const breakpointOnlyParams = breakpoint in swiperParams.breakpoints ? swiperParams.breakpoints[breakpoint] : undefined;\n\n    if (breakpointOnlyParams && breakpointOnlyParams.slidesPerView) {\n      slidesPerViewParams = breakpointOnlyParams.slidesPerView;\n    }\n  }\n\n  let loopedSlides = Math.ceil(parseFloat(swiperParams.loopedSlides || slidesPerViewParams, 10));\n  loopedSlides += swiperParams.loopAdditionalSlides;\n\n  if (loopedSlides > slides.length) {\n    loopedSlides = slides.length;\n  }\n\n  return loopedSlides;\n}\n\nfunction renderLoop(swiper, slides, swiperParams) {\n  const modifiedSlides = slides.map((child, index) => {\n    return /*#__PURE__*/react.cloneElement(child, {\n      swiper,\n      'data-swiper-slide-index': index\n    });\n  });\n\n  function duplicateSlide(child, index, position) {\n    return /*#__PURE__*/react.cloneElement(child, {\n      key: `${child.key}-duplicate-${index}-${position}`,\n      className: `${child.props.className || ''} ${swiperParams.slideDuplicateClass}`\n    });\n  }\n\n  if (swiperParams.loopFillGroupWithBlank) {\n    const blankSlidesNum = swiperParams.slidesPerGroup - modifiedSlides.length % swiperParams.slidesPerGroup;\n\n    if (blankSlidesNum !== swiperParams.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankSlide = /*#__PURE__*/react.createElement(\"div\", {\n          className: `${swiperParams.slideClass} ${swiperParams.slideBlankClass}`\n        });\n        modifiedSlides.push(blankSlide);\n      }\n    }\n  }\n\n  if (swiperParams.slidesPerView === 'auto' && !swiperParams.loopedSlides) {\n    swiperParams.loopedSlides = modifiedSlides.length;\n  }\n\n  const loopedSlides = calcLoopedSlides(modifiedSlides, swiperParams);\n  const prependSlides = [];\n  const appendSlides = [];\n  modifiedSlides.forEach((child, index) => {\n    if (index < loopedSlides) {\n      appendSlides.push(duplicateSlide(child, index, 'prepend'));\n    }\n\n    if (index < modifiedSlides.length && index >= modifiedSlides.length - loopedSlides) {\n      prependSlides.push(duplicateSlide(child, index, 'append'));\n    }\n  });\n\n  if (swiper) {\n    swiper.loopedSlides = loopedSlides;\n  }\n\n  return [...prependSlides, ...modifiedSlides, ...appendSlides];\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/components-shared/get-changed-params.js\n\n\n\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\n  const keys = [];\n  if (!oldParams) return keys;\n\n  const addKey = key => {\n    if (keys.indexOf(key) < 0) keys.push(key);\n  };\n\n  if (children && oldChildren) {\n    const oldChildrenKeys = oldChildren.map(getKey);\n    const childrenKeys = children.map(getKey);\n    if (oldChildrenKeys.join('') !== childrenKeys.join('')) addKey('children');\n    if (oldChildren.length !== children.length) addKey('children');\n  }\n\n  const watchParams = paramsList.filter(key => key[0] === '_').map(key => key.replace(/_/, ''));\n  watchParams.forEach(key => {\n    if (key in swiperParams && key in oldParams) {\n      if (isObject(swiperParams[key]) && isObject(oldParams[key])) {\n        const newKeys = Object.keys(swiperParams[key]);\n        const oldKeys = Object.keys(oldParams[key]);\n\n        if (newKeys.length !== oldKeys.length) {\n          addKey(key);\n        } else {\n          newKeys.forEach(newKey => {\n            if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\n              addKey(key);\n            }\n          });\n          oldKeys.forEach(oldKey => {\n            if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);\n          });\n        }\n      } else if (swiperParams[key] !== oldParams[key]) {\n        addKey(key);\n      }\n    }\n  });\n  return keys;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/react/get-children.js\n\n\nfunction processChildren(c) {\n  const slides = [];\n  react.Children.toArray(c).forEach(child => {\n    if (child.type && child.type.displayName === 'SwiperSlide') {\n      slides.push(child);\n    } else if (child.props && child.props.children) {\n      processChildren(child.props.children).forEach(slide => slides.push(slide));\n    }\n  });\n  return slides;\n}\n\nfunction getChildren(c) {\n  const slides = [];\n  const slots = {\n    'container-start': [],\n    'container-end': [],\n    'wrapper-start': [],\n    'wrapper-end': []\n  };\n  react.Children.toArray(c).forEach(child => {\n    if (child.type && child.type.displayName === 'SwiperSlide') {\n      slides.push(child);\n    } else if (child.props && child.props.slot && slots[child.props.slot]) {\n      slots[child.props.slot].push(child);\n    } else if (child.props && child.props.children) {\n      const foundSlides = processChildren(child.props.children);\n\n      if (foundSlides.length > 0) {\n        foundSlides.forEach(slide => slides.push(slide));\n      } else {\n        slots['container-end'].push(child);\n      }\n    } else {\n      slots['container-end'].push(child);\n    }\n  });\n  return {\n    slides,\n    slots\n  };\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/components-shared/update-swiper.js\n\n\nfunction updateSwiper(_ref) {\n  let {\n    swiper,\n    slides,\n    passedParams,\n    changedParams,\n    nextEl,\n    prevEl,\n    scrollbarEl,\n    paginationEl\n  } = _ref;\n  const updateParams = changedParams.filter(key => key !== 'children' && key !== 'direction');\n  const {\n    params: currentParams,\n    pagination,\n    navigation,\n    scrollbar,\n    virtual,\n    thumbs\n  } = swiper;\n  let needThumbsInit;\n  let needControllerInit;\n  let needPaginationInit;\n  let needScrollbarInit;\n  let needNavigationInit;\n\n  if (changedParams.includes('thumbs') && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\n    needThumbsInit = true;\n  }\n\n  if (changedParams.includes('controller') && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n    needControllerInit = true;\n  }\n\n  if (changedParams.includes('pagination') && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n    needPaginationInit = true;\n  }\n\n  if (changedParams.includes('scrollbar') && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n    needScrollbarInit = true;\n  }\n\n  if (changedParams.includes('navigation') && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n    needNavigationInit = true;\n  }\n\n  const destroyModule = mod => {\n    if (!swiper[mod]) return;\n    swiper[mod].destroy();\n\n    if (mod === 'navigation') {\n      currentParams[mod].prevEl = undefined;\n      currentParams[mod].nextEl = undefined;\n      swiper[mod].prevEl = undefined;\n      swiper[mod].nextEl = undefined;\n    } else {\n      currentParams[mod].el = undefined;\n      swiper[mod].el = undefined;\n    }\n  };\n\n  updateParams.forEach(key => {\n    if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n      extend(currentParams[key], passedParams[key]);\n    } else {\n      const newValue = passedParams[key];\n\n      if ((newValue === true || newValue === false) && (key === 'navigation' || key === 'pagination' || key === 'scrollbar')) {\n        if (newValue === false) {\n          destroyModule(key);\n        }\n      } else {\n        currentParams[key] = passedParams[key];\n      }\n    }\n  });\n\n  if (updateParams.includes('controller') && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (changedParams.includes('children') && slides && virtual && currentParams.virtual.enabled) {\n    virtual.slides = slides;\n    virtual.update(true);\n  } else if (changedParams.includes('children') && swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n\n  if (needThumbsInit) {\n    const initialized = thumbs.init();\n    if (initialized) thumbs.update(true);\n  }\n\n  if (needControllerInit) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (needPaginationInit) {\n    if (paginationEl) currentParams.pagination.el = paginationEl;\n    pagination.init();\n    pagination.render();\n    pagination.update();\n  }\n\n  if (needScrollbarInit) {\n    if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\n    scrollbar.init();\n    scrollbar.updateSize();\n    scrollbar.setTranslate();\n  }\n\n  if (needNavigationInit) {\n    if (nextEl) currentParams.navigation.nextEl = nextEl;\n    if (prevEl) currentParams.navigation.prevEl = prevEl;\n    navigation.init();\n    navigation.update();\n  }\n\n  if (changedParams.includes('allowSlideNext')) {\n    swiper.allowSlideNext = passedParams.allowSlideNext;\n  }\n\n  if (changedParams.includes('allowSlidePrev')) {\n    swiper.allowSlidePrev = passedParams.allowSlidePrev;\n  }\n\n  if (changedParams.includes('direction')) {\n    swiper.changeDirection(passedParams.direction, false);\n  }\n\n  swiper.update();\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/react/virtual.js\n\n\nfunction renderVirtual(swiper, slides, virtualData) {\n  if (!virtualData) return null;\n  const style = swiper.isHorizontal() ? {\n    [swiper.rtlTranslate ? 'right' : 'left']: `${virtualData.offset}px`\n  } : {\n    top: `${virtualData.offset}px`\n  };\n  return slides.filter((child, index) => index >= virtualData.from && index <= virtualData.to).map(child => {\n    return /*#__PURE__*/react.cloneElement(child, {\n      swiper,\n      style\n    });\n  });\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/components-shared/update-on-virtual-data.js\nconst updateOnVirtualData = swiper => {\n  if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled) return;\n  swiper.updateSlides();\n  swiper.updateProgress();\n  swiper.updateSlidesClasses();\n\n  if (swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n\n  if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\n    swiper.parallax.setTranslate();\n  }\n};\n;// CONCATENATED MODULE: ./node_modules/swiper/react/use-isomorphic-layout-effect.js\n\n\nfunction useIsomorphicLayoutEffect(callback, deps) {\n  // eslint-disable-next-line\n  if (typeof window === 'undefined') return (0,react.useEffect)(callback, deps);\n  return (0,react.useLayoutEffect)(callback, deps);\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/react/context.js\n\nconst SwiperSlideContext = /*#__PURE__*/(0,react.createContext)(null);\nconst useSwiperSlide = () => {\n  return useContext(SwiperSlideContext);\n};\nconst SwiperContext = /*#__PURE__*/(0,react.createContext)(null);\nconst useSwiper = () => {\n  return useContext(SwiperContext);\n};\n;// CONCATENATED MODULE: ./node_modules/swiper/react/swiper.js\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Swiper = /*#__PURE__*/(0,react.forwardRef)(function (_temp, externalElRef) {\n  let {\n    className,\n    tag: Tag = 'div',\n    wrapperTag: WrapperTag = 'div',\n    children,\n    onSwiper,\n    ...rest\n  } = _temp === void 0 ? {} : _temp;\n  let eventsAssigned = false;\n  const [containerClasses, setContainerClasses] = (0,react.useState)('swiper');\n  const [virtualData, setVirtualData] = (0,react.useState)(null);\n  const [breakpointChanged, setBreakpointChanged] = (0,react.useState)(false);\n  const initializedRef = (0,react.useRef)(false);\n  const swiperElRef = (0,react.useRef)(null);\n  const swiperRef = (0,react.useRef)(null);\n  const oldPassedParamsRef = (0,react.useRef)(null);\n  const oldSlides = (0,react.useRef)(null);\n  const nextElRef = (0,react.useRef)(null);\n  const prevElRef = (0,react.useRef)(null);\n  const paginationElRef = (0,react.useRef)(null);\n  const scrollbarElRef = (0,react.useRef)(null);\n  const {\n    params: swiperParams,\n    passedParams,\n    rest: restProps,\n    events\n  } = getParams(rest);\n  const {\n    slides,\n    slots\n  } = getChildren(children);\n\n  const onBeforeBreakpoint = () => {\n    setBreakpointChanged(!breakpointChanged);\n  };\n\n  Object.assign(swiperParams.on, {\n    _containerClasses(swiper, classes) {\n      setContainerClasses(classes);\n    }\n\n  });\n\n  const initSwiper = () => {\n    // init swiper\n    Object.assign(swiperParams.on, events);\n    eventsAssigned = true;\n    swiperRef.current = new swiper_esm/* default */.ZP(swiperParams);\n\n    swiperRef.current.loopCreate = () => {};\n\n    swiperRef.current.loopDestroy = () => {};\n\n    if (swiperParams.loop) {\n      swiperRef.current.loopedSlides = calcLoopedSlides(slides, swiperParams);\n    }\n\n    if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {\n      swiperRef.current.virtual.slides = slides;\n      const extendWith = {\n        cache: false,\n        slides,\n        renderExternal: setVirtualData,\n        renderExternalUpdate: false\n      };\n      extend(swiperRef.current.params.virtual, extendWith);\n      extend(swiperRef.current.originalParams.virtual, extendWith);\n    }\n  };\n\n  if (!swiperElRef.current) {\n    initSwiper();\n  } // Listen for breakpoints change\n\n\n  if (swiperRef.current) {\n    swiperRef.current.on('_beforeBreakpoint', onBeforeBreakpoint);\n  }\n\n  const attachEvents = () => {\n    if (eventsAssigned || !events || !swiperRef.current) return;\n    Object.keys(events).forEach(eventName => {\n      swiperRef.current.on(eventName, events[eventName]);\n    });\n  };\n\n  const detachEvents = () => {\n    if (!events || !swiperRef.current) return;\n    Object.keys(events).forEach(eventName => {\n      swiperRef.current.off(eventName, events[eventName]);\n    });\n  };\n\n  (0,react.useEffect)(() => {\n    return () => {\n      if (swiperRef.current) swiperRef.current.off('_beforeBreakpoint', onBeforeBreakpoint);\n    };\n  }); // set initialized flag\n\n  (0,react.useEffect)(() => {\n    if (!initializedRef.current && swiperRef.current) {\n      swiperRef.current.emitSlidesClasses();\n      initializedRef.current = true;\n    }\n  }); // mount swiper\n\n  useIsomorphicLayoutEffect(() => {\n    if (externalElRef) {\n      externalElRef.current = swiperElRef.current;\n    }\n\n    if (!swiperElRef.current) return;\n\n    if (swiperRef.current.destroyed) {\n      initSwiper();\n    }\n\n    mountSwiper({\n      el: swiperElRef.current,\n      nextEl: nextElRef.current,\n      prevEl: prevElRef.current,\n      paginationEl: paginationElRef.current,\n      scrollbarEl: scrollbarElRef.current,\n      swiper: swiperRef.current\n    }, swiperParams);\n    if (onSwiper) onSwiper(swiperRef.current); // eslint-disable-next-line\n\n    return () => {\n      if (swiperRef.current && !swiperRef.current.destroyed) {\n        swiperRef.current.destroy(true, false);\n      }\n    };\n  }, []); // watch for params change\n\n  useIsomorphicLayoutEffect(() => {\n    attachEvents();\n    const changedParams = getChangedParams(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, c => c.key);\n    oldPassedParamsRef.current = passedParams;\n    oldSlides.current = slides;\n\n    if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {\n      updateSwiper({\n        swiper: swiperRef.current,\n        slides,\n        passedParams,\n        changedParams,\n        nextEl: nextElRef.current,\n        prevEl: prevElRef.current,\n        scrollbarEl: scrollbarElRef.current,\n        paginationEl: paginationElRef.current\n      });\n    }\n\n    return () => {\n      detachEvents();\n    };\n  }); // update on virtual update\n\n  useIsomorphicLayoutEffect(() => {\n    updateOnVirtualData(swiperRef.current);\n  }, [virtualData]); // bypass swiper instance to slides\n\n  function renderSlides() {\n    if (swiperParams.virtual) {\n      return renderVirtual(swiperRef.current, slides, virtualData);\n    }\n\n    if (!swiperParams.loop || swiperRef.current && swiperRef.current.destroyed) {\n      return slides.map(child => {\n        return /*#__PURE__*/react.cloneElement(child, {\n          swiper: swiperRef.current\n        });\n      });\n    }\n\n    return renderLoop(swiperRef.current, slides, swiperParams);\n  }\n\n  return /*#__PURE__*/react.createElement(Tag, _extends({\n    ref: swiperElRef,\n    className: uniqueClasses(`${containerClasses}${className ? ` ${className}` : ''}`)\n  }, restProps), /*#__PURE__*/react.createElement(SwiperContext.Provider, {\n    value: swiperRef.current\n  }, slots['container-start'], /*#__PURE__*/react.createElement(WrapperTag, {\n    className: \"swiper-wrapper\"\n  }, slots['wrapper-start'], renderSlides(), slots['wrapper-end']), needsNavigation(swiperParams) && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(\"div\", {\n    ref: prevElRef,\n    className: \"swiper-button-prev\"\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    ref: nextElRef,\n    className: \"swiper-button-next\"\n  })), needsScrollbar(swiperParams) && /*#__PURE__*/react.createElement(\"div\", {\n    ref: scrollbarElRef,\n    className: \"swiper-scrollbar\"\n  }), needsPagination(swiperParams) && /*#__PURE__*/react.createElement(\"div\", {\n    ref: paginationElRef,\n    className: \"swiper-pagination\"\n  }), slots['container-end']));\n});\nSwiper.displayName = 'Swiper';\n\n;// CONCATENATED MODULE: ./node_modules/swiper/react/swiper-slide.js\nfunction swiper_slide_extends() { swiper_slide_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return swiper_slide_extends.apply(this, arguments); }\n\n\n\n\n\nconst SwiperSlide = /*#__PURE__*/(0,react.forwardRef)(function (_temp, externalRef) {\n  let {\n    tag: Tag = 'div',\n    children,\n    className = '',\n    swiper,\n    zoom,\n    virtualIndex,\n    ...rest\n  } = _temp === void 0 ? {} : _temp;\n  const slideElRef = (0,react.useRef)(null);\n  const [slideClasses, setSlideClasses] = (0,react.useState)('swiper-slide');\n\n  function updateClasses(_s, el, classNames) {\n    if (el === slideElRef.current) {\n      setSlideClasses(classNames);\n    }\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (externalRef) {\n      externalRef.current = slideElRef.current;\n    }\n\n    if (!slideElRef.current || !swiper) {\n      return;\n    }\n\n    if (swiper.destroyed) {\n      if (slideClasses !== 'swiper-slide') {\n        setSlideClasses('swiper-slide');\n      }\n\n      return;\n    }\n\n    swiper.on('_slideClass', updateClasses); // eslint-disable-next-line\n\n    return () => {\n      if (!swiper) return;\n      swiper.off('_slideClass', updateClasses);\n    };\n  });\n  useIsomorphicLayoutEffect(() => {\n    if (swiper && slideElRef.current && !swiper.destroyed) {\n      setSlideClasses(swiper.getSlideClasses(slideElRef.current));\n    }\n  }, [swiper]);\n  const slideData = {\n    isActive: slideClasses.indexOf('swiper-slide-active') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-active') >= 0,\n    isVisible: slideClasses.indexOf('swiper-slide-visible') >= 0,\n    isDuplicate: slideClasses.indexOf('swiper-slide-duplicate') >= 0,\n    isPrev: slideClasses.indexOf('swiper-slide-prev') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-prev') >= 0,\n    isNext: slideClasses.indexOf('swiper-slide-next') >= 0 || slideClasses.indexOf('swiper-slide-duplicate-next') >= 0\n  };\n\n  const renderChildren = () => {\n    return typeof children === 'function' ? children(slideData) : children;\n  };\n\n  return /*#__PURE__*/react.createElement(Tag, swiper_slide_extends({\n    ref: slideElRef,\n    className: uniqueClasses(`${slideClasses}${className ? ` ${className}` : ''}`),\n    \"data-swiper-slide-index\": virtualIndex\n  }, rest), /*#__PURE__*/react.createElement(SwiperSlideContext.Provider, {\n    value: slideData\n  }, zoom ? /*#__PURE__*/react.createElement(\"div\", {\n    className: \"swiper-zoom-container\",\n    \"data-swiper-zoom\": typeof zoom === 'number' ? zoom : undefined\n  }, renderChildren()) : renderChildren()));\n});\nSwiperSlide.displayName = 'SwiperSlide';\n\n;// CONCATENATED MODULE: ./node_modules/swiper/react/swiper-react.js\n/**\n * Swiper React 8.3.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2022 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: July 13, 2022\n */\n\n\n\n\n\n\n/***/ }),\n\n/***/ 965:\n/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Rv\": function() { return /* reexport */ freeMode; },\n  \"N1\": function() { return /* reexport */ Keyboard; },\n  \"Gk\": function() { return /* reexport */ Mousewheel; },\n  \"ZP\": function() { return /* reexport */ core; }\n});\n\n// UNUSED EXPORTS: A11y, Autoplay, Controller, EffectCards, EffectCoverflow, EffectCreative, EffectCube, EffectFade, EffectFlip, Grid, HashNavigation, History, Lazy, Manipulation, Navigation, Pagination, Parallax, Scrollbar, Swiper, Thumbs, Virtual, Zoom\n\n;// CONCATENATED MODULE: ./node_modules/ssr-window/ssr-window.esm.js\n/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n/* eslint-disable no-param-reassign */\nfunction ssr_window_esm_isObject(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        'constructor' in obj &&\n        obj.constructor === Object);\n}\nfunction extend(target = {}, src = {}) {\n    Object.keys(src).forEach((key) => {\n        if (typeof target[key] === 'undefined')\n            target[key] = src[key];\n        else if (ssr_window_esm_isObject(src[key]) &&\n            ssr_window_esm_isObject(target[key]) &&\n            Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\n\nconst ssrDocument = {\n    body: {},\n    addEventListener() { },\n    removeEventListener() { },\n    activeElement: {\n        blur() { },\n        nodeName: '',\n    },\n    querySelector() {\n        return null;\n    },\n    querySelectorAll() {\n        return [];\n    },\n    getElementById() {\n        return null;\n    },\n    createEvent() {\n        return {\n            initEvent() { },\n        };\n    },\n    createElement() {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute() { },\n            getElementsByTagName() {\n                return [];\n            },\n        };\n    },\n    createElementNS() {\n        return {};\n    },\n    importNode() {\n        return null;\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n};\nfunction ssr_window_esm_getDocument() {\n    const doc = typeof document !== 'undefined' ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\n\nconst ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: '',\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n    history: {\n        replaceState() { },\n        pushState() { },\n        go() { },\n        back() { },\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener() { },\n    removeEventListener() { },\n    getComputedStyle() {\n        return {\n            getPropertyValue() {\n                return '';\n            },\n        };\n    },\n    Image() { },\n    Date() { },\n    screen: {},\n    setTimeout() { },\n    clearTimeout() { },\n    matchMedia() {\n        return {};\n    },\n    requestAnimationFrame(callback) {\n        if (typeof setTimeout === 'undefined') {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame(id) {\n        if (typeof setTimeout === 'undefined') {\n            return;\n        }\n        clearTimeout(id);\n    },\n};\nfunction ssr_window_esm_getWindow() {\n    const win = typeof window !== 'undefined' ? window : {};\n    extend(win, ssrWindow);\n    return win;\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/dom7/dom7.esm.js\n/**\n * Dom7 4.0.4\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * https://framework7.io/docs/dom7.html\n *\n * Copyright 2022, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: January 11, 2022\n */\n\n\n/* eslint-disable no-proto */\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, '__proto__', {\n    get() {\n      return proto;\n    },\n\n    set(value) {\n      proto.__proto__ = value;\n    }\n\n  });\n}\n\nclass Dom7 extends Array {\n  constructor(items) {\n    if (typeof items === 'number') {\n      super(items);\n    } else {\n      super(...(items || []));\n      makeReactive(this);\n    }\n  }\n\n}\n\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach(el => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n  }\n\n  return uniqueArray;\n}\nfunction toCamelCase(string) {\n  return string.toLowerCase().replace(/-(.)/g, (match, group) => group.toUpperCase());\n}\n\n// eslint-disable-next-line\n\nfunction qsa(selector, context) {\n  if (typeof selector !== 'string') {\n    return [selector];\n  }\n\n  const a = [];\n  const res = context.querySelectorAll(selector);\n\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n\n  return a;\n}\n\nfunction dom7_esm_$(selector, context) {\n  const window = ssr_window_esm_getWindow();\n  const document = ssr_window_esm_getDocument();\n  let arr = [];\n\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n\n  if (!selector) {\n    return new Dom7(arr);\n  }\n\n  if (typeof selector === 'string') {\n    const html = selector.trim();\n\n    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n      let toCreate = 'div';\n      if (html.indexOf('<li') === 0) toCreate = 'ul';\n      if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n      if (html.indexOf('<tbody') === 0) toCreate = 'table';\n      if (html.indexOf('<option') === 0) toCreate = 'select';\n      const tempParent = document.createElement(toCreate);\n      tempParent.innerHTML = html;\n\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document);\n    } // arr = qsa(selector, document);\n\n  } else if (selector.nodeType || selector === window || selector === document) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7) return selector;\n    arr = selector;\n  }\n\n  return new Dom7(arrayUnique(arr));\n}\n\ndom7_esm_$.fn = Dom7.prototype;\n\n// eslint-disable-next-line\n\nfunction addClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\n\nfunction removeClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\n\nfunction toggleClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    classNames.forEach(className => {\n      el.classList.toggle(className);\n    });\n  });\n}\n\nfunction hasClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  return arrayFilter(this, el => {\n    return classNames.filter(className => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\n\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === 'string') {\n    // Get attr\n    if (this[0]) return this[0].getAttribute(attrs);\n    return undefined;\n  } // Set attrs\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      // String\n      this[i].setAttribute(attrs, value);\n    } else {\n      // Object\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction removeAttr(attr) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr);\n  }\n\n  return this;\n}\n\nfunction prop(props, value) {\n  if (arguments.length === 1 && typeof props === 'string') {\n    // Get prop\n    if (this[0]) return this[0][props];\n  } else {\n    // Set props\n    for (let i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i][props] = value;\n      } else {\n        // Object\n        for (const propName in props) {\n          this[i][propName] = props[propName];\n        }\n      }\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction data(key, value) {\n  let el;\n\n  if (typeof value === 'undefined') {\n    el = this[0];\n    if (!el) return undefined; // Get value\n\n    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n      return el.dom7ElementDataStorage[key];\n    }\n\n    const dataKey = el.getAttribute(`data-${key}`);\n\n    if (dataKey) {\n      return dataKey;\n    }\n\n    return undefined;\n  } // Set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    el = this[i];\n    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n    el.dom7ElementDataStorage[key] = value;\n  }\n\n  return this;\n}\n\nfunction removeData(key) {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n      el.dom7ElementDataStorage[key] = null;\n      delete el.dom7ElementDataStorage[key];\n    }\n  }\n}\n\nfunction dataset() {\n  const el = this[0];\n  if (!el) return undefined;\n  const dataset = {}; // eslint-disable-line\n\n  if (el.dataset) {\n    for (const dataKey in el.dataset) {\n      dataset[dataKey] = el.dataset[dataKey];\n    }\n  } else {\n    for (let i = 0; i < el.attributes.length; i += 1) {\n      const attr = el.attributes[i];\n\n      if (attr.name.indexOf('data-') >= 0) {\n        dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;\n      }\n    }\n  }\n\n  for (const key in dataset) {\n    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n  }\n\n  return dataset;\n}\n\nfunction val(value) {\n  if (typeof value === 'undefined') {\n    // get value\n    const el = this[0];\n    if (!el) return undefined;\n\n    if (el.multiple && el.nodeName.toLowerCase() === 'select') {\n      const values = [];\n\n      for (let i = 0; i < el.selectedOptions.length; i += 1) {\n        values.push(el.selectedOptions[i].value);\n      }\n\n      return values;\n    }\n\n    return el.value;\n  } // set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {\n      for (let j = 0; j < el.options.length; j += 1) {\n        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;\n      }\n    } else {\n      el.value = value;\n    }\n  }\n\n  return this;\n}\n\nfunction value(value) {\n  return this.val(value);\n}\n\nfunction transform(transform) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform;\n  }\n\n  return this;\n}\n\nfunction transition(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== 'string' ? `${duration}ms` : duration;\n  }\n\n  return this;\n}\n\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target) return;\n    const eventData = e.target.dom7EventData || [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    if (dom7_esm_$(target).is(targetSelector)) listener.apply(target, eventData);else {\n      const parents = dom7_esm_$(target).parents(); // eslint-disable-line\n\n      for (let k = 0; k < parents.length; k += 1) {\n        if (dom7_esm_$(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);\n      }\n    }\n  }\n\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    listener.apply(this, eventData);\n  }\n\n  const events = eventType.split(' ');\n  let j;\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (!targetSelector) {\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7Listeners) el.dom7Listeners = {};\n        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      // Live events\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];\n        el.dom7LiveListeners[event].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event, handleLiveEvent, capture);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n  const events = eventType.split(' ');\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction once(...args) {\n  const dom = this;\n  let [eventName, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventName, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  function onceHandler(...eventArgs) {\n    listener.apply(this, eventArgs);\n    dom.off(eventName, targetSelector, onceHandler, capture);\n\n    if (onceHandler.dom7proxy) {\n      delete onceHandler.dom7proxy;\n    }\n  }\n\n  onceHandler.dom7proxy = listener;\n  return dom.on(eventName, targetSelector, onceHandler, capture);\n}\n\nfunction trigger(...args) {\n  const window = ssr_window_esm_getWindow();\n  const events = args[0].split(' ');\n  const eventData = args[1];\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n\n      if (window.CustomEvent) {\n        const evt = new window.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction transitionEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('transitionend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('transitionend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction animationEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('animationend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('animationend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction width() {\n  const window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerWidth;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('width'));\n  }\n\n  return null;\n}\n\nfunction dom7_esm_outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n    }\n\n    return this[0].offsetWidth;\n  }\n\n  return null;\n}\n\nfunction height() {\n  const window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerHeight;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('height'));\n  }\n\n  return null;\n}\n\nfunction dom7_esm_outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n    }\n\n    return this[0].offsetHeight;\n  }\n\n  return null;\n}\n\nfunction offset() {\n  if (this.length > 0) {\n    const window = ssr_window_esm_getWindow();\n    const document = ssr_window_esm_getDocument();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window ? window.scrollY : el.scrollTop;\n    const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n\n  return null;\n}\n\nfunction hide() {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.display = 'none';\n  }\n\n  return this;\n}\n\nfunction show() {\n  const window = getWindow();\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.style.display === 'none') {\n      el.style.display = '';\n    }\n\n    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {\n      // Still not visible\n      el.style.display = 'block';\n    }\n  }\n\n  return this;\n}\n\nfunction styles() {\n  const window = ssr_window_esm_getWindow();\n  if (this[0]) return window.getComputedStyle(this[0], null);\n  return {};\n}\n\nfunction css(props, value) {\n  const window = ssr_window_esm_getWindow();\n  let i;\n\n  if (arguments.length === 1) {\n    if (typeof props === 'string') {\n      // .css('width')\n      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      // .css({ width: '100px' })\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n\n      return this;\n    }\n  }\n\n  if (arguments.length === 2 && typeof props === 'string') {\n    // .css('width', '100px')\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction each(callback) {\n  if (!callback) return this;\n  this.forEach((el, index) => {\n    callback.apply(el, [el, index]);\n  });\n  return this;\n}\n\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return dom7_esm_$(result);\n}\n\nfunction html(html) {\n  if (typeof html === 'undefined') {\n    return this[0] ? this[0].innerHTML : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html;\n  }\n\n  return this;\n}\n\nfunction dom7_esm_text(text) {\n  if (typeof text === 'undefined') {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text;\n  }\n\n  return this;\n}\n\nfunction is(selector) {\n  const window = ssr_window_esm_getWindow();\n  const document = ssr_window_esm_getDocument();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === 'undefined') return false;\n\n  if (typeof selector === 'string') {\n    if (el.matches) return el.matches(selector);\n    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n    compareWith = dom7_esm_$(selector);\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  if (selector === document) {\n    return el === document;\n  }\n\n  if (selector === window) {\n    return el === window;\n  }\n\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nfunction index() {\n  let child = this[0];\n  let i;\n\n  if (child) {\n    i = 0; // eslint-disable-next-line\n\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n\n    return i;\n  }\n\n  return undefined;\n}\n\nfunction eq(index) {\n  if (typeof index === 'undefined') return this;\n  const length = this.length;\n\n  if (index > length - 1) {\n    return dom7_esm_$([]);\n  }\n\n  if (index < 0) {\n    const returnIndex = length + index;\n    if (returnIndex < 0) return dom7_esm_$([]);\n    return dom7_esm_$([this[returnIndex]]);\n  }\n\n  return dom7_esm_$([this[index]]);\n}\n\nfunction append(...els) {\n  let newChild;\n  const document = ssr_window_esm_getDocument();\n\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction appendTo(parent) {\n  dom7_esm_$(parent).append(this);\n  return this;\n}\n\nfunction prepend(newChild) {\n  const document = ssr_window_esm_getDocument();\n  let i;\n  let j;\n\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === 'string') {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newChild;\n\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n\n  return this;\n}\n\nfunction prependTo(parent) {\n  dom7_esm_$(parent).prepend(this);\n  return this;\n}\n\nfunction insertBefore(selector) {\n  const before = dom7_esm_$(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (before.length === 1) {\n      before[0].parentNode.insertBefore(this[i], before[0]);\n    } else if (before.length > 1) {\n      for (let j = 0; j < before.length; j += 1) {\n        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n      }\n    }\n  }\n}\n\nfunction insertAfter(selector) {\n  const after = dom7_esm_$(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (after.length === 1) {\n      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n    } else if (after.length > 1) {\n      for (let j = 0; j < after.length; j += 1) {\n        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n      }\n    }\n  }\n}\n\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && dom7_esm_$(this[0].nextElementSibling).is(selector)) {\n        return dom7_esm_$([this[0].nextElementSibling]);\n      }\n\n      return dom7_esm_$([]);\n    }\n\n    if (this[0].nextElementSibling) return dom7_esm_$([this[0].nextElementSibling]);\n    return dom7_esm_$([]);\n  }\n\n  return dom7_esm_$([]);\n}\n\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el) return dom7_esm_$([]);\n\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if (dom7_esm_$(next).is(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n\n    el = next;\n  }\n\n  return dom7_esm_$(nextEls);\n}\n\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n\n    if (selector) {\n      if (el.previousElementSibling && dom7_esm_$(el.previousElementSibling).is(selector)) {\n        return dom7_esm_$([el.previousElementSibling]);\n      }\n\n      return dom7_esm_$([]);\n    }\n\n    if (el.previousElementSibling) return dom7_esm_$([el.previousElementSibling]);\n    return dom7_esm_$([]);\n  }\n\n  return dom7_esm_$([]);\n}\n\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el) return dom7_esm_$([]);\n\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if (dom7_esm_$(prev).is(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n\n    el = prev;\n  }\n\n  return dom7_esm_$(prevEls);\n}\n\nfunction siblings(selector) {\n  return this.nextAll(selector).add(this.prevAll(selector));\n}\n\nfunction dom7_esm_parent(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if (dom7_esm_$(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n      } else {\n        parents.push(this[i].parentNode);\n      }\n    }\n  }\n\n  return dom7_esm_$(parents);\n}\n\nfunction parents(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    let parent = this[i].parentNode; // eslint-disable-line\n\n    while (parent) {\n      if (selector) {\n        if (dom7_esm_$(parent).is(selector)) parents.push(parent);\n      } else {\n        parents.push(parent);\n      }\n\n      parent = parent.parentNode;\n    }\n  }\n\n  return dom7_esm_$(parents);\n}\n\nfunction closest(selector) {\n  let closest = this; // eslint-disable-line\n\n  if (typeof selector === 'undefined') {\n    return dom7_esm_$([]);\n  }\n\n  if (!closest.is(selector)) {\n    closest = closest.parents(selector).eq(0);\n  }\n\n  return closest;\n}\n\nfunction find(selector) {\n  const foundElements = [];\n\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n\n  return dom7_esm_$(foundElements);\n}\n\nfunction children(selector) {\n  const children = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || dom7_esm_$(childNodes[j]).is(selector)) {\n        children.push(childNodes[j]);\n      }\n    }\n  }\n\n  return dom7_esm_$(children);\n}\n\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n  }\n\n  return this;\n}\n\nfunction detach() {\n  return this.remove();\n}\n\nfunction add(...els) {\n  const dom = this;\n  let i;\n  let j;\n\n  for (i = 0; i < els.length; i += 1) {\n    const toAdd = dom7_esm_$(els[i]);\n\n    for (j = 0; j < toAdd.length; j += 1) {\n      dom.push(toAdd[j]);\n    }\n  }\n\n  return dom;\n}\n\nfunction empty() {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.nodeType === 1) {\n      for (let j = 0; j < el.childNodes.length; j += 1) {\n        if (el.childNodes[j].parentNode) {\n          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n        }\n      }\n\n      el.textContent = '';\n    }\n  }\n\n  return this;\n}\n\n// eslint-disable-next-line\n\nfunction scrollTo(...args) {\n  const window = getWindow();\n  let [left, top, duration, easing, callback] = args;\n\n  if (args.length === 4 && typeof easing === 'function') {\n    callback = easing;\n    [left, top, duration, callback, easing] = args;\n  }\n\n  if (typeof easing === 'undefined') easing = 'swing';\n  return this.each(function animate() {\n    const el = this;\n    let currentTop;\n    let currentLeft;\n    let maxTop;\n    let maxLeft;\n    let newTop;\n    let newLeft;\n    let scrollTop; // eslint-disable-line\n\n    let scrollLeft; // eslint-disable-line\n\n    let animateTop = top > 0 || top === 0;\n    let animateLeft = left > 0 || left === 0;\n\n    if (typeof easing === 'undefined') {\n      easing = 'swing';\n    }\n\n    if (animateTop) {\n      currentTop = el.scrollTop;\n\n      if (!duration) {\n        el.scrollTop = top;\n      }\n    }\n\n    if (animateLeft) {\n      currentLeft = el.scrollLeft;\n\n      if (!duration) {\n        el.scrollLeft = left;\n      }\n    }\n\n    if (!duration) return;\n\n    if (animateTop) {\n      maxTop = el.scrollHeight - el.offsetHeight;\n      newTop = Math.max(Math.min(top, maxTop), 0);\n    }\n\n    if (animateLeft) {\n      maxLeft = el.scrollWidth - el.offsetWidth;\n      newLeft = Math.max(Math.min(left, maxLeft), 0);\n    }\n\n    let startTime = null;\n    if (animateTop && newTop === currentTop) animateTop = false;\n    if (animateLeft && newLeft === currentLeft) animateLeft = false;\n\n    function render(time = new Date().getTime()) {\n      if (startTime === null) {\n        startTime = time;\n      }\n\n      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n      const easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n      let done;\n      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n\n      if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (done) {\n        if (callback) callback();\n        return;\n      }\n\n      if (animateTop) el.scrollTop = scrollTop;\n      if (animateLeft) el.scrollLeft = scrollLeft;\n      window.requestAnimationFrame(render);\n    }\n\n    window.requestAnimationFrame(render);\n  });\n} // scrollTop(top, duration, easing, callback) {\n\n\nfunction scrollTop(...args) {\n  let [top, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [top, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof top === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollTop;\n    return null;\n  }\n\n  return dom.scrollTo(undefined, top, duration, easing, callback);\n}\n\nfunction scrollLeft(...args) {\n  let [left, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [left, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof left === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollLeft;\n    return null;\n  }\n\n  return dom.scrollTo(left, undefined, duration, easing, callback);\n}\n\n// eslint-disable-next-line\n\nfunction animate(initialProps, initialParams) {\n  const window = getWindow();\n  const els = this;\n  const a = {\n    props: Object.assign({}, initialProps),\n    params: Object.assign({\n      duration: 300,\n      easing: 'swing' // or 'linear'\n\n      /* Callbacks\n      begin(elements)\n      complete(elements)\n      progress(elements, complete, remaining, start, tweenValue)\n      */\n\n    }, initialParams),\n    elements: els,\n    animating: false,\n    que: [],\n\n    easingProgress(easing, progress) {\n      if (easing === 'swing') {\n        return 0.5 - Math.cos(progress * Math.PI) / 2;\n      }\n\n      if (typeof easing === 'function') {\n        return easing(progress);\n      }\n\n      return progress;\n    },\n\n    stop() {\n      if (a.frameId) {\n        window.cancelAnimationFrame(a.frameId);\n      }\n\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      a.que = [];\n    },\n\n    done(complete) {\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      if (complete) complete(els);\n\n      if (a.que.length > 0) {\n        const que = a.que.shift();\n        a.animate(que[0], que[1]);\n      }\n    },\n\n    animate(props, params) {\n      if (a.animating) {\n        a.que.push([props, params]);\n        return a;\n      }\n\n      const elements = []; // Define & Cache Initials & Units\n\n      a.elements.each((el, index) => {\n        let initialFullValue;\n        let initialValue;\n        let unit;\n        let finalValue;\n        let finalFullValue;\n        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n        elements[index] = {\n          container: el\n        };\n        Object.keys(props).forEach(prop => {\n          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');\n          initialValue = parseFloat(initialFullValue);\n          unit = initialFullValue.replace(initialValue, '');\n          finalValue = parseFloat(props[prop]);\n          finalFullValue = props[prop] + unit;\n          elements[index][prop] = {\n            initialFullValue,\n            initialValue,\n            unit,\n            finalValue,\n            finalFullValue,\n            currentValue: initialValue\n          };\n        });\n      });\n      let startTime = null;\n      let time;\n      let elementsDone = 0;\n      let propsDone = 0;\n      let done;\n      let began = false;\n      a.animating = true;\n\n      function render() {\n        time = new Date().getTime();\n        let progress;\n        let easeProgress; // let el;\n\n        if (!began) {\n          began = true;\n          if (params.begin) params.begin(els);\n        }\n\n        if (startTime === null) {\n          startTime = time;\n        }\n\n        if (params.progress) {\n          // eslint-disable-next-line\n          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n        }\n\n        elements.forEach(element => {\n          const el = element;\n          if (done || el.done) return;\n          Object.keys(props).forEach(prop => {\n            if (done || el.done) return;\n            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n            easeProgress = a.easingProgress(params.easing, progress);\n            const {\n              initialValue,\n              finalValue,\n              unit\n            } = el[prop];\n            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n            const currentValue = el[prop].currentValue;\n\n            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n              el.container.style[prop] = finalValue + unit;\n              propsDone += 1;\n\n              if (propsDone === Object.keys(props).length) {\n                el.done = true;\n                elementsDone += 1;\n              }\n\n              if (elementsDone === elements.length) {\n                done = true;\n              }\n            }\n\n            if (done) {\n              a.done(params.complete);\n              return;\n            }\n\n            el.container.style[prop] = currentValue + unit;\n          });\n        });\n        if (done) return; // Then call\n\n        a.frameId = window.requestAnimationFrame(render);\n      }\n\n      a.frameId = window.requestAnimationFrame(render);\n      return a;\n    }\n\n  };\n\n  if (a.elements.length === 0) {\n    return els;\n  }\n\n  let animateInstance;\n\n  for (let i = 0; i < a.elements.length; i += 1) {\n    if (a.elements[i].dom7AnimateInstance) {\n      animateInstance = a.elements[i].dom7AnimateInstance;\n    } else a.elements[i].dom7AnimateInstance = a;\n  }\n\n  if (!animateInstance) {\n    animateInstance = a;\n  }\n\n  if (initialProps === 'stop') {\n    animateInstance.stop();\n  } else {\n    animateInstance.animate(a.props, a.params);\n  }\n\n  return els;\n}\n\nfunction stop() {\n  const els = this;\n\n  for (let i = 0; i < els.length; i += 1) {\n    if (els[i].dom7AnimateInstance) {\n      els[i].dom7AnimateInstance.stop();\n    }\n  }\n}\n\nconst noTrigger = 'resize scroll'.split(' ');\n\nfunction shortcut(name) {\n  function eventHandler(...args) {\n    if (typeof args[0] === 'undefined') {\n      for (let i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i]) this[i][name]();else {\n            dom7_esm_$(this[i]).trigger(name);\n          }\n        }\n      }\n\n      return this;\n    }\n\n    return this.on(name, ...args);\n  }\n\n  return eventHandler;\n}\n\nconst click = shortcut('click');\nconst dom7_esm_blur = shortcut('blur');\nconst dom7_esm_focus = shortcut('focus');\nconst focusin = shortcut('focusin');\nconst focusout = shortcut('focusout');\nconst keyup = shortcut('keyup');\nconst keydown = shortcut('keydown');\nconst keypress = shortcut('keypress');\nconst dom7_esm_submit = shortcut('submit');\nconst change = shortcut('change');\nconst mousedown = shortcut('mousedown');\nconst mousemove = shortcut('mousemove');\nconst mouseup = shortcut('mouseup');\nconst mouseenter = shortcut('mouseenter');\nconst mouseleave = shortcut('mouseleave');\nconst mouseout = shortcut('mouseout');\nconst mouseover = shortcut('mouseover');\nconst touchstart = shortcut('touchstart');\nconst touchend = shortcut('touchend');\nconst touchmove = shortcut('touchmove');\nconst resize = shortcut('resize');\nconst dom7_esm_scroll = shortcut('scroll');\n\n/* harmony default export */ var dom7_esm = ((/* unused pure expression or super */ null && (dom7_esm_$)));\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/shared/dom.js\n\nconst Methods = {\n  addClass: addClass,\n  removeClass: removeClass,\n  hasClass: hasClass,\n  toggleClass: toggleClass,\n  attr: attr,\n  removeAttr: removeAttr,\n  transform: transform,\n  transition: transition,\n  on: on,\n  off: off,\n  trigger: trigger,\n  transitionEnd: transitionEnd,\n  outerWidth: dom7_esm_outerWidth,\n  outerHeight: dom7_esm_outerHeight,\n  styles: styles,\n  offset: offset,\n  css: css,\n  each: each,\n  html: html,\n  text: dom7_esm_text,\n  is: is,\n  index: index,\n  eq: eq,\n  append: append,\n  prepend: prepend,\n  next: next,\n  nextAll: nextAll,\n  prev: prev,\n  prevAll: prevAll,\n  parent: dom7_esm_parent,\n  parents: parents,\n  closest: closest,\n  find: find,\n  children: children,\n  filter: filter,\n  remove: remove\n};\nObject.keys(Methods).forEach(methodName => {\n  Object.defineProperty(dom7_esm_$.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\n/* harmony default export */ var dom = (dom7_esm_$);\n;// CONCATENATED MODULE: ./node_modules/swiper/shared/utils.js\n\n\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach(key => {\n    try {\n      object[key] = null;\n    } catch (e) {// no getter for object\n    }\n\n    try {\n      delete object[key];\n    } catch (e) {// something got wrong\n    }\n  });\n}\n\nfunction utils_nextTick(callback, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return setTimeout(callback, delay);\n}\n\nfunction now() {\n  return Date.now();\n}\n\nfunction utils_getComputedStyle(el) {\n  const window = ssr_window_esm_getWindow();\n  let style;\n\n  if (window.getComputedStyle) {\n    style = window.getComputedStyle(el, null);\n  }\n\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n\n  if (!style) {\n    style = el.style;\n  }\n\n  return style;\n}\n\nfunction utils_getTranslate(el, axis) {\n  if (axis === void 0) {\n    axis = 'x';\n  }\n\n  const window = ssr_window_esm_getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = utils_getComputedStyle(el, null);\n\n  if (window.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n\n    if (curTransform.split(',').length > 6) {\n      curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\n    } // Some old versions of Webkit choke when 'none' is passed; pass\n    // empty string instead in this case\n\n\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n    matrix = transformMatrix.toString().split(',');\n  }\n\n  if (axis === 'x') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers\n    else curTransform = parseFloat(matrix[4]);\n  }\n\n  if (axis === 'y') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers\n    else curTransform = parseFloat(matrix[5]);\n  }\n\n  return curTransform || 0;\n}\n\nfunction utils_isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction isNode(node) {\n  // eslint-disable-next-line\n  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\n    return node instanceof HTMLElement;\n  }\n\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\n\nfunction utils_extend() {\n  const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n\n  for (let i = 1; i < arguments.length; i += 1) {\n    const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\n\n    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\n\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n        if (desc !== undefined && desc.enumerable) {\n          if (utils_isObject(to[nextKey]) && utils_isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              utils_extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!utils_isObject(to[nextKey]) && utils_isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              utils_extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\nfunction utils_setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\n\nfunction animateCSSModeScroll(_ref) {\n  let {\n    swiper,\n    targetPosition,\n    side\n  } = _ref;\n  const window = ssr_window_esm_getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = 'none';\n  window.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? 'next' : 'prev';\n\n  const isOutOfBound = (current, target) => {\n    return dir === 'next' && current >= target || dir === 'prev' && current <= target;\n  };\n\n  const animate = () => {\n    time = new Date().getTime();\n\n    if (startTime === null) {\n      startTime = time;\n    }\n\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.scrollSnapType = '';\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = '';\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n\n    swiper.cssModeFrameID = window.requestAnimationFrame(animate);\n  };\n\n  animate();\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/shared/get-support.js\n\nlet support;\n\nfunction calcSupport() {\n  const window = ssr_window_esm_getWindow();\n  const document = ssr_window_esm_getDocument();\n  return {\n    smoothScroll: document.documentElement && 'scrollBehavior' in document.documentElement.style,\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),\n    passiveListener: function checkPassiveListener() {\n      let supportsPassive = false;\n\n      try {\n        const opts = Object.defineProperty({}, 'passive', {\n          // eslint-disable-next-line\n          get() {\n            supportsPassive = true;\n          }\n\n        });\n        window.addEventListener('testPassiveListener', null, opts);\n      } catch (e) {// No support\n      }\n\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return 'ongesturestart' in window;\n    }()\n  };\n}\n\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n\n  return support;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/shared/get-device.js\n\n\nlet deviceCached;\n\nfunction calcDevice(_temp) {\n  let {\n    userAgent\n  } = _temp === void 0 ? {} : _temp;\n  const support = getSupport();\n  const window = ssr_window_esm_getWindow();\n  const platform = window.navigator.platform;\n  const ua = userAgent || window.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window.screen.width;\n  const screenHeight = window.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === 'Win32';\n  let macos = platform === 'MacIntel'; // iPadOs 13 fix\n\n  const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad) ipad = [0, 1, '13_0_0'];\n    macos = false;\n  } // Android\n\n\n  if (android && !windows) {\n    device.os = 'android';\n    device.android = true;\n  }\n\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  } // Export object\n\n\n  return device;\n}\n\nfunction getDevice(overrides) {\n  if (overrides === void 0) {\n    overrides = {};\n  }\n\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n\n  return deviceCached;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/shared/get-browser.js\n\nlet browser;\n\nfunction calcBrowser() {\n  const window = ssr_window_esm_getWindow();\n\n  function isSafari() {\n    const ua = window.navigator.userAgent.toLowerCase();\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n  }\n\n  return {\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)\n  };\n}\n\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n\n  return browser;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/swiper/core/modules/resize/resize.js\n\nfunction Resize(_ref) {\n  let {\n    swiper,\n    on,\n    emit\n  } = _ref;\n  const window = ssr_window_esm_getWindow();\n  let observer = null;\n  let animationFrame = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      animationFrame = window.requestAnimationFrame(() => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach(_ref2 => {\n          let {\n            contentBoxSize,\n            contentRect,\n            target\n          } = _ref2;\n          if (target && target !== swiper.el) return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (animationFrame) {\n      window.cancelAnimationFrame(animationFrame);\n    }\n\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/modules/observer/observer.js\n\nfunction Observer(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const observers = [];\n  const window = ssr_window_esm_getWindow();\n\n  const attach = function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n    const observer = new ObserverFunc(mutations => {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (mutations.length === 1) {\n        emit('observerUpdate', mutations[0]);\n        return;\n      }\n\n      const observerUpdate = function observerUpdate() {\n        emit('observerUpdate', mutations[0]);\n      };\n\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(observerUpdate);\n      } else {\n        window.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n\n  const init = () => {\n    if (!swiper.params.observer) return;\n\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    } // Observe container\n\n\n    attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    }); // Observe wrapper\n\n    attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  };\n\n  const destroy = () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on('init', init);\n  on('destroy', destroy);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events-emitter.js\n/* eslint-disable no-underscore-dangle */\n/* harmony default export */ var events_emitter = ({\n  on(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(event => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n\n  once(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n\n    function onceHandler() {\n      self.off(events, onceHandler);\n\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      handler.apply(self, args);\n    }\n\n    onceHandler.__emitterProxy = handler;\n    return self.on(events, onceHandler, priority);\n  },\n\n  onAny(handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n\n    return self;\n  },\n\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsAnyListeners) return self;\n    const index = self.eventsAnyListeners.indexOf(handler);\n\n    if (index >= 0) {\n      self.eventsAnyListeners.splice(index, 1);\n    }\n\n    return self;\n  },\n\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(event => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n\n  emit() {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n\n    data.unshift(context);\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach(event => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach(eventHandler => {\n          eventHandler.apply(context, [event, ...data]);\n        });\n      }\n\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(eventHandler => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSize.js\nfunction updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  } // Subtract paddings\n\n\n  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);\n  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);\n  if (Number.isNaN(width)) width = 0;\n  if (Number.isNaN(height)) height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlides.js\n\nfunction updateSlides() {\n  const swiper = this;\n\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    utils_setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    utils_setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel('width')] = ``;\n      }\n\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    utils_setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    utils_setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n\n  if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded) swiper.$el.addClass(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.$el.removeClass(backFaceHiddenClass);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateAutoHeight.js\n\nfunction updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n\n  const getSlideByIndex = index => {\n    if (isVirtual) {\n      return swiper.slides.filter(el => parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index)[0];\n    }\n\n    return swiper.slides.eq(index)[0];\n  }; // Find slides currently in view\n\n\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || dom([])).each(slide => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  } // Find new height from highest slide in view\n\n\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  } // Update Height\n\n\n  if (newHeight || newHeight === 0) swiper.$wrapperEl.css('height', `${newHeight}px`);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlidesOffset.js\nfunction updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlidesProgress.js\n\nfunction updateSlidesProgress(translate) {\n  if (translate === void 0) {\n    translate = this && this.translate || 0;\n  }\n\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl) offsetCenter = translate; // Visible Slides\n\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides.eq(i).addClass(params.slideVisibleClass);\n    }\n\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n\n  swiper.visibleSlides = dom(swiper.visibleSlides);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateProgress.js\nfunction updateProgress(translate) {\n  const swiper = this;\n\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line\n\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n\n  swiper.emit('progress', progress);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlidesClasses.js\nfunction updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    $wrapperEl,\n    activeIndex,\n    realIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n  let activeSlide;\n\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  } // Active classes\n\n\n  activeSlide.addClass(params.slideActiveClass);\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    }\n  } // Next Slide\n\n\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  } // Prev Slide\n\n\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    }\n\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    }\n  }\n\n  swiper.emitSlidesClasses();\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateActiveIndex.js\nfunction updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid,\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n\n  if (typeof activeIndex === 'undefined') {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    } // Normalize slideIndex\n\n\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n    }\n  }\n\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n\n    return;\n  } // Get real index\n\n\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n  Object.assign(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n\n  if (previousRealIndex !== realIndex) {\n    swiper.emit('realIndexChange');\n  }\n\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit('slideChange');\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateClickedSlide.js\n\nfunction updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = dom(e).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  let slideIndex;\n\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt(dom(slide).attr('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/update/index.js\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var update = ({\n  updateSize: updateSize,\n  updateSlides: updateSlides,\n  updateAutoHeight: updateAutoHeight,\n  updateSlidesOffset: updateSlidesOffset,\n  updateSlidesProgress: updateSlidesProgress,\n  updateProgress: updateProgress,\n  updateSlidesClasses: updateSlidesClasses,\n  updateActiveIndex: updateActiveIndex,\n  updateClickedSlide: updateClickedSlide\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/translate/getTranslate.js\n\nfunction getSwiperTranslate(axis) {\n  if (axis === void 0) {\n    axis = this.isHorizontal() ? 'x' : 'y';\n  }\n\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    $wrapperEl\n  } = swiper;\n\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n\n  if (params.cssMode) {\n    return translate;\n  }\n\n  let currentTranslate = utils_getTranslate($wrapperEl[0], axis);\n  if (rtl) currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/translate/setTranslate.js\nfunction setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    $wrapperEl,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress\n\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, byController);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/translate/minTranslate.js\nfunction minTranslate() {\n  return -this.snapGrid[0];\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/translate/maxTranslate.js\nfunction maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/translate/translateTo.js\n\nfunction translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (translateBounds === void 0) {\n    translateBounds = true;\n  }\n\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress\n\n  swiper.updateProgress(newTranslate);\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n\n    if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/translate/index.js\n\n\n\n\n\n/* harmony default export */ var translate = ({\n  getTranslate: getSwiperTranslate,\n  setTranslate: setTranslate,\n  minTranslate: minTranslate,\n  maxTranslate: maxTranslate,\n  translateTo: translateTo\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/transition/setTransition.js\nfunction setTransition(duration, byController) {\n  const swiper = this;\n\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n\n  swiper.emit('setTransition', duration, byController);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/transition/transitionEmit.js\nfunction transitionEmit(_ref) {\n  let {\n    swiper,\n    runCallbacks,\n    direction,\n    step\n  } = _ref;\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n\n  swiper.emit(`transition${step}`);\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n\n    swiper.emit(`slideChangeTransition${step}`);\n\n    if (dir === 'next') {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/transition/transitionStart.js\n\nfunction transitionStart(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode) return;\n\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'Start'\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/transition/transitionEnd.js\n\nfunction transitionEnd_transitionEnd(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'End'\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/transition/index.js\n\n\n\n/* harmony default export */ var core_transition = ({\n  setTransition: setTransition,\n  transitionStart: transitionStart,\n  transitionEnd: transitionEnd_transitionEnd\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideTo.js\n\nfunction slideTo(index, speed, runCallbacks, internal, initial) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index !== 'number' && typeof index !== 'string') {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);\n  }\n\n  if (typeof index === 'string') {\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  const translate = -snapGrid[snapIndex]; // Update progress\n\n  swiper.updateProgress(translate); // Normalize slideIndex\n\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  } // Directions locks\n\n\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex); // Update Height\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    swiper.updateSlidesClasses();\n\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n\n    return false;\n  }\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n\n    swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n  }\n\n  return true;\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideToLoop.js\nfunction slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index === 'string') {\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideNext.js\n/* eslint no-unused-vars: \"off\" */\nfunction slideNext(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    animating,\n    enabled,\n    params\n  } = swiper;\n  if (!enabled) return swiper;\n  let perGroup = params.slidesPerGroup;\n\n  if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\n  }\n\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slidePrev.js\n/* eslint no-unused-vars: \"off\" */\nfunction slidePrev(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  const {\n    params,\n    animating,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return swiper;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map(val => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        // prevSnap = snap;\n        prevSnapIndex = snapIndex;\n      }\n    });\n\n    if (typeof prevSnapIndex !== 'undefined') {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n\n  let prevIndex = 0;\n\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n\n  if (params.rewind && swiper.isBeginning) {\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n  }\n\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideReset.js\n/* eslint no-unused-vars: \"off\" */\nfunction slideReset(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideToClosest.js\n/* eslint no-unused-vars: \"off\" */\nfunction slideToClosest(speed, runCallbacks, internal, threshold) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (threshold === void 0) {\n    threshold = 0.5;\n  }\n\n  const swiper = this;\n  let index = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideToClickedSlide.js\n\n\nfunction slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt(dom(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        utils_nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n      utils_nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/slide/index.js\n\n\n\n\n\n\n\n/* harmony default export */ var slide = ({\n  slideTo: slideTo,\n  slideToLoop: slideToLoop,\n  slideNext: slideNext,\n  slidePrev: slidePrev,\n  slideReset: slideReset,\n  slideToClosest: slideToClosest,\n  slideToClickedSlide: slideToClickedSlide\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/loop/loopCreate.js\n\n\nfunction loopCreate() {\n  const swiper = this;\n  const document = ssr_window_esm_getDocument();\n  const {\n    params,\n    $wrapperEl\n  } = swiper; // Remove duplicated slides\n\n  const $selector = $wrapperEl.children().length > 0 ? dom($wrapperEl.children()[0].parentNode) : $wrapperEl;\n  $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n  let slides = $selector.children(`.${params.slideClass}`);\n\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = dom(document.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $selector.append(blankNode);\n      }\n\n      slides = $selector.children(`.${params.slideClass}`);\n    }\n  }\n\n  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n\n  if (swiper.loopedSlides > slides.length) {\n    swiper.loopedSlides = slides.length;\n  }\n\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((el, index) => {\n    const slide = dom(el);\n\n    if (index < swiper.loopedSlides) {\n      appendSlides.push(el);\n    }\n\n    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {\n      prependSlides.push(el);\n    }\n\n    slide.attr('data-swiper-slide-index', index);\n  });\n\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $selector.append(dom(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $selector.prepend(dom(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/loop/loopFix.js\nfunction loopFix() {\n  const swiper = this;\n  swiper.emit('beforeLoopFix');\n  const {\n    activeIndex,\n    slides,\n    loopedSlides,\n    allowSlidePrev,\n    allowSlideNext,\n    snapGrid,\n    rtlTranslate: rtl\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding\n\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    // Fix For Positive Oversliding\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit('loopFix');\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/loop/loopDestroy.js\nfunction loopDestroy() {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    slides\n  } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr('data-swiper-slide-index');\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/loop/index.js\n\n\n\n/* harmony default export */ var loop = ({\n  loopCreate: loopCreate,\n  loopFix: loopFix,\n  loopDestroy: loopDestroy\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/grab-cursor/setGrabCursor.js\nfunction setGrabCursor(moving) {\n  const swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n  const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/grab-cursor/unsetGrabCursor.js\nfunction unsetGrabCursor() {\n  const swiper = this;\n\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n\n  swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/grab-cursor/index.js\n\n\n/* harmony default export */ var grab_cursor = ({\n  setGrabCursor: setGrabCursor,\n  unsetGrabCursor: unsetGrabCursor\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events/onTouchStart.js\n\n\n // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\n\nfunction closestElement(selector, base) {\n  if (base === void 0) {\n    base = this;\n  }\n\n  function __closestFrom(el) {\n    if (!el || el === ssr_window_esm_getDocument() || el === ssr_window_esm_getWindow()) return null;\n    if (el.assignedSlot) el = el.assignedSlot;\n    const found = el.closest(selector);\n\n    if (!found && !el.getRootNode) {\n      return null;\n    }\n\n    return found || __closestFrom(el.getRootNode().host);\n  }\n\n  return __closestFrom(base);\n}\n\nfunction onTouchStart(event) {\n  const swiper = this;\n  const document = ssr_window_esm_getDocument();\n  const window = ssr_window_esm_getWindow();\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  let $targetEl = dom(e.target);\n\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!$targetEl.closest(swiper.wrapperEl).length) return;\n  }\n\n  data.isTouchEvent = e.type === 'touchstart';\n  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;\n  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return; // change target el for shadow root component\n\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {\n    $targetEl = dom(event.path[0]);\n  }\n\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot); // use closestElement for shadow root element to get the actual closest for nested shadow root element\n\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, $targetEl[0]) : $targetEl.closest(noSwipingSelector)[0])) {\n    swiper.allowClick = true;\n    return;\n  }\n\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0]) return;\n  }\n\n  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === 'prevent') {\n      event.preventDefault();\n    } else {\n      return;\n    }\n  }\n\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n\n  if (e.type !== 'touchstart') {\n    let preventDefault = true;\n\n    if ($targetEl.is(data.focusableElements)) {\n      preventDefault = false;\n\n      if ($targetEl[0].nodeName === 'SELECT') {\n        data.isTouched = false;\n      }\n    }\n\n    if (document.activeElement && dom(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) {\n      document.activeElement.blur();\n    }\n\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n\n  if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n    swiper.freeMode.onTouchStart();\n  }\n\n  swiper.emit('touchStart', e);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events/onTouchMove.js\n\n\n\nfunction onTouchMove(event) {\n  const document = ssr_window_esm_getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && e.type !== 'touchmove') return;\n  const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n\n  if (!swiper.allowTouchMove) {\n    if (!dom(e.target).is(data.focusableElements)) {\n      swiper.allowClick = false;\n    }\n\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n\n  if (data.isTouchEvent && document.activeElement) {\n    if (e.target === document.activeElement && dom(e.target).is(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n\n  if (e.targetTouches && e.targetTouches.length > 1) return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n\n  if (typeof data.isScrolling === 'undefined') {\n    let touchAngle;\n\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n\n  if (!data.startMoving) {\n    return;\n  }\n\n  swiper.allowClick = false;\n\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n\n  if (!data.isMoved) {\n    if (params.loop && !params.cssMode) {\n      swiper.loopFix();\n    }\n\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n    }\n\n    data.allowMomentumBounce = false; // Grab Cursor\n\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n\n    swiper.emit('sliderFirstMove', e);\n  }\n\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl) diff = -diff;\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n  }\n\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  } // Directions locks\n\n\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  } // Threshold\n\n\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n\n  if (!params.followFinger || params.cssMode) return; // Update active index in free mode\n\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  } // Update progress\n\n\n  swiper.updateProgress(data.currentTranslate); // Update translate\n\n  swiper.setTranslate(data.currentTranslate);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events/onTouchEnd.js\n\nfunction onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  utils_nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events/onResize.js\nfunction onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0) return; // Breakpoints\n\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  } // Save locks\n\n\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper; // Disable locks on resize\n\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  } // Return locks after resize\n\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events/onClick.js\nfunction onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled) return;\n\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events/onScroll.js\nfunction onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  swiper.previousTranslate = swiper.translate;\n\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  } // eslint-disable-next-line\n\n\n  if (swiper.translate === 0) swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, false);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/events/index.js\n\n\n\n\n\n\n\nlet dummyEventAttached = false;\n\nfunction dummyEventListener() {}\n\nconst events = (swiper, method) => {\n  const document = ssr_window_esm_getDocument();\n  const {\n    params,\n    touchEvents,\n    el,\n    wrapperEl,\n    device,\n    support\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n  const swiperMethod = method; // Touch Events\n\n  if (!support.touch) {\n    el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n    document[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n    document[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    const passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n    el[domMethod](touchEvents.move, swiper.onTouchMove, support.passiveListener ? {\n      passive: false,\n      capture\n    } : capture);\n    el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n\n    if (touchEvents.cancel) {\n      el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n    }\n  } // Prevent Links Clicks\n\n\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod]('click', swiper.onClick, true);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[domMethod]('scroll', swiper.onScroll);\n  } // Resize handler\n\n\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n  } else {\n    swiper[swiperMethod]('observerUpdate', onResize, true);\n  }\n};\n\nfunction attachEvents() {\n  const swiper = this;\n  const document = ssr_window_esm_getDocument();\n  const {\n    params,\n    support\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n\n  swiper.onClick = onClick.bind(swiper);\n\n  if (support.touch && !dummyEventAttached) {\n    document.addEventListener('touchstart', dummyEventListener);\n    dummyEventAttached = true;\n  }\n\n  events(swiper, 'on');\n}\n\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, 'off');\n}\n\n/* harmony default export */ var core_events = ({\n  attachEvents,\n  detachEvents\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/breakpoints/setBreakpoint.js\n\n\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\n\nfunction setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n\n    swiper.emitContainerClasses();\n  } // Toggle navigation, pagination, scrollbar\n\n\n  ['navigation', 'pagination', 'scrollbar'].forEach(prop => {\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n\n  utils_extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n\n  swiper.emit('breakpoint', breakpointParams);\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/breakpoints/getBreakpoint.js\n\nfunction getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = 'window';\n  }\n\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = ssr_window_esm_getWindow();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n\n  return breakpoint || 'max';\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/breakpoints/index.js\n\n\n/* harmony default export */ var breakpoints = ({\n  setBreakpoint: setBreakpoint,\n  getBreakpoint: getBreakpoint\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/classes/addClasses.js\nfunction prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach(item => {\n    if (typeof item === 'object') {\n      Object.keys(item).forEach(classNames => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === 'string') {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\n\nfunction addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    $el,\n    device,\n    support\n  } = swiper; // prettier-ignore\n\n  const suffixes = prepareClasses(['initialized', params.direction, {\n    'pointer-events': !support.touch\n  }, {\n    'free-mode': swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    'autoheight': params.autoHeight\n  }, {\n    'rtl': rtl\n  }, {\n    'grid': params.grid && params.grid.rows > 1\n  }, {\n    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\n  }, {\n    'android': device.android\n  }, {\n    'ios': device.ios\n  }, {\n    'css-mode': params.cssMode\n  }, {\n    'centered': params.cssMode && params.centeredSlides\n  }, {\n    'watch-progress': params.watchSlidesProgress\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  $el.addClass([...classNames].join(' '));\n  swiper.emitContainerClasses();\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/classes/removeClasses.js\nfunction removeClasses() {\n  const swiper = this;\n  const {\n    $el,\n    classNames\n  } = swiper;\n  $el.removeClass(classNames.join(' '));\n  swiper.emitContainerClasses();\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/classes/index.js\n\n\n/* harmony default export */ var classes = ({\n  addClasses: addClasses,\n  removeClasses: removeClasses\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/images/loadImage.js\n\n\nfunction loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  const window = ssr_window_esm_getWindow();\n  let image;\n\n  function onReady() {\n    if (callback) callback();\n  }\n\n  const isPicture = dom(imageEl).parent('picture')[0];\n\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n\n      if (sizes) {\n        image.sizes = sizes;\n      }\n\n      if (srcset) {\n        image.srcset = srcset;\n      }\n\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    // image already loaded...\n    onReady();\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/images/preloadImages.js\nfunction preloadImages() {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find('img');\n\n  function onReady() {\n    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;\n    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;\n\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady) swiper.update();\n      swiper.emit('imagesReady');\n    }\n  }\n\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/images/index.js\n\n\n/* harmony default export */ var core_images = ({\n  loadImage: loadImage,\n  preloadImages: preloadImages\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/check-overflow/index.js\nfunction checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n  }\n}\n\n/* harmony default export */ var check_overflow = ({\n  checkOverflow\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/defaults.js\n/* harmony default export */ var defaults = ({\n  init: true,\n  direction: 'horizontal',\n  touchEventsTarget: 'wrapper',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: 'input, select, option, textarea, button, video, label',\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: 'slide',\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n  // Breakpoints\n  breakpoints: undefined,\n  breakpointsBase: 'window',\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: true,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // Images\n  preloadImages: true,\n  updateOnImagesReady: true,\n  // loop\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  // rewind\n  rewind: false,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  maxBackfaceHiddenSlides: 10,\n  // NS\n  containerModifierClass: 'swiper-',\n  // NEW\n  slideClass: 'swiper-slide',\n  slideBlankClass: 'swiper-slide-invisible-blank',\n  slideActiveClass: 'swiper-slide-active',\n  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideDuplicateClass: 'swiper-slide-duplicate',\n  slideNextClass: 'swiper-slide-next',\n  slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n  slidePrevClass: 'swiper-slide-prev',\n  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n  wrapperClass: 'swiper-wrapper',\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n});\n;// CONCATENATED MODULE: ./node_modules/swiper/core/moduleExtendParams.js\n\nfunction moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n\n    if (typeof moduleParams !== 'object' || moduleParams === null) {\n      utils_extend(allModulesParams, obj);\n      return;\n    }\n\n    if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n\n    if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n      utils_extend(allModulesParams, obj);\n      return;\n    }\n\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n\n    if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n\n    if (!params[moduleParamName]) params[moduleParamName] = {\n      enabled: false\n    };\n    utils_extend(allModulesParams, obj);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/core/core.js\n/* eslint no-param-reassign: \"off\" */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst prototypes = {\n  eventsEmitter: events_emitter,\n  update: update,\n  translate: translate,\n  transition: core_transition,\n  slide: slide,\n  loop: loop,\n  grabCursor: grab_cursor,\n  events: core_events,\n  breakpoints: breakpoints,\n  checkOverflow: check_overflow,\n  classes: classes,\n  images: core_images\n};\nconst extendedDefaults = {};\n\nclass Swiper {\n  constructor() {\n    let el;\n    let params;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n\n    if (!params) params = {};\n    params = utils_extend({}, params);\n    if (el && !params.el) params.el = el;\n\n    if (params.el && dom(params.el).length > 1) {\n      const swipers = [];\n      dom(params.el).each(containerEl => {\n        const newParams = utils_extend({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    } // Swiper Instance\n\n\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n\n    const allModulesParams = {};\n    swiper.modules.forEach(mod => {\n      mod({\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    }); // Extend defaults with modules params\n\n    const swiperParams = utils_extend({}, defaults, allModulesParams); // Extend defaults with passed params\n\n    swiper.params = utils_extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = utils_extend({}, swiper.params);\n    swiper.passedParams = utils_extend({}, params); // add event listeners\n\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach(eventName => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    } // Save Dom lib\n\n\n    swiper.$ = dom; // Extend Swiper\n\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: dom(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n\n      isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEvents: function touchEvents() {\n        const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n        const desktop = ['pointerdown', 'pointermove', 'pointerup'];\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        focusableElements: swiper.params.focusableElements,\n        // Last click time\n        lastClickTime: now(),\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        isTouchEvent: undefined,\n        startMoving: undefined\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit('_swiper'); // Init\n\n    if (swiper.params.init) {\n      swiper.init();\n    } // Return app instance\n\n\n    return swiper;\n  }\n\n  enable() {\n    const swiper = this;\n    if (swiper.enabled) return;\n    swiper.enabled = true;\n\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n\n    swiper.emit('enable');\n  }\n\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    swiper.enabled = false;\n\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n\n    swiper.emit('disable');\n  }\n\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const cls = swiper.el.className.split(' ').filter(className => {\n      return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit('_containerClasses', cls.join(' '));\n  }\n\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    if (swiper.destroyed) return '';\n    return slideEl.className.split(' ').filter(className => {\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(' ');\n  }\n\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const updates = [];\n    swiper.slides.each(slideEl => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit('_slideClass', slideEl, classNames);\n    });\n    swiper.emit('_slideClasses', updates);\n  }\n\n  slidesPerViewDynamic(view, exact) {\n    if (view === void 0) {\n      view = 'current';\n    }\n\n    if (exact === void 0) {\n      exact = false;\n    }\n\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      // eslint-disable-next-line\n      if (view === 'current') {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        // previous\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n\n    return spv;\n  }\n\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    const {\n      snapGrid,\n      params\n    } = swiper; // Breakpoints\n\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n\n    function setTranslate() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    let translated;\n\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate();\n\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n\n      if (!translated) {\n        setTranslate();\n      }\n    }\n\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n\n    swiper.emit('update');\n  }\n\n  changeDirection(newDirection, needUpdate) {\n    if (needUpdate === void 0) {\n      needUpdate = true;\n    }\n\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n      return swiper;\n    }\n\n    swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each(slideEl => {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n    return swiper;\n  }\n\n  changeLanguageDirection(direction) {\n    const swiper = this;\n    if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;\n    swiper.rtl = direction === 'rtl';\n    swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;\n\n    if (swiper.rtl) {\n      swiper.$el.addClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'rtl';\n    } else {\n      swiper.$el.removeClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'ltr';\n    }\n\n    swiper.update();\n  }\n\n  mount(el) {\n    const swiper = this;\n    if (swiper.mounted) return true; // Find el\n\n    const $el = dom(el || swiper.params.el);\n    el = $el[0];\n\n    if (!el) {\n      return false;\n    }\n\n    el.swiper = swiper;\n\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\n    };\n\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = dom(el.shadowRoot.querySelector(getWrapperSelector())); // Children needs to return slot items\n\n        res.children = options => $el.children(options);\n\n        return res;\n      }\n\n      if (!$el.children) {\n        return dom($el).children(getWrapperSelector());\n      }\n\n      return $el.children(getWrapperSelector());\n    }; // Find Wrapper\n\n\n    let $wrapperEl = getWrapper();\n\n    if ($wrapperEl.length === 0 && swiper.params.createElements) {\n      const document = ssr_window_esm_getDocument();\n      const wrapper = document.createElement('div');\n      $wrapperEl = dom(wrapper);\n      wrapper.className = swiper.params.wrapperClass;\n      $el.append(wrapper);\n      $el.children(`.${swiper.params.slideClass}`).each(slideEl => {\n        $wrapperEl.append(slideEl);\n      });\n    }\n\n    Object.assign(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n      wrongRTL: $wrapperEl.css('display') === '-webkit-box'\n    });\n    return true;\n  }\n\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized) return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false) return swiper;\n    swiper.emit('beforeInit'); // Set breakpoint\n\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    } // Add Classes\n\n\n    swiper.addClasses(); // Create loop\n\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    } // Update size\n\n\n    swiper.updateSize(); // Update slides\n\n    swiper.updateSlides();\n\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    } // Set Grab Cursor\n\n\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    } // Slide To Initial Slide\n\n\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    } // Attach events\n\n\n    swiper.attachEvents(); // Init Flag\n\n    swiper.initialized = true; // Emit\n\n    swiper.emit('init');\n    swiper.emit('afterInit');\n    return swiper;\n  }\n\n  destroy(deleteInstance, cleanStyles) {\n    if (deleteInstance === void 0) {\n      deleteInstance = true;\n    }\n\n    if (cleanStyles === void 0) {\n      cleanStyles = true;\n    }\n\n    const swiper = this;\n    const {\n      params,\n      $el,\n      $wrapperEl,\n      slides\n    } = swiper;\n\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n\n    swiper.emit('beforeDestroy'); // Init Flag\n\n    swiper.initialized = false; // Detach events\n\n    swiper.detachEvents(); // Destroy loop\n\n    if (params.loop) {\n      swiper.loopDestroy();\n    } // Cleanup styles\n\n\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr('style');\n      $wrapperEl.removeAttr('style');\n\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');\n      }\n    }\n\n    swiper.emit('destroy'); // Detach emitter events\n\n    Object.keys(swiper.eventsListeners).forEach(eventName => {\n      swiper.off(eventName);\n    });\n\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      deleteProps(swiper);\n    }\n\n    swiper.destroyed = true;\n    return null;\n  }\n\n  static extendDefaults(newDefaults) {\n    utils_extend(extendedDefaults, newDefaults);\n  }\n\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n\n  static get defaults() {\n    return defaults;\n  }\n\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n\n    if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach(m => Swiper.installModule(m));\n      return Swiper;\n    }\n\n    Swiper.installModule(module);\n    return Swiper;\n  }\n\n}\n\nObject.keys(prototypes).forEach(prototypeGroup => {\n  Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\n/* harmony default export */ var core = (Swiper);\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/virtual/virtual.js\n\n\nfunction Virtual(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  extendParams({\n    virtual: {\n      enabled: false,\n      slides: [],\n      cache: true,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: true,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  let cssModeTimeout;\n  swiper.virtual = {\n    cache: {},\n    from: undefined,\n    to: undefined,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n\n  function renderSlide(slide, index) {\n    const params = swiper.params.virtual;\n\n    if (params.cache && swiper.virtual.cache[index]) {\n      return swiper.virtual.cache[index];\n    }\n\n    const $slideEl = params.renderSlide ? $(params.renderSlide.call(swiper, slide, index)) : $(`<div class=\"${swiper.params.slideClass}\" data-swiper-slide-index=\"${index}\">${slide}</div>`);\n    if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);\n    if (params.cache) swiper.virtual.cache[index] = $slideEl;\n    return $slideEl;\n  }\n\n  function update(force) {\n    const {\n      slidesPerView,\n      slidesPerGroup,\n      centeredSlides\n    } = swiper.params;\n    const {\n      addSlidesBefore,\n      addSlidesAfter\n    } = swiper.params.virtual;\n    const {\n      from: previousFrom,\n      to: previousTo,\n      slides,\n      slidesGrid: previousSlidesGrid,\n      offset: previousOffset\n    } = swiper.virtual;\n\n    if (!swiper.params.cssMode) {\n      swiper.updateActiveIndex();\n    }\n\n    const activeIndex = swiper.activeIndex || 0;\n    let offsetProp;\n    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\n    let slidesAfter;\n    let slidesBefore;\n\n    if (centeredSlides) {\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n    } else {\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n      slidesBefore = slidesPerGroup + addSlidesBefore;\n    }\n\n    const from = Math.max((activeIndex || 0) - slidesBefore, 0);\n    const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);\n    const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n    Object.assign(swiper.virtual, {\n      from,\n      to,\n      offset,\n      slidesGrid: swiper.slidesGrid\n    });\n\n    function onRendered() {\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n\n      if (swiper.lazy && swiper.params.lazy.enabled) {\n        swiper.lazy.load();\n      }\n\n      emit('virtualUpdate');\n    }\n\n    if (previousFrom === from && previousTo === to && !force) {\n      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n        swiper.slides.css(offsetProp, `${offset}px`);\n      }\n\n      swiper.updateProgress();\n      emit('virtualUpdate');\n      return;\n    }\n\n    if (swiper.params.virtual.renderExternal) {\n      swiper.params.virtual.renderExternal.call(swiper, {\n        offset,\n        from,\n        to,\n        slides: function getSlides() {\n          const slidesToRender = [];\n\n          for (let i = from; i <= to; i += 1) {\n            slidesToRender.push(slides[i]);\n          }\n\n          return slidesToRender;\n        }()\n      });\n\n      if (swiper.params.virtual.renderExternalUpdate) {\n        onRendered();\n      } else {\n        emit('virtualUpdate');\n      }\n\n      return;\n    }\n\n    const prependIndexes = [];\n    const appendIndexes = [];\n\n    if (force) {\n      swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();\n    } else {\n      for (let i = previousFrom; i <= previousTo; i += 1) {\n        if (i < from || i > to) {\n          swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${i}\"]`).remove();\n        }\n      }\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      if (i >= from && i <= to) {\n        if (typeof previousTo === 'undefined' || force) {\n          appendIndexes.push(i);\n        } else {\n          if (i > previousTo) appendIndexes.push(i);\n          if (i < previousFrom) prependIndexes.push(i);\n        }\n      }\n    }\n\n    appendIndexes.forEach(index => {\n      swiper.$wrapperEl.append(renderSlide(slides[index], index));\n    });\n    prependIndexes.sort((a, b) => b - a).forEach(index => {\n      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));\n    });\n    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, `${offset}px`);\n    onRendered();\n  }\n\n  function appendSlide(slides) {\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.push(slides[i]);\n      }\n    } else {\n      swiper.virtual.slides.push(slides);\n    }\n\n    update(true);\n  }\n\n  function prependSlide(slides) {\n    const activeIndex = swiper.activeIndex;\n    let newActiveIndex = activeIndex + 1;\n    let numberOfNewSlides = 1;\n\n    if (Array.isArray(slides)) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n      }\n\n      newActiveIndex = activeIndex + slides.length;\n      numberOfNewSlides = slides.length;\n    } else {\n      swiper.virtual.slides.unshift(slides);\n    }\n\n    if (swiper.params.virtual.cache) {\n      const cache = swiper.virtual.cache;\n      const newCache = {};\n      Object.keys(cache).forEach(cachedIndex => {\n        const $cachedEl = cache[cachedIndex];\n        const cachedElIndex = $cachedEl.attr('data-swiper-slide-index');\n\n        if (cachedElIndex) {\n          $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\n        }\n\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;\n      });\n      swiper.virtual.cache = newCache;\n    }\n\n    update(true);\n    swiper.slideTo(newActiveIndex, 0);\n  }\n\n  function removeSlide(slidesIndexes) {\n    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\n    let activeIndex = swiper.activeIndex;\n\n    if (Array.isArray(slidesIndexes)) {\n      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\n\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes[i]];\n        }\n\n        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n    } else {\n      swiper.virtual.slides.splice(slidesIndexes, 1);\n\n      if (swiper.params.virtual.cache) {\n        delete swiper.virtual.cache[slidesIndexes];\n      }\n\n      if (slidesIndexes < activeIndex) activeIndex -= 1;\n      activeIndex = Math.max(activeIndex, 0);\n    }\n\n    update(true);\n    swiper.slideTo(activeIndex, 0);\n  }\n\n  function removeAllSlides() {\n    swiper.virtual.slides = [];\n\n    if (swiper.params.virtual.cache) {\n      swiper.virtual.cache = {};\n    }\n\n    update(true);\n    swiper.slideTo(0, 0);\n  }\n\n  on('beforeInit', () => {\n    if (!swiper.params.virtual.enabled) return;\n    swiper.virtual.slides = swiper.params.virtual.slides;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n\n    if (!swiper.params.initialSlide) {\n      update();\n    }\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.virtual.enabled) return;\n\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\n      clearTimeout(cssModeTimeout);\n      cssModeTimeout = setTimeout(() => {\n        update();\n      }, 100);\n    } else {\n      update();\n    }\n  });\n  on('init update resize', () => {\n    if (!swiper.params.virtual.enabled) return;\n\n    if (swiper.params.cssMode) {\n      setCSSProperty(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);\n    }\n  });\n  Object.assign(swiper.virtual, {\n    appendSlide,\n    prependSlide,\n    removeSlide,\n    removeAllSlides,\n    update\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/keyboard/keyboard.js\n/* eslint-disable consistent-return */\n\n\nfunction Keyboard(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const document = ssr_window_esm_getDocument();\n  const window = ssr_window_esm_getWindow();\n  swiper.keyboard = {\n    enabled: false\n  };\n  extendParams({\n    keyboard: {\n      enabled: false,\n      onlyInViewport: true,\n      pageUpDown: true\n    }\n  });\n\n  function handle(event) {\n    if (!swiper.enabled) return;\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    const kc = e.keyCode || e.charCode;\n    const pageUpDown = swiper.params.keyboard.pageUpDown;\n    const isPageUp = pageUpDown && kc === 33;\n    const isPageDown = pageUpDown && kc === 34;\n    const isArrowLeft = kc === 37;\n    const isArrowRight = kc === 39;\n    const isArrowUp = kc === 38;\n    const isArrowDown = kc === 40; // Directions locks\n\n    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n      return false;\n    }\n\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n      return undefined;\n    }\n\n    if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\n      return undefined;\n    }\n\n    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n      let inView = false; // Check that swiper should be inside of visible area of window\n\n      if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {\n        return undefined;\n      }\n\n      const $el = swiper.$el;\n      const swiperWidth = $el[0].clientWidth;\n      const swiperHeight = $el[0].clientHeight;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n      const swiperOffset = swiper.$el.offset();\n      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\n\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n\n        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n          inView = true;\n        }\n      }\n\n      if (!inView) return undefined;\n    }\n\n    if (swiper.isHorizontal()) {\n      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n\n      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n    } else {\n      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n\n      if (isPageDown || isArrowDown) swiper.slideNext();\n      if (isPageUp || isArrowUp) swiper.slidePrev();\n    }\n\n    emit('keyPress', kc);\n    return undefined;\n  }\n\n  function enable() {\n    if (swiper.keyboard.enabled) return;\n    dom(document).on('keydown', handle);\n    swiper.keyboard.enabled = true;\n  }\n\n  function disable() {\n    if (!swiper.keyboard.enabled) return;\n    dom(document).off('keydown', handle);\n    swiper.keyboard.enabled = false;\n  }\n\n  on('init', () => {\n    if (swiper.params.keyboard.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.keyboard.enabled) {\n      disable();\n    }\n  });\n  Object.assign(swiper.keyboard, {\n    enable,\n    disable\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/mousewheel/mousewheel.js\n/* eslint-disable consistent-return */\n\n\n\nfunction Mousewheel(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const window = ssr_window_esm_getWindow();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: 'container',\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = now();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n\n  function normalize(e) {\n    // Reasonable defaults\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0; // spinX, spinY\n\n    let pX = 0;\n    let pY = 0; // pixelX, pixelY\n    // Legacy\n\n    if ('detail' in e) {\n      sY = e.detail;\n    }\n\n    if ('wheelDelta' in e) {\n      sY = -e.wheelDelta / 120;\n    }\n\n    if ('wheelDeltaY' in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n\n    if ('wheelDeltaX' in e) {\n      sX = -e.wheelDeltaX / 120;\n    } // side scrolling on FF with DOMMouseScroll\n\n\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in e) {\n      pY = e.deltaY;\n    }\n\n    if ('deltaX' in e) {\n      pX = e.deltaX;\n    }\n\n    if (e.shiftKey && !pX) {\n      // if user scrolls with shift he wants horizontal scroll\n      pX = pY;\n      pY = 0;\n    }\n\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    } // Fall-back if spin cannot be determined\n\n\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n\n  function handleMouseEnter() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = true;\n  }\n\n  function handleMouseLeave() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = false;\n  }\n\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      // Prevent if delta of wheel scroll delta is below configured threshold\n      return false;\n    }\n\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      // Prevent if time between scrolls is below configured threshold\n      return false;\n    } // If the movement is NOT big enough and\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n    //   Don't go any further (avoid insignificant scroll movement).\n\n\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n      // Return false as a default\n      return true;\n    } // If user is scrolling towards the end:\n    //   If the slider hasn't hit the latest slide or\n    //   if the slider is a loop and\n    //   if the slider isn't moving right now:\n    //     Go to next slide and\n    //     emit a scroll event.\n    // Else (the user is scrolling towards the beginning) and\n    // if the slider hasn't hit the first slide or\n    // if the slider is a loop and\n    // if the slider isn't moving right now:\n    //   Go to prev slide and\n    //   emit a scroll event.\n\n\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit('scroll', newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit('scroll', newEvent.raw);\n    } // If you got here is because an animation has been triggered so store the current time\n\n\n    lastScrollTime = new window.Date().getTime(); // Return false as a default\n\n    return false;\n  }\n\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      // Return true to animate scroll on edges\n      return true;\n    }\n\n    return false;\n  }\n\n  function handle(event) {\n    let e = event;\n    let disableParentSwiper = true;\n    if (!swiper.enabled) return;\n    const params = swiper.params.mousewheel;\n\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = dom(swiper.params.mousewheel.eventsTarget);\n    }\n\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n\n    if (delta === 0) return true;\n    if (params.invert) delta = -delta; // Get the scroll positions\n\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:\n    //     the disableParentSwiper will be true.\n    // When loop is false:\n    //     if the scroll positions is not on edge,\n    //     then the disableParentSwiper will be true.\n    //     if the scroll on edge positions,\n    //     then the disableParentSwiper will be false.\n\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      // Register the new event in a variable which stores the relevant data\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event\n      }; // Keep the most recent events\n\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift(); // only store the last N events\n      }\n\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:\n      //   If direction has changed or\n      //   if the scroll is quicker than the previous one:\n      //     Animate the slider.\n      // Else (this is the first time the wheel is moved):\n      //     Animate the slider.\n\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      } // If it's time to release the scroll:\n      //   Return now so you don't hit the preventDefault.\n\n\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      // Freemode or scrollContainer:\n      // If we recently snapped after a momentum scroll, then ignore wheel events\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n      // or if it's a new scroll (larger delta or inverse sign as last event before\n      // an end-of-momentum snap).\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = undefined;\n\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n\n        if (swiper.params.freeMode.sticky) {\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\n          // 1. do all N events have decreasing or same (absolute value) delta?\n          // 2. did all N events arrive in the last M (M=500?) msecs?\n          // 3. does the earliest event have an (absolute value) delta that's\n          //    at least P (P=1?) larger than the most recent event's delta?\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n          // Snap immediately and ignore remaining wheel events in this scroll.\n          // See comment above for \"remaining wheel events in this scroll\" determination.\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n          clearTimeout(timeout);\n          timeout = undefined;\n\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\n            // to wait for more events. Snap ASAP on the next tick.\n            // Also, because there's some remaining momentum we'll bias the snap in the\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\n            // if it's already scrolled more than 20% in the current direction, keep going.\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = utils_nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 0); // no delay; move on next tick\n          }\n\n          if (!timeout) {\n            // if we get here, then we haven't detected the end of a momentum scroll, so\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\n            // for 500ms.\n            timeout = utils_nextTick(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 500);\n          }\n        } // Emit event\n\n\n        if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay\n\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions\n\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n      }\n    }\n\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    return false;\n  }\n\n  function events(method) {\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = dom(swiper.params.mousewheel.eventsTarget);\n    }\n\n    target[method]('mouseenter', handleMouseEnter);\n    target[method]('mouseleave', handleMouseLeave);\n    target[method]('wheel', handle);\n  }\n\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener('wheel', handle);\n      return true;\n    }\n\n    if (swiper.mousewheel.enabled) return false;\n    events('on');\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n\n    if (!swiper.mousewheel.enabled) return false;\n    events('off');\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n\n  on('init', () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n\n    if (swiper.params.mousewheel.enabled) enable();\n  });\n  on('destroy', () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n\n    if (swiper.mousewheel.enabled) disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/shared/create-element-if-not-defined.js\n\nfunction create_element_if_not_defined_createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  const document = getDocument();\n\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach(key => {\n      if (!params[key] && params.auto === true) {\n        let element = swiper.$el.children(`.${checkProps[key]}`)[0];\n\n        if (!element) {\n          element = document.createElement('div');\n          element.className = checkProps[key];\n          swiper.$el.append(element);\n        }\n\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n\n  return params;\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/navigation/navigation.js\n\n\nfunction Navigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  extendParams({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: 'swiper-button-disabled',\n      hiddenClass: 'swiper-button-hidden',\n      lockClass: 'swiper-button-lock',\n      navigationDisabledClass: 'swiper-navigation-disabled'\n    }\n  });\n  swiper.navigation = {\n    nextEl: null,\n    $nextEl: null,\n    prevEl: null,\n    $prevEl: null\n  };\n\n  function getEl(el) {\n    let $el;\n\n    if (el) {\n      $el = $(el);\n\n      if (swiper.params.uniqueNavElements && typeof el === 'string' && $el.length > 1 && swiper.$el.find(el).length === 1) {\n        $el = swiper.$el.find(el);\n      }\n    }\n\n    return $el;\n  }\n\n  function toggleEl($el, disabled) {\n    const params = swiper.params.navigation;\n\n    if ($el && $el.length > 0) {\n      $el[disabled ? 'addClass' : 'removeClass'](params.disabledClass);\n      if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;\n\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n      }\n    }\n  }\n\n  function update() {\n    // Update Navigation Buttons\n    if (swiper.params.loop) return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    toggleEl($prevEl, swiper.isBeginning && !swiper.params.rewind);\n    toggleEl($nextEl, swiper.isEnd && !swiper.params.rewind);\n  }\n\n  function onPrevClick(e) {\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slidePrev();\n    emit('navigationPrev');\n  }\n\n  function onNextClick(e) {\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slideNext();\n    emit('navigationNext');\n  }\n\n  function init() {\n    const params = swiper.params.navigation;\n    swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n      nextEl: 'swiper-button-next',\n      prevEl: 'swiper-button-prev'\n    });\n    if (!(params.nextEl || params.prevEl)) return;\n    const $nextEl = getEl(params.nextEl);\n    const $prevEl = getEl(params.prevEl);\n\n    if ($nextEl && $nextEl.length > 0) {\n      $nextEl.on('click', onNextClick);\n    }\n\n    if ($prevEl && $prevEl.length > 0) {\n      $prevEl.on('click', onPrevClick);\n    }\n\n    Object.assign(swiper.navigation, {\n      $nextEl,\n      nextEl: $nextEl && $nextEl[0],\n      $prevEl,\n      prevEl: $prevEl && $prevEl[0]\n    });\n\n    if (!swiper.enabled) {\n      if ($nextEl) $nextEl.addClass(params.lockClass);\n      if ($prevEl) $prevEl.addClass(params.lockClass);\n    }\n  }\n\n  function destroy() {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($nextEl && $nextEl.length) {\n      $nextEl.off('click', onNextClick);\n      $nextEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n\n    if ($prevEl && $prevEl.length) {\n      $prevEl.off('click', onPrevClick);\n      $prevEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n  }\n\n  on('init', () => {\n    if (swiper.params.navigation.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      update();\n    }\n  });\n  on('toEdge fromEdge lock unlock', () => {\n    update();\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($nextEl) {\n      $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n    }\n\n    if ($prevEl) {\n      $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);\n    }\n  });\n  on('click', (_s, e) => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    const targetEl = e.target;\n\n    if (swiper.params.navigation.hideOnClick && !$(targetEl).is($prevEl) && !$(targetEl).is($nextEl)) {\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n      let isHidden;\n\n      if ($nextEl) {\n        isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n      } else if ($prevEl) {\n        isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n      }\n\n      if (isHidden === true) {\n        emit('navigationShow');\n      } else {\n        emit('navigationHide');\n      }\n\n      if ($nextEl) {\n        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n\n      if ($prevEl) {\n        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n    }\n  });\n\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.navigation.navigationDisabledClass);\n    init();\n    update();\n  };\n\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.navigation.navigationDisabledClass);\n    destroy();\n  };\n\n  Object.assign(swiper.navigation, {\n    enable,\n    disable,\n    update,\n    init,\n    destroy\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/pagination/pagination.js\n\n\n\nfunction Pagination(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const pfx = 'swiper-pagination';\n  extendParams({\n    pagination: {\n      el: null,\n      bulletElement: 'span',\n      clickable: false,\n      hideOnClick: false,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: false,\n      type: 'bullets',\n      // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n      dynamicBullets: false,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: number => number,\n      formatFractionTotal: number => number,\n      bulletClass: `${pfx}-bullet`,\n      bulletActiveClass: `${pfx}-bullet-active`,\n      modifierClass: `${pfx}-`,\n      currentClass: `${pfx}-current`,\n      totalClass: `${pfx}-total`,\n      hiddenClass: `${pfx}-hidden`,\n      progressbarFillClass: `${pfx}-progressbar-fill`,\n      progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n      clickableClass: `${pfx}-clickable`,\n      lockClass: `${pfx}-lock`,\n      horizontalClass: `${pfx}-horizontal`,\n      verticalClass: `${pfx}-vertical`,\n      paginationDisabledClass: `${pfx}-disabled`\n    }\n  });\n  swiper.pagination = {\n    el: null,\n    $el: null,\n    bullets: []\n  };\n  let bulletSize;\n  let dynamicBulletIndex = 0;\n\n  function isPaginationDisabled() {\n    return !swiper.params.pagination.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0;\n  }\n\n  function setSideBullets($bulletEl, position) {\n    const {\n      bulletActiveClass\n    } = swiper.params.pagination;\n    $bulletEl[position]().addClass(`${bulletActiveClass}-${position}`)[position]().addClass(`${bulletActiveClass}-${position}-${position}`);\n  }\n\n  function update() {\n    // Render || Update Pagination bullets/items\n    const rtl = swiper.rtl;\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el; // Current/Total\n\n    let current;\n    const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n    if (swiper.params.loop) {\n      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n\n      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {\n        current -= slidesLength - swiper.loopedSlides * 2;\n      }\n\n      if (current > total - 1) current -= total;\n      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;\n    } else if (typeof swiper.snapIndex !== 'undefined') {\n      current = swiper.snapIndex;\n    } else {\n      current = swiper.activeIndex || 0;\n    } // Types\n\n\n    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n      const bullets = swiper.pagination.bullets;\n      let firstIndex;\n      let lastIndex;\n      let midIndex;\n\n      if (params.dynamicBullets) {\n        bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);\n        $el.css(swiper.isHorizontal() ? 'width' : 'height', `${bulletSize * (params.dynamicMainBullets + 4)}px`);\n\n        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {\n          dynamicBulletIndex += current - (swiper.previousIndex - swiper.loopedSlides || 0);\n\n          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n            dynamicBulletIndex = params.dynamicMainBullets - 1;\n          } else if (dynamicBulletIndex < 0) {\n            dynamicBulletIndex = 0;\n          }\n        }\n\n        firstIndex = Math.max(current - dynamicBulletIndex, 0);\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n        midIndex = (lastIndex + firstIndex) / 2;\n      }\n\n      bullets.removeClass(['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`).join(' '));\n\n      if ($el.length > 1) {\n        bullets.each(bullet => {\n          const $bullet = $(bullet);\n          const bulletIndex = $bullet.index();\n\n          if (bulletIndex === current) {\n            $bullet.addClass(params.bulletActiveClass);\n          }\n\n          if (params.dynamicBullets) {\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n              $bullet.addClass(`${params.bulletActiveClass}-main`);\n            }\n\n            if (bulletIndex === firstIndex) {\n              setSideBullets($bullet, 'prev');\n            }\n\n            if (bulletIndex === lastIndex) {\n              setSideBullets($bullet, 'next');\n            }\n          }\n        });\n      } else {\n        const $bullet = bullets.eq(current);\n        const bulletIndex = $bullet.index();\n        $bullet.addClass(params.bulletActiveClass);\n\n        if (params.dynamicBullets) {\n          const $firstDisplayedBullet = bullets.eq(firstIndex);\n          const $lastDisplayedBullet = bullets.eq(lastIndex);\n\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\n            bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);\n          }\n\n          if (swiper.params.loop) {\n            if (bulletIndex >= bullets.length) {\n              for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {\n                bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);\n              }\n\n              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);\n            } else {\n              setSideBullets($firstDisplayedBullet, 'prev');\n              setSideBullets($lastDisplayedBullet, 'next');\n            }\n          } else {\n            setSideBullets($firstDisplayedBullet, 'prev');\n            setSideBullets($lastDisplayedBullet, 'next');\n          }\n        }\n      }\n\n      if (params.dynamicBullets) {\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n        const offsetProp = rtl ? 'right' : 'left';\n        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);\n      }\n    }\n\n    if (params.type === 'fraction') {\n      $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));\n      $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));\n    }\n\n    if (params.type === 'progressbar') {\n      let progressbarDirection;\n\n      if (params.progressbarOpposite) {\n        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\n      } else {\n        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\n      }\n\n      const scale = (current + 1) / total;\n      let scaleX = 1;\n      let scaleY = 1;\n\n      if (progressbarDirection === 'horizontal') {\n        scaleX = scale;\n      } else {\n        scaleY = scale;\n      }\n\n      $el.find(classesToSelector(params.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);\n    }\n\n    if (params.type === 'custom' && params.renderCustom) {\n      $el.html(params.renderCustom(swiper, current + 1, total));\n      emit('paginationRender', $el[0]);\n    } else {\n      emit('paginationUpdate', $el[0]);\n    }\n\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n    }\n  }\n\n  function render() {\n    // Render Container\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    let paginationHTML = '';\n\n    if (params.type === 'bullets') {\n      let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.loop && numberOfBullets > slidesLength) {\n        numberOfBullets = slidesLength;\n      }\n\n      for (let i = 0; i < numberOfBullets; i += 1) {\n        if (params.renderBullet) {\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n        } else {\n          paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n        }\n      }\n\n      $el.html(paginationHTML);\n      swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));\n    }\n\n    if (params.type === 'fraction') {\n      if (params.renderFraction) {\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n      } else {\n        paginationHTML = `<span class=\"${params.currentClass}\"></span>` + ' / ' + `<span class=\"${params.totalClass}\"></span>`;\n      }\n\n      $el.html(paginationHTML);\n    }\n\n    if (params.type === 'progressbar') {\n      if (params.renderProgressbar) {\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n      } else {\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n      }\n\n      $el.html(paginationHTML);\n    }\n\n    if (params.type !== 'custom') {\n      emit('paginationRender', swiper.pagination.$el[0]);\n    }\n  }\n\n  function init() {\n    swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n      el: 'swiper-pagination'\n    });\n    const params = swiper.params.pagination;\n    if (!params.el) return;\n    let $el = $(params.el);\n    if ($el.length === 0) return;\n\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {\n      $el = swiper.$el.find(params.el); // check if it belongs to another nested Swiper\n\n      if ($el.length > 1) {\n        $el = $el.filter(el => {\n          if ($(el).parents('.swiper')[0] !== swiper.el) return false;\n          return true;\n        });\n      }\n    }\n\n    if (params.type === 'bullets' && params.clickable) {\n      $el.addClass(params.clickableClass);\n    }\n\n    $el.addClass(params.modifierClass + params.type);\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n\n    if (params.type === 'bullets' && params.dynamicBullets) {\n      $el.addClass(`${params.modifierClass}${params.type}-dynamic`);\n      dynamicBulletIndex = 0;\n\n      if (params.dynamicMainBullets < 1) {\n        params.dynamicMainBullets = 1;\n      }\n    }\n\n    if (params.type === 'progressbar' && params.progressbarOpposite) {\n      $el.addClass(params.progressbarOppositeClass);\n    }\n\n    if (params.clickable) {\n      $el.on('click', classesToSelector(params.bulletClass), function onClick(e) {\n        e.preventDefault();\n        let index = $(this).index() * swiper.params.slidesPerGroup;\n        if (swiper.params.loop) index += swiper.loopedSlides;\n        swiper.slideTo(index);\n      });\n    }\n\n    Object.assign(swiper.pagination, {\n      $el,\n      el: $el[0]\n    });\n\n    if (!swiper.enabled) {\n      $el.addClass(params.lockClass);\n    }\n  }\n\n  function destroy() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const $el = swiper.pagination.$el;\n    $el.removeClass(params.hiddenClass);\n    $el.removeClass(params.modifierClass + params.type);\n    $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    if (swiper.pagination.bullets && swiper.pagination.bullets.removeClass) swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n\n    if (params.clickable) {\n      $el.off('click', classesToSelector(params.bulletClass));\n    }\n  }\n\n  on('init', () => {\n    if (swiper.params.pagination.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      render();\n      update();\n    }\n  });\n  on('activeIndexChange', () => {\n    if (swiper.params.loop) {\n      update();\n    } else if (typeof swiper.snapIndex === 'undefined') {\n      update();\n    }\n  });\n  on('snapIndexChange', () => {\n    if (!swiper.params.loop) {\n      update();\n    }\n  });\n  on('slidesLengthChange', () => {\n    if (swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on('snapGridLengthChange', () => {\n    if (!swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    const {\n      $el\n    } = swiper.pagination;\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);\n    }\n  });\n  on('lock unlock', () => {\n    update();\n  });\n  on('click', (_s, e) => {\n    const targetEl = e.target;\n    const {\n      $el\n    } = swiper.pagination;\n\n    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && $el && $el.length > 0 && !$(targetEl).hasClass(swiper.params.pagination.bulletClass)) {\n      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n      const isHidden = $el.hasClass(swiper.params.pagination.hiddenClass);\n\n      if (isHidden === true) {\n        emit('paginationShow');\n      } else {\n        emit('paginationHide');\n      }\n\n      $el.toggleClass(swiper.params.pagination.hiddenClass);\n    }\n  });\n\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n    }\n\n    init();\n    render();\n    update();\n  };\n\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n    }\n\n    destroy();\n  };\n\n  Object.assign(swiper.pagination, {\n    enable,\n    disable,\n    render,\n    update,\n    init,\n    destroy\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/scrollbar/scrollbar.js\n\n\n\n\nfunction Scrollbar(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const document = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: 'auto',\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: 'swiper-scrollbar-lock',\n      dragClass: 'swiper-scrollbar-drag',\n      scrollbarDisabledClass: 'swiper-scrollbar-disabled',\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null,\n    $el: null,\n    $dragEl: null\n  };\n\n  function setTranslate() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl,\n      progress\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n\n    if (rtl) {\n      newPos = -newPos;\n\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n\n    if (swiper.isHorizontal()) {\n      $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);\n      $dragEl[0].style.width = `${newSize}px`;\n    } else {\n      $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);\n      $dragEl[0].style.height = `${newSize}px`;\n    }\n\n    if (params.hide) {\n      clearTimeout(timeout);\n      $el[0].style.opacity = 1;\n      timeout = setTimeout(() => {\n        $el[0].style.opacity = 0;\n        $el.transition(400);\n      }, 1000);\n    }\n  }\n\n  function setTransition(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    swiper.scrollbar.$dragEl.transition(duration);\n  }\n\n  function updateSize() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    $dragEl[0].style.width = '';\n    $dragEl[0].style.height = '';\n    trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n\n    if (swiper.params.scrollbar.dragSize === 'auto') {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n\n    if (swiper.isHorizontal()) {\n      $dragEl[0].style.width = `${dragSize}px`;\n    } else {\n      $dragEl[0].style.height = `${dragSize}px`;\n    }\n\n    if (divider >= 1) {\n      $el[0].style.display = 'none';\n    } else {\n      $el[0].style.display = '';\n    }\n\n    if (swiper.params.scrollbar.hide) {\n      $el[0].style.opacity = 0;\n    }\n\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.$el[swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);\n    }\n  }\n\n  function getPointerPosition(e) {\n    if (swiper.isHorizontal()) {\n      return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;\n    }\n\n    return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;\n  }\n\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    $wrapperEl.transition(100);\n    $dragEl.transition(100);\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    $el.transition(0);\n\n    if (params.hide) {\n      $el.css('opacity', 1);\n    }\n\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', 'none');\n    }\n\n    emit('scrollbarDragStart', e);\n  }\n\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    if (!isTouched) return;\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    setDragPosition(e);\n    $wrapperEl.transition(0);\n    $el.transition(0);\n    $dragEl.transition(0);\n    emit('scrollbarDragMove', e);\n  }\n\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    if (!isTouched) return;\n    isTouched = false;\n\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', '');\n      $wrapperEl.transition('');\n    }\n\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        $el.css('opacity', 0);\n        $el.transition(400);\n      }, 1000);\n    }\n\n    emit('scrollbarDragEnd', e);\n\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n\n  function events(method) {\n    const {\n      scrollbar,\n      touchEventsTouch,\n      touchEventsDesktop,\n      params,\n      support\n    } = swiper;\n    const $el = scrollbar.$el;\n    if (!$el) return;\n    const target = $el[0];\n    const activeListener = support.passiveListener && params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = support.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target) return;\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n\n    if (!support.touch) {\n      target[eventMethod](touchEventsDesktop.start, onDragStart, activeListener);\n      document[eventMethod](touchEventsDesktop.move, onDragMove, activeListener);\n      document[eventMethod](touchEventsDesktop.end, onDragEnd, passiveListener);\n    } else {\n      target[eventMethod](touchEventsTouch.start, onDragStart, activeListener);\n      target[eventMethod](touchEventsTouch.move, onDragMove, activeListener);\n      target[eventMethod](touchEventsTouch.end, onDragEnd, passiveListener);\n    }\n  }\n\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('on');\n  }\n\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('off');\n  }\n\n  function init() {\n    const {\n      scrollbar,\n      $el: $swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: 'swiper-scrollbar'\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el) return;\n    let $el = $(params.el);\n\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n      $el = $swiperEl.find(params.el);\n    }\n\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);\n\n    if ($dragEl.length === 0) {\n      $dragEl = $(`<div class=\"${swiper.params.scrollbar.dragClass}\"></div>`);\n      $el.append($dragEl);\n    }\n\n    Object.assign(scrollbar, {\n      $el,\n      el: $el[0],\n      $dragEl,\n      dragEl: $dragEl[0]\n    });\n\n    if (params.draggable) {\n      enableDraggable();\n    }\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n    }\n  }\n\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const $el = swiper.scrollbar.$el;\n\n    if ($el) {\n      $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    }\n\n    disableDraggable();\n  }\n\n  on('init', () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      updateSize();\n      setTranslate();\n    }\n  });\n  on('update resize observerUpdate lock unlock', () => {\n    updateSize();\n  });\n  on('setTranslate', () => {\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    setTransition(duration);\n  });\n  on('enable disable', () => {\n    const {\n      $el\n    } = swiper.scrollbar;\n\n    if ($el) {\n      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n\n    init();\n    updateSize();\n    setTranslate();\n  };\n\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n\n    destroy();\n  };\n\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize,\n    setTranslate,\n    init,\n    destroy\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/parallax/parallax.js\n\nfunction Parallax(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    parallax: {\n      enabled: false\n    }\n  });\n\n  const setTransform = (el, progress) => {\n    const {\n      rtl\n    } = swiper;\n    const $el = $(el);\n    const rtlFactor = rtl ? -1 : 1;\n    const p = $el.attr('data-swiper-parallax') || '0';\n    let x = $el.attr('data-swiper-parallax-x');\n    let y = $el.attr('data-swiper-parallax-y');\n    const scale = $el.attr('data-swiper-parallax-scale');\n    const opacity = $el.attr('data-swiper-parallax-opacity');\n\n    if (x || y) {\n      x = x || '0';\n      y = y || '0';\n    } else if (swiper.isHorizontal()) {\n      x = p;\n      y = '0';\n    } else {\n      y = p;\n      x = '0';\n    }\n\n    if (x.indexOf('%') >= 0) {\n      x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n    } else {\n      x = `${x * progress * rtlFactor}px`;\n    }\n\n    if (y.indexOf('%') >= 0) {\n      y = `${parseInt(y, 10) * progress}%`;\n    } else {\n      y = `${y * progress}px`;\n    }\n\n    if (typeof opacity !== 'undefined' && opacity !== null) {\n      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n      $el[0].style.opacity = currentOpacity;\n    }\n\n    if (typeof scale === 'undefined' || scale === null) {\n      $el.transform(`translate3d(${x}, ${y}, 0px)`);\n    } else {\n      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n      $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);\n    }\n  };\n\n  const setTranslate = () => {\n    const {\n      $el,\n      slides,\n      progress,\n      snapGrid\n    } = swiper;\n    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n      setTransform(el, progress);\n    });\n    slides.each((slideEl, slideIndex) => {\n      let slideProgress = slideEl.progress;\n\n      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\n        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n      }\n\n      slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n      $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {\n        setTransform(el, slideProgress);\n      });\n    });\n  };\n\n  const setTransition = function (duration) {\n    if (duration === void 0) {\n      duration = swiper.params.speed;\n    }\n\n    const {\n      $el\n    } = swiper;\n    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(parallaxEl => {\n      const $parallaxEl = $(parallaxEl);\n      let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;\n      if (duration === 0) parallaxDuration = 0;\n      $parallaxEl.transition(parallaxDuration);\n    });\n  };\n\n  on('beforeInit', () => {\n    if (!swiper.params.parallax.enabled) return;\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n  });\n  on('init', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTransition', (_swiper, duration) => {\n    if (!swiper.params.parallax.enabled) return;\n    setTransition(duration);\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/zoom/zoom.js\n\n\n\nfunction Zoom(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  extendParams({\n    zoom: {\n      enabled: false,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: true,\n      containerClass: 'swiper-zoom-container',\n      zoomedSlideClass: 'swiper-slide-zoomed'\n    }\n  });\n  swiper.zoom = {\n    enabled: false\n  };\n  let currentScale = 1;\n  let isScaling = false;\n  let gesturesEnabled;\n  let fakeGestureTouched;\n  let fakeGestureMoved;\n  const gesture = {\n    $slideEl: undefined,\n    slideWidth: undefined,\n    slideHeight: undefined,\n    $imageEl: undefined,\n    $imageWrapEl: undefined,\n    maxRatio: 3\n  };\n  const image = {\n    isTouched: undefined,\n    isMoved: undefined,\n    currentX: undefined,\n    currentY: undefined,\n    minX: undefined,\n    minY: undefined,\n    maxX: undefined,\n    maxY: undefined,\n    width: undefined,\n    height: undefined,\n    startX: undefined,\n    startY: undefined,\n    touchesStart: {},\n    touchesCurrent: {}\n  };\n  const velocity = {\n    x: undefined,\n    y: undefined,\n    prevPositionX: undefined,\n    prevPositionY: undefined,\n    prevTime: undefined\n  };\n  let scale = 1;\n  Object.defineProperty(swiper.zoom, 'scale', {\n    get() {\n      return scale;\n    },\n\n    set(value) {\n      if (scale !== value) {\n        const imageEl = gesture.$imageEl ? gesture.$imageEl[0] : undefined;\n        const slideEl = gesture.$slideEl ? gesture.$slideEl[0] : undefined;\n        emit('zoomChange', value, imageEl, slideEl);\n      }\n\n      scale = value;\n    }\n\n  });\n\n  function getDistanceBetweenTouches(e) {\n    if (e.targetTouches.length < 2) return 1;\n    const x1 = e.targetTouches[0].pageX;\n    const y1 = e.targetTouches[0].pageY;\n    const x2 = e.targetTouches[1].pageX;\n    const y2 = e.targetTouches[1].pageY;\n    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n    return distance;\n  } // Events\n\n\n  function onGestureStart(e) {\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    fakeGestureTouched = false;\n    fakeGestureMoved = false;\n\n    if (!support.gestures) {\n      if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {\n        return;\n      }\n\n      fakeGestureTouched = true;\n      gesture.scaleStart = getDistanceBetweenTouches(e);\n    }\n\n    if (!gesture.$slideEl || !gesture.$slideEl.length) {\n      gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);\n      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n      if (gesture.$imageWrapEl.length === 0) {\n        gesture.$imageEl = undefined;\n        return;\n      }\n    }\n\n    if (gesture.$imageEl) {\n      gesture.$imageEl.transition(0);\n    }\n\n    isScaling = true;\n  }\n\n  function onGestureChange(e) {\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n\n    if (!support.gestures) {\n      if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {\n        return;\n      }\n\n      fakeGestureMoved = true;\n      gesture.scaleMove = getDistanceBetweenTouches(e);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n      if (e.type === 'gesturechange') onGestureStart(e);\n      return;\n    }\n\n    if (support.gestures) {\n      zoom.scale = e.scale * currentScale;\n    } else {\n      zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n    }\n\n    if (zoom.scale > gesture.maxRatio) {\n      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n    }\n\n    if (zoom.scale < params.minRatio) {\n      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n    }\n\n    gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n\n  function onGestureEnd(e) {\n    const device = swiper.device;\n    const support = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n\n    if (!support.gestures) {\n      if (!fakeGestureTouched || !fakeGestureMoved) {\n        return;\n      }\n\n      if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {\n        return;\n      }\n\n      fakeGestureTouched = false;\n      fakeGestureMoved = false;\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n    gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    currentScale = zoom.scale;\n    isScaling = false;\n    if (zoom.scale === 1) gesture.$slideEl = undefined;\n  }\n\n  function onTouchStart(e) {\n    const device = swiper.device;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    if (image.isTouched) return;\n    if (device.android && e.cancelable) e.preventDefault();\n    image.isTouched = true;\n    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  }\n\n  function onTouchMove(e) {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    swiper.allowClick = false;\n    if (!image.isTouched || !gesture.$slideEl) return;\n\n    if (!image.isMoved) {\n      image.width = gesture.$imageEl[0].offsetWidth;\n      image.height = gesture.$imageEl[0].offsetHeight;\n      image.startX = getTranslate(gesture.$imageWrapEl[0], 'x') || 0;\n      image.startY = getTranslate(gesture.$imageWrapEl[0], 'y') || 0;\n      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n      gesture.$imageWrapEl.transition(0);\n    } // Define if we need image drag\n\n\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n    if (!image.isMoved && !isScaling) {\n      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n        image.isTouched = false;\n        return;\n      }\n\n      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n        image.isTouched = false;\n        return;\n      }\n    }\n\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n\n    e.stopPropagation();\n    image.isMoved = true;\n    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;\n    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;\n\n    if (image.currentX < image.minX) {\n      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n    }\n\n    if (image.currentX > image.maxX) {\n      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n    }\n\n    if (image.currentY < image.minY) {\n      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n    }\n\n    if (image.currentY > image.maxY) {\n      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n    } // Velocity\n\n\n    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n    if (!velocity.prevTime) velocity.prevTime = Date.now();\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n    velocity.prevPositionX = image.touchesCurrent.x;\n    velocity.prevPositionY = image.touchesCurrent.y;\n    velocity.prevTime = Date.now();\n    gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n\n  function onTouchEnd() {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n\n    if (!image.isTouched || !image.isMoved) {\n      image.isTouched = false;\n      image.isMoved = false;\n      return;\n    }\n\n    image.isTouched = false;\n    image.isMoved = false;\n    let momentumDurationX = 300;\n    let momentumDurationY = 300;\n    const momentumDistanceX = velocity.x * momentumDurationX;\n    const newPositionX = image.currentX + momentumDistanceX;\n    const momentumDistanceY = velocity.y * momentumDurationY;\n    const newPositionY = image.currentY + momentumDistanceY; // Fix duration\n\n    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n    image.currentX = newPositionX;\n    image.currentY = newPositionY; // Define if we need image drag\n\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n    gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n\n  function onTransitionEnd() {\n    const zoom = swiper.zoom;\n\n    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n      if (gesture.$imageEl) {\n        gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');\n      }\n\n      if (gesture.$imageWrapEl) {\n        gesture.$imageWrapEl.transform('translate3d(0,0,0)');\n      }\n\n      zoom.scale = 1;\n      currentScale = 1;\n      gesture.$slideEl = undefined;\n      gesture.$imageEl = undefined;\n      gesture.$imageWrapEl = undefined;\n    }\n  }\n\n  function zoomIn(e) {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n\n    if (!gesture.$slideEl) {\n      if (e && e.target) {\n        gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);\n      }\n\n      if (!gesture.$slideEl) {\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n        } else {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n        }\n      }\n\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.touchAction = 'none';\n    }\n\n    gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);\n    let touchX;\n    let touchY;\n    let offsetX;\n    let offsetY;\n    let diffX;\n    let diffY;\n    let translateX;\n    let translateY;\n    let imageWidth;\n    let imageHeight;\n    let scaledWidth;\n    let scaledHeight;\n    let translateMinX;\n    let translateMinY;\n    let translateMaxX;\n    let translateMaxY;\n    let slideWidth;\n    let slideHeight;\n\n    if (typeof image.touchesStart.x === 'undefined' && e) {\n      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;\n      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;\n    } else {\n      touchX = image.touchesStart.x;\n      touchY = image.touchesStart.y;\n    }\n\n    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n    currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n\n    if (e) {\n      slideWidth = gesture.$slideEl[0].offsetWidth;\n      slideHeight = gesture.$slideEl[0].offsetHeight;\n      offsetX = gesture.$slideEl.offset().left + window.scrollX;\n      offsetY = gesture.$slideEl.offset().top + window.scrollY;\n      diffX = offsetX + slideWidth / 2 - touchX;\n      diffY = offsetY + slideHeight / 2 - touchY;\n      imageWidth = gesture.$imageEl[0].offsetWidth;\n      imageHeight = gesture.$imageEl[0].offsetHeight;\n      scaledWidth = imageWidth * zoom.scale;\n      scaledHeight = imageHeight * zoom.scale;\n      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n      translateMaxX = -translateMinX;\n      translateMaxY = -translateMinY;\n      translateX = diffX * zoom.scale;\n      translateY = diffY * zoom.scale;\n\n      if (translateX < translateMinX) {\n        translateX = translateMinX;\n      }\n\n      if (translateX > translateMaxX) {\n        translateX = translateMaxX;\n      }\n\n      if (translateY < translateMinY) {\n        translateY = translateMinY;\n      }\n\n      if (translateY > translateMaxY) {\n        translateY = translateMaxY;\n      }\n    } else {\n      translateX = 0;\n      translateY = 0;\n    }\n\n    gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);\n    gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n\n  function zoomOut() {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n\n    if (!gesture.$slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n      } else {\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      }\n\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;\n\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = '';\n      swiper.wrapperEl.style.touchAction = '';\n    }\n\n    zoom.scale = 1;\n    currentScale = 1;\n    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');\n    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');\n    gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);\n    gesture.$slideEl = undefined;\n  } // Toggle Zoom\n\n\n  function zoomToggle(e) {\n    const zoom = swiper.zoom;\n\n    if (zoom.scale && zoom.scale !== 1) {\n      // Zoom Out\n      zoomOut();\n    } else {\n      // Zoom In\n      zoomIn(e);\n    }\n  }\n\n  function getListeners() {\n    const support = swiper.support;\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    const activeListenerWithCapture = support.passiveListener ? {\n      passive: false,\n      capture: true\n    } : true;\n    return {\n      passiveListener,\n      activeListenerWithCapture\n    };\n  }\n\n  function getSlideSelector() {\n    return `.${swiper.params.slideClass}`;\n  }\n\n  function toggleGestures(method) {\n    const {\n      passiveListener\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    swiper.$wrapperEl[method]('gesturestart', slideSelector, onGestureStart, passiveListener);\n    swiper.$wrapperEl[method]('gesturechange', slideSelector, onGestureChange, passiveListener);\n    swiper.$wrapperEl[method]('gestureend', slideSelector, onGestureEnd, passiveListener);\n  }\n\n  function enableGestures() {\n    if (gesturesEnabled) return;\n    gesturesEnabled = true;\n    toggleGestures('on');\n  }\n\n  function disableGestures() {\n    if (!gesturesEnabled) return;\n    gesturesEnabled = false;\n    toggleGestures('off');\n  } // Attach/Detach Events\n\n\n  function enable() {\n    const zoom = swiper.zoom;\n    if (zoom.enabled) return;\n    zoom.enabled = true;\n    const support = swiper.support;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector(); // Scale image\n\n    if (support.gestures) {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    } // Move image\n\n\n    swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n  }\n\n  function disable() {\n    const zoom = swiper.zoom;\n    if (!zoom.enabled) return;\n    const support = swiper.support;\n    zoom.enabled = false;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector(); // Scale image\n\n    if (support.gestures) {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    } // Move image\n\n\n    swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);\n  }\n\n  on('init', () => {\n    if (swiper.params.zoom.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    disable();\n  });\n  on('touchStart', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchStart(e);\n  });\n  on('touchEnd', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchEnd(e);\n  });\n  on('doubleTap', (_s, e) => {\n    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n      zoomToggle(e);\n    }\n  });\n  on('transitionEnd', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n      onTransitionEnd();\n    }\n  });\n  on('slideChange', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n      onTransitionEnd();\n    }\n  });\n  Object.assign(swiper.zoom, {\n    enable,\n    disable,\n    in: zoomIn,\n    out: zoomOut,\n    toggle: zoomToggle\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/lazy/lazy.js\n\n\nfunction Lazy(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  extendParams({\n    lazy: {\n      checkInView: false,\n      enabled: false,\n      loadPrevNext: false,\n      loadPrevNextAmount: 1,\n      loadOnTransitionStart: false,\n      scrollingElement: '',\n      elementClass: 'swiper-lazy',\n      loadingClass: 'swiper-lazy-loading',\n      loadedClass: 'swiper-lazy-loaded',\n      preloaderClass: 'swiper-lazy-preloader'\n    }\n  });\n  swiper.lazy = {};\n  let scrollHandlerAttached = false;\n  let initialImageLoaded = false;\n\n  function loadInSlide(index, loadInDuplicate) {\n    if (loadInDuplicate === void 0) {\n      loadInDuplicate = true;\n    }\n\n    const params = swiper.params.lazy;\n    if (typeof index === 'undefined') return;\n    if (swiper.slides.length === 0) return;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    const $slideEl = isVirtual ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${index}\"]`) : swiper.slides.eq(index);\n    const $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);\n\n    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {\n      $images.push($slideEl[0]);\n    }\n\n    if ($images.length === 0) return;\n    $images.each(imageEl => {\n      const $imageEl = $(imageEl);\n      $imageEl.addClass(params.loadingClass);\n      const background = $imageEl.attr('data-background');\n      const src = $imageEl.attr('data-src');\n      const srcset = $imageEl.attr('data-srcset');\n      const sizes = $imageEl.attr('data-sizes');\n      const $pictureEl = $imageEl.parent('picture');\n      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, () => {\n        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;\n\n        if (background) {\n          $imageEl.css('background-image', `url(\"${background}\")`);\n          $imageEl.removeAttr('data-background');\n        } else {\n          if (srcset) {\n            $imageEl.attr('srcset', srcset);\n            $imageEl.removeAttr('data-srcset');\n          }\n\n          if (sizes) {\n            $imageEl.attr('sizes', sizes);\n            $imageEl.removeAttr('data-sizes');\n          }\n\n          if ($pictureEl.length) {\n            $pictureEl.children('source').each(sourceEl => {\n              const $source = $(sourceEl);\n\n              if ($source.attr('data-srcset')) {\n                $source.attr('srcset', $source.attr('data-srcset'));\n                $source.removeAttr('data-srcset');\n              }\n            });\n          }\n\n          if (src) {\n            $imageEl.attr('src', src);\n            $imageEl.removeAttr('data-src');\n          }\n        }\n\n        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);\n        $slideEl.find(`.${params.preloaderClass}`).remove();\n\n        if (swiper.params.loop && loadInDuplicate) {\n          const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');\n\n          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {\n            const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index=\"${slideOriginalIndex}\"]:not(.${swiper.params.slideDuplicateClass})`);\n            loadInSlide(originalSlide.index(), false);\n          } else {\n            const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index=\"${slideOriginalIndex}\"]`);\n            loadInSlide(duplicatedSlide.index(), false);\n          }\n        }\n\n        emit('lazyImageReady', $slideEl[0], $imageEl[0]);\n\n        if (swiper.params.autoHeight) {\n          swiper.updateAutoHeight();\n        }\n      });\n      emit('lazyImageLoad', $slideEl[0], $imageEl[0]);\n    });\n  }\n\n  function load() {\n    const {\n      $wrapperEl,\n      params: swiperParams,\n      slides,\n      activeIndex\n    } = swiper;\n    const isVirtual = swiper.virtual && swiperParams.virtual.enabled;\n    const params = swiperParams.lazy;\n    let slidesPerView = swiperParams.slidesPerView;\n\n    if (slidesPerView === 'auto') {\n      slidesPerView = 0;\n    }\n\n    function slideExist(index) {\n      if (isVirtual) {\n        if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index=\"${index}\"]`).length) {\n          return true;\n        }\n      } else if (slides[index]) return true;\n\n      return false;\n    }\n\n    function slideIndex(slideEl) {\n      if (isVirtual) {\n        return $(slideEl).attr('data-swiper-slide-index');\n      }\n\n      return $(slideEl).index();\n    }\n\n    if (!initialImageLoaded) initialImageLoaded = true;\n\n    if (swiper.params.watchSlidesProgress) {\n      $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each(slideEl => {\n        const index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();\n        loadInSlide(index);\n      });\n    } else if (slidesPerView > 1) {\n      for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {\n        if (slideExist(i)) loadInSlide(i);\n      }\n    } else {\n      loadInSlide(activeIndex);\n    }\n\n    if (params.loadPrevNext) {\n      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {\n        const amount = params.loadPrevNextAmount;\n        const spv = Math.ceil(slidesPerView);\n        const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);\n        const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides\n\n        for (let i = activeIndex + spv; i < maxIndex; i += 1) {\n          if (slideExist(i)) loadInSlide(i);\n        } // Prev Slides\n\n\n        for (let i = minIndex; i < activeIndex; i += 1) {\n          if (slideExist(i)) loadInSlide(i);\n        }\n      } else {\n        const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);\n        if (nextSlide.length > 0) loadInSlide(slideIndex(nextSlide));\n        const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);\n        if (prevSlide.length > 0) loadInSlide(slideIndex(prevSlide));\n      }\n    }\n  }\n\n  function checkInViewOnLoad() {\n    const window = getWindow();\n    if (!swiper || swiper.destroyed) return;\n    const $scrollElement = swiper.params.lazy.scrollingElement ? $(swiper.params.lazy.scrollingElement) : $(window);\n    const isWindow = $scrollElement[0] === window;\n    const scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;\n    const scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;\n    const swiperOffset = swiper.$el.offset();\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let inView = false;\n    if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n    const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];\n\n    for (let i = 0; i < swiperCoord.length; i += 1) {\n      const point = swiperCoord[i];\n\n      if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {\n        if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n\n        inView = true;\n      }\n    }\n\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n\n    if (inView) {\n      load();\n      $scrollElement.off('scroll', checkInViewOnLoad, passiveListener);\n    } else if (!scrollHandlerAttached) {\n      scrollHandlerAttached = true;\n      $scrollElement.on('scroll', checkInViewOnLoad, passiveListener);\n    }\n  }\n\n  on('beforeInit', () => {\n    if (swiper.params.lazy.enabled && swiper.params.preloadImages) {\n      swiper.params.preloadImages = false;\n    }\n  });\n  on('init', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('scroll', () => {\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.freeMode.sticky) {\n      load();\n    }\n  });\n  on('scrollbarDragMove resize _freeModeNoMomentumRelease', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('transitionStart', () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !initialImageLoaded) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    }\n  });\n  on('transitionEnd', () => {\n    if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on('slideChange', () => {\n    const {\n      lazy,\n      cssMode,\n      watchSlidesProgress,\n      touchReleaseOnEdges,\n      resistanceRatio\n    } = swiper.params;\n\n    if (lazy.enabled && (cssMode || watchSlidesProgress && (touchReleaseOnEdges || resistanceRatio === 0))) {\n      load();\n    }\n  });\n  on('destroy', () => {\n    if (!swiper.$el) return;\n    swiper.$el.find(`.${swiper.params.lazy.loadingClass}`).removeClass(swiper.params.lazy.loadingClass);\n  });\n  Object.assign(swiper.lazy, {\n    load,\n    loadInSlide\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/controller/controller.js\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\n\nfunction Controller(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    controller: {\n      control: undefined,\n      inverse: false,\n      by: 'slide' // or 'container'\n\n    }\n  });\n  swiper.controller = {\n    control: undefined\n  };\n\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n\n        return maxIndex;\n      };\n    }();\n\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:\n    // (x1,y1) is the known point before given value,\n    // (x3,y3) is the known point after given value.\n\n    let i1;\n    let i3;\n\n    this.interpolate = function interpolate(x2) {\n      if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n\n    return this;\n  } // xxx: for now i will just save one spline function to to\n\n\n  function getInterpolateFunction(c) {\n    if (!swiper.controller.spline) {\n      swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n  }\n\n  function setTranslate(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper = swiper.constructor;\n\n    function setControlledTranslate(c) {\n      // this will create an Interpolate function based on the snapGrids\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\n      // it makes sense to create this only once and recall it for the interpolation\n      // the function does a lot of value caching for performance\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n\n      if (swiper.params.controller.by === 'slide') {\n        getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n        // but it did not work out\n\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n\n  function setTransition(duration, byController) {\n    const Swiper = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n\n    function setControlledTransition(c) {\n      c.setTransition(duration, swiper);\n\n      if (duration !== 0) {\n        c.transitionStart();\n\n        if (c.params.autoHeight) {\n          nextTick(() => {\n            c.updateAutoHeight();\n          });\n        }\n\n        c.$wrapperEl.transitionEnd(() => {\n          if (!controlled) return;\n\n          if (c.params.loop && swiper.params.controller.by === 'slide') {\n            c.loopFix();\n          }\n\n          c.transitionEnd();\n        });\n      }\n    }\n\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n\n  function removeSpline() {\n    if (!swiper.controller.control) return;\n\n    if (swiper.controller.spline) {\n      swiper.controller.spline = undefined;\n      delete swiper.controller.spline;\n    }\n  }\n\n  on('beforeInit', () => {\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on('update', () => {\n    removeSpline();\n  });\n  on('resize', () => {\n    removeSpline();\n  });\n  on('observerUpdate', () => {\n    removeSpline();\n  });\n  on('setTranslate', (_s, translate, byController) => {\n    if (!swiper.controller.control) return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on('setTransition', (_s, duration, byController) => {\n    if (!swiper.controller.control) return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate,\n    setTransition\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/a11y/a11y.js\n\n\nfunction A11y(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    a11y: {\n      enabled: true,\n      notificationClass: 'swiper-notification',\n      prevSlideMessage: 'Previous slide',\n      nextSlideMessage: 'Next slide',\n      firstSlideMessage: 'This is the first slide',\n      lastSlideMessage: 'This is the last slide',\n      paginationBulletMessage: 'Go to slide {{index}}',\n      slideLabelMessage: '{{index}} / {{slidesLength}}',\n      containerMessage: null,\n      containerRoleDescriptionMessage: null,\n      itemRoleDescriptionMessage: null,\n      slideRole: 'group',\n      id: null\n    }\n  });\n  let liveRegion = null;\n\n  function notify(message) {\n    const notification = liveRegion;\n    if (notification.length === 0) return;\n    notification.html('');\n    notification.html(message);\n  }\n\n  function getRandomNumber(size) {\n    if (size === void 0) {\n      size = 16;\n    }\n\n    const randomChar = () => Math.round(16 * Math.random()).toString(16);\n\n    return 'x'.repeat(size).replace(/x/g, randomChar);\n  }\n\n  function makeElFocusable($el) {\n    $el.attr('tabIndex', '0');\n  }\n\n  function makeElNotFocusable($el) {\n    $el.attr('tabIndex', '-1');\n  }\n\n  function addElRole($el, role) {\n    $el.attr('role', role);\n  }\n\n  function addElRoleDescription($el, description) {\n    $el.attr('aria-roledescription', description);\n  }\n\n  function addElControls($el, controls) {\n    $el.attr('aria-controls', controls);\n  }\n\n  function addElLabel($el, label) {\n    $el.attr('aria-label', label);\n  }\n\n  function addElId($el, id) {\n    $el.attr('id', id);\n  }\n\n  function addElLive($el, live) {\n    $el.attr('aria-live', live);\n  }\n\n  function disableEl($el) {\n    $el.attr('aria-disabled', true);\n  }\n\n  function enableEl($el) {\n    $el.attr('aria-disabled', false);\n  }\n\n  function onEnterOrSpaceKey(e) {\n    if (e.keyCode !== 13 && e.keyCode !== 32) return;\n    const params = swiper.params.a11y;\n    const $targetEl = $(e.target);\n\n    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {\n      if (!(swiper.isEnd && !swiper.params.loop)) {\n        swiper.slideNext();\n      }\n\n      if (swiper.isEnd) {\n        notify(params.lastSlideMessage);\n      } else {\n        notify(params.nextSlideMessage);\n      }\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {\n      if (!(swiper.isBeginning && !swiper.params.loop)) {\n        swiper.slidePrev();\n      }\n\n      if (swiper.isBeginning) {\n        notify(params.firstSlideMessage);\n      } else {\n        notify(params.prevSlideMessage);\n      }\n    }\n\n    if (swiper.pagination && $targetEl.is(classesToSelector(swiper.params.pagination.bulletClass))) {\n      $targetEl[0].click();\n    }\n  }\n\n  function updateNavigation() {\n    if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n\n    if ($prevEl && $prevEl.length > 0) {\n      if (swiper.isBeginning) {\n        disableEl($prevEl);\n        makeElNotFocusable($prevEl);\n      } else {\n        enableEl($prevEl);\n        makeElFocusable($prevEl);\n      }\n    }\n\n    if ($nextEl && $nextEl.length > 0) {\n      if (swiper.isEnd) {\n        disableEl($nextEl);\n        makeElNotFocusable($nextEl);\n      } else {\n        enableEl($nextEl);\n        makeElFocusable($nextEl);\n      }\n    }\n  }\n\n  function hasPagination() {\n    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n  }\n\n  function hasClickablePagination() {\n    return hasPagination() && swiper.params.pagination.clickable;\n  }\n\n  function updatePagination() {\n    const params = swiper.params.a11y;\n    if (!hasPagination()) return;\n    swiper.pagination.bullets.each(bulletEl => {\n      const $bulletEl = $(bulletEl);\n\n      if (swiper.params.pagination.clickable) {\n        makeElFocusable($bulletEl);\n\n        if (!swiper.params.pagination.renderBullet) {\n          addElRole($bulletEl, 'button');\n          addElLabel($bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, $bulletEl.index() + 1));\n        }\n      }\n\n      if ($bulletEl.is(`.${swiper.params.pagination.bulletActiveClass}`)) {\n        $bulletEl.attr('aria-current', 'true');\n      } else {\n        $bulletEl.removeAttr('aria-current');\n      }\n    });\n  }\n\n  const initNavEl = ($el, wrapperId, message) => {\n    makeElFocusable($el);\n\n    if ($el[0].tagName !== 'BUTTON') {\n      addElRole($el, 'button');\n      $el.on('keydown', onEnterOrSpaceKey);\n    }\n\n    addElLabel($el, message);\n    addElControls($el, wrapperId);\n  };\n\n  const handleFocus = e => {\n    const slideEl = e.target.closest(`.${swiper.params.slideClass}`);\n    if (!slideEl || !swiper.slides.includes(slideEl)) return;\n    const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n    const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n    if (isActive || isVisible) return;\n    swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n  };\n\n  const initSlides = () => {\n    const params = swiper.params.a11y;\n\n    if (params.itemRoleDescriptionMessage) {\n      addElRoleDescription($(swiper.slides), params.itemRoleDescriptionMessage);\n    }\n\n    if (params.slideRole) {\n      addElRole($(swiper.slides), params.slideRole);\n    }\n\n    const slidesLength = swiper.params.loop ? swiper.slides.filter(el => !el.classList.contains(swiper.params.slideDuplicateClass)).length : swiper.slides.length;\n\n    if (params.slideLabelMessage) {\n      swiper.slides.each((slideEl, index) => {\n        const $slideEl = $(slideEl);\n        const slideIndex = swiper.params.loop ? parseInt($slideEl.attr('data-swiper-slide-index'), 10) : index;\n        const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n        addElLabel($slideEl, ariaLabelMessage);\n      });\n    }\n  };\n\n  const init = () => {\n    const params = swiper.params.a11y;\n    swiper.$el.append(liveRegion); // Container\n\n    const $containerEl = swiper.$el;\n\n    if (params.containerRoleDescriptionMessage) {\n      addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);\n    }\n\n    if (params.containerMessage) {\n      addElLabel($containerEl, params.containerMessage);\n    } // Wrapper\n\n\n    const $wrapperEl = swiper.$wrapperEl;\n    const wrapperId = params.id || $wrapperEl.attr('id') || `swiper-wrapper-${getRandomNumber(16)}`;\n    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';\n    addElId($wrapperEl, wrapperId);\n    addElLive($wrapperEl, live); // Slide\n\n    initSlides(); // Navigation\n\n    let $nextEl;\n    let $prevEl;\n\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n\n    if ($nextEl && $nextEl.length) {\n      initNavEl($nextEl, wrapperId, params.nextSlideMessage);\n    }\n\n    if ($prevEl && $prevEl.length) {\n      initNavEl($prevEl, wrapperId, params.prevSlideMessage);\n    } // Pagination\n\n\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.on('keydown', classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    } // Tab focus\n\n\n    swiper.$el.on('focus', handleFocus, true);\n  };\n\n  function destroy() {\n    if (liveRegion && liveRegion.length > 0) liveRegion.remove();\n    let $nextEl;\n    let $prevEl;\n\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n\n    if ($nextEl) {\n      $nextEl.off('keydown', onEnterOrSpaceKey);\n    }\n\n    if ($prevEl) {\n      $prevEl.off('keydown', onEnterOrSpaceKey);\n    } // Pagination\n\n\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.off('keydown', classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    } // Tab focus\n\n\n    swiper.$el.off('focus', handleFocus, true);\n  }\n\n  on('beforeInit', () => {\n    liveRegion = $(`<span class=\"${swiper.params.a11y.notificationClass}\" aria-live=\"assertive\" aria-atomic=\"true\"></span>`);\n  });\n  on('afterInit', () => {\n    if (!swiper.params.a11y.enabled) return;\n    init();\n  });\n  on('slidesLengthChange snapGridLengthChange slidesGridLengthChange', () => {\n    if (!swiper.params.a11y.enabled) return;\n    initSlides();\n  });\n  on('fromEdge toEdge afterInit lock unlock', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updateNavigation();\n  });\n  on('paginationUpdate', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updatePagination();\n  });\n  on('destroy', () => {\n    if (!swiper.params.a11y.enabled) return;\n    destroy();\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/history/history.js\n\nfunction History(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    history: {\n      enabled: false,\n      root: '',\n      replaceState: false,\n      key: 'slides',\n      keepQuery: false\n    }\n  });\n  let initialized = false;\n  let paths = {};\n\n  const slugify = text => {\n    return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n  };\n\n  const getPathValues = urlOverride => {\n    const window = getWindow();\n    let location;\n\n    if (urlOverride) {\n      location = new URL(urlOverride);\n    } else {\n      location = window.location;\n    }\n\n    const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\n    const total = pathArray.length;\n    const key = pathArray[total - 2];\n    const value = pathArray[total - 1];\n    return {\n      key,\n      value\n    };\n  };\n\n  const setHistory = (key, index) => {\n    const window = getWindow();\n    if (!initialized || !swiper.params.history.enabled) return;\n    let location;\n\n    if (swiper.params.url) {\n      location = new URL(swiper.params.url);\n    } else {\n      location = window.location;\n    }\n\n    const slide = swiper.slides.eq(index);\n    let value = slugify(slide.attr('data-history'));\n\n    if (swiper.params.history.root.length > 0) {\n      let root = swiper.params.history.root;\n      if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\n      value = `${root}/${key}/${value}`;\n    } else if (!location.pathname.includes(key)) {\n      value = `${key}/${value}`;\n    }\n\n    if (swiper.params.history.keepQuery) {\n      value += location.search;\n    }\n\n    const currentState = window.history.state;\n\n    if (currentState && currentState.value === value) {\n      return;\n    }\n\n    if (swiper.params.history.replaceState) {\n      window.history.replaceState({\n        value\n      }, null, value);\n    } else {\n      window.history.pushState({\n        value\n      }, null, value);\n    }\n  };\n\n  const scrollToSlide = (speed, value, runCallbacks) => {\n    if (value) {\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHistory = slugify(slide.attr('data-history'));\n\n        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index = slide.index();\n          swiper.slideTo(index, speed, runCallbacks);\n        }\n      }\n    } else {\n      swiper.slideTo(0, speed, runCallbacks);\n    }\n  };\n\n  const setHistoryPopState = () => {\n    paths = getPathValues(swiper.params.url);\n    scrollToSlide(swiper.params.speed, paths.value, false);\n  };\n\n  const init = () => {\n    const window = getWindow();\n    if (!swiper.params.history) return;\n\n    if (!window.history || !window.history.pushState) {\n      swiper.params.history.enabled = false;\n      swiper.params.hashNavigation.enabled = true;\n      return;\n    }\n\n    initialized = true;\n    paths = getPathValues(swiper.params.url);\n    if (!paths.key && !paths.value) return;\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n\n    if (!swiper.params.history.replaceState) {\n      window.addEventListener('popstate', setHistoryPopState);\n    }\n  };\n\n  const destroy = () => {\n    const window = getWindow();\n\n    if (!swiper.params.history.replaceState) {\n      window.removeEventListener('popstate', setHistoryPopState);\n    }\n  };\n\n  on('init', () => {\n    if (swiper.params.history.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.history.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/hash-navigation/hash-navigation.js\n\n\nfunction HashNavigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    on\n  } = _ref;\n  let initialized = false;\n  const document = getDocument();\n  const window = getWindow();\n  extendParams({\n    hashNavigation: {\n      enabled: false,\n      replaceState: false,\n      watchState: false\n    }\n  });\n\n  const onHashChange = () => {\n    emit('hashChange');\n    const newHash = document.location.hash.replace('#', '');\n    const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');\n\n    if (newHash !== activeSlideHash) {\n      const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash=\"${newHash}\"]`).index();\n      if (typeof newIndex === 'undefined') return;\n      swiper.slideTo(newIndex);\n    }\n  };\n\n  const setHash = () => {\n    if (!initialized || !swiper.params.hashNavigation.enabled) return;\n\n    if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n      window.history.replaceState(null, null, `#${swiper.slides.eq(swiper.activeIndex).attr('data-hash')}` || '');\n      emit('hashSet');\n    } else {\n      const slide = swiper.slides.eq(swiper.activeIndex);\n      const hash = slide.attr('data-hash') || slide.attr('data-history');\n      document.location.hash = hash || '';\n      emit('hashSet');\n    }\n  };\n\n  const init = () => {\n    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n    initialized = true;\n    const hash = document.location.hash.replace('#', '');\n\n    if (hash) {\n      const speed = 0;\n\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHash = slide.attr('data-hash') || slide.attr('data-history');\n\n        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index = slide.index();\n          swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);\n        }\n      }\n    }\n\n    if (swiper.params.hashNavigation.watchState) {\n      $(window).on('hashchange', onHashChange);\n    }\n  };\n\n  const destroy = () => {\n    if (swiper.params.hashNavigation.watchState) {\n      $(window).off('hashchange', onHashChange);\n    }\n  };\n\n  on('init', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHash();\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHash();\n    }\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/autoplay/autoplay.js\n/* eslint no-underscore-dangle: \"off\" */\n\n/* eslint no-use-before-define: \"off\" */\n\n\nfunction Autoplay(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  let timeout;\n  swiper.autoplay = {\n    running: false,\n    paused: false\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3000,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n\n  function run() {\n    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n    let delay = swiper.params.autoplay.delay;\n\n    if ($activeSlideEl.attr('data-swiper-autoplay')) {\n      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;\n    }\n\n    clearTimeout(timeout);\n    timeout = nextTick(() => {\n      let autoplayResult;\n\n      if (swiper.params.autoplay.reverseDirection) {\n        if (swiper.params.loop) {\n          swiper.loopFix();\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.isBeginning) {\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n          emit('autoplay');\n        } else {\n          stop();\n        }\n      } else if (swiper.params.loop) {\n        swiper.loopFix();\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit('autoplay');\n      } else if (!swiper.isEnd) {\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit('autoplay');\n      } else if (!swiper.params.autoplay.stopOnLastSlide) {\n        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);\n        emit('autoplay');\n      } else {\n        stop();\n      }\n\n      if (swiper.params.cssMode && swiper.autoplay.running) run();else if (autoplayResult === false) {\n        run();\n      }\n    }, delay);\n  }\n\n  function start() {\n    if (typeof timeout !== 'undefined') return false;\n    if (swiper.autoplay.running) return false;\n    swiper.autoplay.running = true;\n    emit('autoplayStart');\n    run();\n    return true;\n  }\n\n  function stop() {\n    if (!swiper.autoplay.running) return false;\n    if (typeof timeout === 'undefined') return false;\n\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = undefined;\n    }\n\n    swiper.autoplay.running = false;\n    emit('autoplayStop');\n    return true;\n  }\n\n  function pause(speed) {\n    if (!swiper.autoplay.running) return;\n    if (swiper.autoplay.paused) return;\n    if (timeout) clearTimeout(timeout);\n    swiper.autoplay.paused = true;\n\n    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n      swiper.autoplay.paused = false;\n      run();\n    } else {\n      ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n        swiper.$wrapperEl[0].addEventListener(event, onTransitionEnd);\n      });\n    }\n  }\n\n  function onVisibilityChange() {\n    const document = getDocument();\n\n    if (document.visibilityState === 'hidden' && swiper.autoplay.running) {\n      pause();\n    }\n\n    if (document.visibilityState === 'visible' && swiper.autoplay.paused) {\n      run();\n      swiper.autoplay.paused = false;\n    }\n  }\n\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;\n    if (e.target !== swiper.$wrapperEl[0]) return;\n    ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n    swiper.autoplay.paused = false;\n\n    if (!swiper.autoplay.running) {\n      stop();\n    } else {\n      run();\n    }\n  }\n\n  function onMouseEnter() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n    } else {\n      emit('autoplayPause');\n      pause();\n    }\n\n    ['transitionend', 'webkitTransitionEnd'].forEach(event => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n  }\n\n  function onMouseLeave() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      return;\n    }\n\n    swiper.autoplay.paused = false;\n    emit('autoplayResume');\n    run();\n  }\n\n  function attachMouseEvents() {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.$el.on('mouseenter', onMouseEnter);\n      swiper.$el.on('mouseleave', onMouseLeave);\n    }\n  }\n\n  function detachMouseEvents() {\n    swiper.$el.off('mouseenter', onMouseEnter);\n    swiper.$el.off('mouseleave', onMouseLeave);\n  }\n\n  on('init', () => {\n    if (swiper.params.autoplay.enabled) {\n      start();\n      const document = getDocument();\n      document.addEventListener('visibilitychange', onVisibilityChange);\n      attachMouseEvents();\n    }\n  });\n  on('beforeTransitionStart', (_s, speed, internal) => {\n    if (swiper.autoplay.running) {\n      if (internal || !swiper.params.autoplay.disableOnInteraction) {\n        swiper.autoplay.pause(speed);\n      } else {\n        stop();\n      }\n    }\n  });\n  on('sliderFirstMove', () => {\n    if (swiper.autoplay.running) {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        stop();\n      } else {\n        pause();\n      }\n    }\n  });\n  on('touchEnd', () => {\n    if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n      run();\n    }\n  });\n  on('destroy', () => {\n    detachMouseEvents();\n\n    if (swiper.autoplay.running) {\n      stop();\n    }\n\n    const document = getDocument();\n    document.removeEventListener('visibilitychange', onVisibilityChange);\n  });\n  Object.assign(swiper.autoplay, {\n    pause,\n    run,\n    start,\n    stop\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/thumbs/thumbs.js\n\n\nfunction Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix(); // eslint-disable-next-line\n\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n    }\n\n    swiper.slideTo(slideToIndex);\n  }\n\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView; // Activate thumbs\n\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        } // Find actual thumbs index to slide to\n\n\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n        if (typeof prevThumbsIndex === 'undefined') {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === 'undefined') {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    }\n  }\n\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    init();\n    update(true);\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/free-mode/free-mode.js\n\nfunction freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchStart() {\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-cube/effect-cube.js\n\n\nfunction EffectCube(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    cubeEffect: {\n      slideShadows: true,\n      shadow: true,\n      shadowOffset: 20,\n      shadowScale: 0.94\n    }\n  });\n\n  const createSlideShadows = ($slideEl, progress, isHorizontal) => {\n    let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n    let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n    if (shadowBefore.length === 0) {\n      shadowBefore = $(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}\"></div>`);\n      $slideEl.append(shadowBefore);\n    }\n\n    if (shadowAfter.length === 0) {\n      shadowAfter = $(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}\"></div>`);\n      $slideEl.append(shadowAfter);\n    }\n\n    if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n\n  const recreateShadows = () => {\n    // create new ones\n    const isHorizontal = swiper.isHorizontal();\n    swiper.slides.each(slideEl => {\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      createSlideShadows($(slideEl), progress, isHorizontal);\n    });\n  };\n\n  const setTranslate = () => {\n    const {\n      $el,\n      $wrapperEl,\n      slides,\n      width: swiperWidth,\n      height: swiperHeight,\n      rtlTranslate: rtl,\n      size: swiperSize,\n      browser\n    } = swiper;\n    const params = swiper.params.cubeEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let wrapperRotate = 0;\n    let $cubeShadowEl;\n\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');\n\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n          $wrapperEl.append($cubeShadowEl);\n        }\n\n        $cubeShadowEl.css({\n          height: `${swiperWidth}px`\n        });\n      } else {\n        $cubeShadowEl = $el.find('.swiper-cube-shadow');\n\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n          $el.append($cubeShadowEl);\n        }\n      }\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let slideIndex = i;\n\n      if (isVirtual) {\n        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);\n      }\n\n      let slideAngle = slideIndex * 90;\n      let round = Math.floor(slideAngle / 360);\n\n      if (rtl) {\n        slideAngle = -slideAngle;\n        round = Math.floor(-slideAngle / 360);\n      }\n\n      const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n\n      if (slideIndex % 4 === 0) {\n        tx = -round * 4 * swiperSize;\n        tz = 0;\n      } else if ((slideIndex - 1) % 4 === 0) {\n        tx = 0;\n        tz = -round * 4 * swiperSize;\n      } else if ((slideIndex - 2) % 4 === 0) {\n        tx = swiperSize + round * 4 * swiperSize;\n        tz = swiperSize;\n      } else if ((slideIndex - 3) % 4 === 0) {\n        tx = -swiperSize;\n        tz = 3 * swiperSize + swiperSize * 4 * round;\n      }\n\n      if (rtl) {\n        tx = -tx;\n      }\n\n      if (!isHorizontal) {\n        ty = tx;\n        tx = 0;\n      }\n\n      const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n\n      if (progress <= 1 && progress > -1) {\n        wrapperRotate = slideIndex * 90 + progress * 90;\n        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n      }\n\n      $slideEl.transform(transform);\n\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, isHorizontal);\n      }\n    }\n\n    $wrapperEl.css({\n      '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,\n      'transform-origin': `50% 50% -${swiperSize / 2}px`\n    });\n\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl.transform(`translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);\n      } else {\n        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n        const scale1 = params.shadowScale;\n        const scale2 = params.shadowScale / multiplier;\n        const offset = params.shadowOffset;\n        $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);\n      }\n    }\n\n    const zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;\n    $wrapperEl.transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);\n    $wrapperEl[0].style.setProperty('--swiper-cube-translate-z', `${zFactor}px`);\n  };\n\n  const setTransition = duration => {\n    const {\n      $el,\n      slides\n    } = swiper;\n    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n\n    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n      $el.find('.swiper-cube-shadow').transition(duration);\n    }\n  };\n\n  effectInit({\n    effect: 'cube',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.cubeEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      resistanceRatio: 0,\n      spaceBetween: 0,\n      centeredSlides: false,\n      virtualTranslate: true\n    })\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/shared/create-shadow.js\n\nfunction create_shadow_createShadow(params, $slideEl, side) {\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}`;\n  const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;\n  let $shadowEl = $shadowContainer.children(`.${shadowClass}`);\n\n  if (!$shadowEl.length) {\n    $shadowEl = $(`<div class=\"swiper-slide-shadow${side ? `-${side}` : ''}\"></div>`);\n    $shadowContainer.append($shadowEl);\n  }\n\n  return $shadowEl;\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-flip/effect-flip.js\n\n\n\n\n\nfunction EffectFlip(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true,\n      transformEl: null\n    }\n  });\n\n  const createSlideShadows = ($slideEl, progress, params) => {\n    let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n    let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n    if (shadowBefore.length === 0) {\n      shadowBefore = createShadow(params, $slideEl, swiper.isHorizontal() ? 'left' : 'top');\n    }\n\n    if (shadowAfter.length === 0) {\n      shadowAfter = createShadow(params, $slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n    }\n\n    if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n\n  const recreateShadows = () => {\n    // Set shadows\n    const params = swiper.params.flipEffect;\n    swiper.slides.each(slideEl => {\n      const $slideEl = $(slideEl);\n      let progress = $slideEl[0].progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n\n      createSlideShadows($slideEl, progress, params);\n    });\n  };\n\n  const setTranslate = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let progress = $slideEl[0].progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      }\n\n      const offset = $slideEl[0].swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let ty = 0;\n\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, params);\n      }\n\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.flipEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  effectInit({\n    effect: 'flip',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-coverflow/effect-coverflow.js\n\n\n\nfunction EffectCoverflow(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true,\n      transformEl: null\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform = swiper.translate;\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth; // Each slide offset from center\n\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = $slideEl[0].swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders\n\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values\n\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(slideTransform);\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n        let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n        if ($shadowBeforeEl.length === 0) {\n          $shadowBeforeEl = createShadow(params, $slideEl, isHorizontal ? 'left' : 'top');\n        }\n\n        if ($shadowAfterEl.length === 0) {\n          $shadowAfterEl = createShadow(params, $slideEl, isHorizontal ? 'right' : 'bottom');\n        }\n\n        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.coverflowEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n  };\n\n  effectInit({\n    effect: 'coverflow',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-creative/effect-creative.js\n\n\n\n\nfunction EffectCreative(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    creativeEffect: {\n      transformEl: null,\n      limitProgress: 1,\n      shadowPerProgress: false,\n      progressMultiplier: 1,\n      perspective: true,\n      prev: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      },\n      next: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      }\n    }\n  });\n\n  const getTranslateValue = value => {\n    if (typeof value === 'string') return value;\n    return `${value}px`;\n  };\n\n  const setTranslate = () => {\n    const {\n      slides,\n      $wrapperEl,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.creativeEffect;\n    const {\n      progressMultiplier: multiplier\n    } = params;\n    const isCenteredSlides = swiper.params.centeredSlides;\n\n    if (isCenteredSlides) {\n      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n      $wrapperEl.transform(`translateX(calc(50% - ${margin}px))`);\n    }\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max($slideEl[0].progress, -params.limitProgress), params.limitProgress);\n      let originalProgress = progress;\n\n      if (!isCenteredSlides) {\n        originalProgress = Math.min(Math.max($slideEl[0].originalProgress, -params.limitProgress), params.limitProgress);\n      }\n\n      const offset = $slideEl[0].swiperSlideOffset;\n      const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];\n      const r = [0, 0, 0];\n      let custom = false;\n\n      if (!swiper.isHorizontal()) {\n        t[1] = t[0];\n        t[0] = 0;\n      }\n\n      let data = {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        scale: 1,\n        opacity: 1\n      };\n\n      if (progress < 0) {\n        data = params.next;\n        custom = true;\n      } else if (progress > 0) {\n        data = params.prev;\n        custom = true;\n      } // set translate\n\n\n      t.forEach((value, index) => {\n        t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\n      }); // set rotates\n\n      r.forEach((value, index) => {\n        r[index] = data.rotate[index] * Math.abs(progress * multiplier);\n      });\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const translateString = t.join(', ');\n      const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n      const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`; // Set shadows\n\n      if (custom && data.shadow || !custom) {\n        let $shadowEl = $slideEl.children('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0 && data.shadow) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n\n        if ($shadowEl.length) {\n          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n          $shadowEl[0].style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n        }\n      }\n\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform).css({\n        opacity: opacityString\n      });\n\n      if (data.origin) {\n        $targetEl.css('transform-origin', data.origin);\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.creativeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n\n  effectInit({\n    effect: 'creative',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => swiper.params.creativeEffect.perspective,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/modules/effect-cards/effect-cards.js\n\n\n\n\nfunction EffectCards(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null,\n      rotate: true\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset = $slideEl[0].swiperSlideOffset;\n\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n      }\n\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset -= slides[0].swiperSlideOffset;\n      }\n\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -2 * progress;\n      let tXAdd = 8 - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n\n      if (progress < 0) {\n        // next\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        // prev\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rotate : 0}deg)\n        scale(${scaleString})\n      `;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowEl = $slideEl.find('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n\n        if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  effectInit({\n    effect: 'cards',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/swiper/swiper.esm.js\n/**\n * Swiper 8.3.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2022 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: July 13, 2022\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack___webpack_module__","__webpack_exports__","__webpack_require__","d","Swiper","SwiperSlide","react","swiper_esm","isObject","o","constructor","Object","prototype","toString","call","slice","extend","target","src","noExtend","keys","filter","key","indexOf","forEach","length","__swiper__","needsNavigation","params","navigation","nextEl","prevEl","needsPagination","pagination","el","needsScrollbar","scrollbar","uniqueClasses","classNames","classes","split","map","c","trim","unique","join","paramsList","calcLoopedSlides","slides","swiperParams","slidesPerViewParams","slidesPerView","breakpoints","breakpoint","ZP","getBreakpoint","breakpointOnlyParams","undefined","loopedSlides","Math","ceil","parseFloat","loopAdditionalSlides","processChildren","Children","toArray","child","type","displayName","props","children","slide","updateOnVirtualData","swiper","destroyed","virtual","enabled","updateSlides","updateProgress","updateSlidesClasses","lazy","load","parallax","setTranslate","useIsomorphicLayoutEffect","callback","deps","window","useEffect","useLayoutEffect","SwiperSlideContext","createContext","SwiperContext","_extends","assign","bind","i","arguments","source","hasOwnProperty","apply","forwardRef","_temp","externalElRef","className","tag","Tag","wrapperTag","WrapperTag","onSwiper","rest","eventsAssigned","containerClasses","setContainerClasses","useState","virtualData","setVirtualData","breakpointChanged","setBreakpointChanged","initializedRef","useRef","swiperElRef","swiperRef","oldPassedParamsRef","oldSlides","nextElRef","prevElRef","paginationElRef","scrollbarElRef","passedParams","restProps","events","getParams","obj","splitEvents","on","defaults","extendedDefaults","_emitClasses","init","allowedParams","replace","plainObj","search","toLowerCase","substr","slots","getChildren","slot","foundSlides","onBeforeBreakpoint","_containerClasses","initSwiper","current","loopCreate","loopDestroy","loop","extendWith","cache","renderExternal","renderExternalUpdate","originalParams","attachEvents","eventName","detachEvents","off","emitSlidesClasses","mountSwiper","_ref","paginationEl","scrollbarEl","destroy","changedParams","getChangedParams","oldParams","oldChildren","getKey","addKey","oldChildrenKeys","childrenKeys","watchParams","newKeys","oldKeys","newKey","oldKey","updateSwiper","updateParams","currentParams","thumbs","needThumbsInit","needControllerInit","needPaginationInit","needScrollbarInit","needNavigationInit","includes","controller","control","destroyModule","mod","newValue","update","initialized","render","updateSize","allowSlideNext","allowSlidePrev","changeDirection","direction","createElement","ref","Provider","value","renderVirtual","style","isHorizontal","rtlTranslate","offset","top","index","from","to","cloneElement","renderLoop","modifiedSlides","duplicateSlide","position","slideDuplicateClass","loopFillGroupWithBlank","blankSlidesNum","slidesPerGroup","blankSlide","slideClass","slideBlankClass","prependSlides","appendSlides","Fragment","swiper_slide_extends","externalRef","zoom","virtualIndex","slideElRef","slideClasses","setSlideClasses","updateClasses","_s","getSlideClasses","slideData","isActive","isVisible","isDuplicate","isPrev","isNext","renderChildren","ssr_window_esm_isObject","freeMode","Keyboard","Mousewheel","core","ssrDocument","body","addEventListener","removeEventListener","activeElement","blur","nodeName","querySelector","querySelectorAll","getElementById","createEvent","initEvent","childNodes","setAttribute","getElementsByTagName","createElementNS","importNode","location","hash","host","hostname","href","origin","pathname","protocol","ssr_window_esm_getDocument","doc","document","ssrWindow","navigator","userAgent","history","replaceState","pushState","go","back","CustomEvent","getComputedStyle","getPropertyValue","Image","Date","screen","setTimeout","clearTimeout","matchMedia","requestAnimationFrame","cancelAnimationFrame","id","ssr_window_esm_getWindow","win","Dom7","Array","items","makeReactive","proto","__proto__","defineProperty","get","set","arrayFlat","arr","res","isArray","arrayFilter","dom7_esm_$","selector","context","html","toCreate","tempParent","innerHTML","qsa","a","nodeType","arrayUnique","uniqueArray","fn","noTrigger","shortcut","name","args","trigger","Methods","addClass","classList","add","removeClass","remove","hasClass","contains","toggleClass","toggle","attr","attrs","getAttribute","attrName","removeAttr","removeAttribute","transform","transition","duration","transitionDuration","eventType","targetSelector","listener","capture","handleLiveEvent","e","eventData","dom7EventData","unshift","is","parents","k","handleEvent","j","event","dom7LiveListeners","proxyListener","dom7Listeners","handlers","handler","splice","dom7proxy","evt","detail","bubbles","cancelable","data","dataIndex","dispatchEvent","transitionEnd","dom","fireCallBack","outerWidth","includeMargins","styles","offsetWidth","outerHeight","offsetHeight","box","getBoundingClientRect","clientTop","clientLeft","scrollTop","scrollY","scrollLeft","scrollX","left","css","prop","each","text","textContent","compareWith","matches","webkitMatchesSelector","msMatchesSelector","previousSibling","eq","returnIndex","append","els","newChild","tempDiv","firstChild","appendChild","prepend","insertBefore","next","nextElementSibling","nextAll","nextEls","prev","previousElementSibling","prevAll","prevEls","parent","parentNode","closest","find","foundElements","found","result","removeChild","methodName","writable","utils_nextTick","delay","now","utils_isObject","isNode","node","HTMLElement","utils_extend","nextSource","keysArray","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","utils_setCSSProperty","varName","varValue","setProperty","animateCSSModeScroll","targetPosition","side","startPosition","translate","startTime","time","speed","wrapperEl","scrollSnapType","cssModeFrameID","dir","isOutOfBound","animate","getTime","progress","max","min","currentPosition","easeProgress","cos","PI","scrollTo","overflow","support","getSupport","calcSupport","smoothScroll","documentElement","touch","DocumentTouch","passiveListener","supportsPassive","opts","gestures","deviceCached","browser","events_emitter","priority","eventsListeners","method","once","onceHandler","__emitterProxy","_len","_key","onAny","eventsAnyListeners","offAny","eventHandler","emit","_len2","_key2","eventsArray","transitionEmit","runCallbacks","step","activeIndex","previousIndex","onTouchStart","touchEventsData","touches","animating","preventInteractionOnTransition","cssMode","loopFix","originalEvent","$targetEl","touchEventsTarget","isTouchEvent","which","button","isTouched","isMoved","swipingClassHasValue","noSwipingClass","shadowRoot","path","noSwipingSelector","isTargetShadow","noSwiping","closestElement","base","__closestFrom","assignedSlot","getRootNode","allowClick","swipeHandler","currentX","targetTouches","pageX","currentY","pageY","startX","startY","edgeSwipeDetection","iOSEdgeSwipeDetection","edgeSwipeThreshold","iOSEdgeSwipeThreshold","innerWidth","preventDefault","allowTouchCallbacks","isScrolling","startMoving","touchStartTime","swipeDirection","threshold","allowThresholdMove","focusableElements","shouldPreventDefault","allowTouchMove","touchStartPreventDefault","touchStartForcePreventDefault","isContentEditable","onTouchMove","rtl","targetTouch","changedTouches","preventedByNestedSwiper","touchReleaseOnEdges","isVertical","maxTranslate","minTranslate","diffX","diffY","sqrt","touchAngle","atan2","abs","touchMoveStopPropagation","nested","stopPropagation","startTranslate","getTranslate","setTransition","$wrapperEl","allowMomentumBounce","grabCursor","setGrabCursor","diff","touchRatio","currentTranslate","disableParentSwiper","resistanceRatio","resistance","followFinger","watchSlidesProgress","updateActiveIndex","onTouchEnd","slidesGrid","touchEndTime","timeDiff","pathTree","composedPath","updateClickedSlide","lastClickTime","currentPos","stopIndex","groupSize","slidesSizesGrid","slidesPerGroupSkip","increment","rewindFirstIndex","rewindLastIndex","rewind","isBeginning","isEnd","ratio","longSwipesMs","longSwipes","slideTo","longSwipesRatio","shortSwipes","isNavButtonTarget","onResize","setBreakpoint","snapGrid","centeredSlides","autoplay","running","paused","run","watchOverflow","checkOverflow","onClick","preventClicks","preventClicksPropagation","stopImmediatePropagation","onScroll","previousTranslate","newProgress","translatesDiff","dummyEventAttached","dummyEventListener","touchEvents","device","domMethod","swiperMethod","start","passiveListeners","passive","move","end","cancel","updateOnWindowResize","ios","android","isGridEnabled","grid","rows","initialSlide","resizeObserver","createElements","width","height","url","autoHeight","setWrapperSize","virtualTranslate","effect","breakpointsBase","spaceBetween","slidesPerGroupAuto","centeredSlidesBounds","slidesOffsetBefore","slidesOffsetAfter","normalizeSlideIndex","centerInsufficientSlides","roundLengths","simulateTouch","uniqueNavElements","slideToClickedSlide","preloadImages","updateOnImagesReady","loopPreventsSlide","maxBackfaceHiddenSlides","containerModifierClass","slideActiveClass","slideDuplicateActiveClass","slideVisibleClass","slideNextClass","slideDuplicateNextClass","slidePrevClass","slideDuplicatePrevClass","wrapperClass","runCallbacksOnInit","prototypes","eventsEmitter","$el","clientWidth","clientHeight","parseInt","Number","isNaN","size","getDirectionLabel","property","getDirectionPropertyValue","label","swiperSize","wrongRTL","isVirtual","previousSlidesLength","slidesLength","offsetBefore","offsetAfter","previousSnapGridLength","previousSlidesGridLength","slidePosition","prevSlideSize","virtualSize","marginLeft","marginBottom","marginTop","marginRight","gridEnabled","initSlides","slideSize","shouldResetSlideSize","updateSlide","slideStyles","currentTransform","currentWebKitTransform","webkitTransform","paddingLeft","paddingRight","boxSizing","floor","swiperSlideSize","updateWrapperSize","newSlidesGrid","slidesGridItem","_","slideIndex","allSlidesSize","slideSizeValue","maxSnap","snap","allSlidesOffset","snapIndex","addToSnapGrid","addToSlidesGrid","v","updateSlidesOffset","backFaceHiddenClass","hasClassBackfaceClassAdded","updateAutoHeight","activeSlides","newHeight","getSlideByIndex","visibleSlides","swiperSlideOffset","offsetLeft","offsetTop","updateSlidesProgress","offsetCenter","visibleSlidesIndexes","slideOffset","slideProgress","originalSlideProgress","slideBefore","slideAfter","originalProgress","multiplier","wasBeginning","wasEnd","realIndex","activeSlide","nextSlide","prevSlide","newActiveIndex","previousRealIndex","previousSnapIndex","skip","slideFound","clickedSlide","clickedIndex","axis","utils_getTranslate","matrix","curTransform","transformMatrix","curStyle","utils_getComputedStyle","currentStyle","WebKitCSSMatrix","MozTransform","OTransform","MsTransform","msTransform","m41","m42","byController","x","y","translateTo","translateBounds","internal","newTranslate","isH","behavior","onTranslateToWrapperTransitionEnd","transitionStart","initial","indexAsNumber","isValidNumber","isFinite","normalizedTranslate","normalizedGrid","normalizedGridNext","t","_immediateVirtual","_swiperImmediateVirtual","onSlideToWrapperTransitionEnd","slideToLoop","newIndex","slideNext","perGroup","slidesPerViewDynamic","_clientLeft","slidePrev","normalize","val","normalizedSnapGrid","prevSnap","prevSnapIndex","prevIndex","lastIndex","slideReset","slideToClosest","currentSnap","nextSnap","slideToIndex","$selector","blankNode","cloneNode","snapTranslate","slideChanged","moving","isLocked","cursor","unsetGrabCursor","currentBreakpoint","breakpointParams","wasMultiRow","isMultiRow","wasEnabled","emitContainerClasses","fill","wasModuleEnabled","isModuleEnabled","disable","enable","directionChanged","needsReLoop","isEnabled","containerEl","currentHeight","innerHeight","points","point","minRatio","sort","b","wasLocked","lastSlideIndex","lastSlideRightEdge","addClasses","suffixes","prepareClasses","entries","prefix","resultClasses","item","removeClasses","images","loadImage","imageEl","srcset","sizes","checkForComplete","image","onReady","isPicture","complete","onload","onerror","imagesLoaded","imagesToLoad","currentSrc","overrides","swipers","newParams","calcDevice","platform","ua","screenWidth","screenHeight","match","ipad","ipod","iphone","macos","iPadScreens","os","calcBrowser","isSafari","isWebView","test","modules","__modules__","allModulesParams","extendParams","moduleParamName","moduleParams","auto","$","velocity","desktop","touchEventsTouch","touchEventsDesktop","clickTimeout","velocities","cls","slideEl","updates","view","exact","spv","breakLoop","slideInView","translateValue","translated","newDirection","needUpdate","currentDirection","mounted","getWrapperSelector","getWrapper","options","wrapper","mount","deleteInstance","cleanStyles","deleteProps","object","extendDefaults","newDefaults","installModule","use","module","m","prototypeGroup","protoMethod","observer","animationFrame","resizeHandler","createObserver","ResizeObserver","newWidth","_ref2","contentBoxSize","contentRect","inlineSize","blockSize","observe","removeObserver","unobserve","orientationChangeHandler","observers","attach","ObserverFunc","MutationObserver","WebkitMutationObserver","mutations","observerUpdate","attributes","childList","characterData","observeParents","observeSlideChildren","containerParents","disconnect","handle","kc","keyCode","charCode","pageUpDown","keyboard","isPageUp","isPageDown","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","shiftKey","altKey","ctrlKey","metaKey","onlyInViewport","inView","swiperWidth","swiperHeight","windowWidth","windowHeight","swiperOffset","swiperCoord","returnValue","mousewheel","releaseOnEdges","invert","forceToAxis","sensitivity","eventsTarget","thresholdDelta","thresholdTime","timeout","lastScrollTime","lastEventBeforeSnap","recentWheelEvents","handleMouseEnter","mouseEntered","handleMouseLeave","animateSlider","newEvent","delta","raw","rtlFactor","sX","sY","pX","pY","wheelDelta","wheelDeltaY","wheelDeltaX","HORIZONTAL_AXIS","deltaY","deltaX","deltaMode","spinX","spinY","pixelX","pixelY","positions","sign","ignoreWheelEvents","sticky","shift","prevEvent","firstEvent","snapToThreshold","autoplayDisableOnInteraction","stop","releaseScroll","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","minimumVelocity","lastMoveEvent","pop","velocityEvent","distance","momentumDuration","momentumDistance","newPosition","doBounce","afterBouncePosition","bounceAmount","needsLoopFix","moveDistance","currentSlideSize"],"sourceRoot":""}